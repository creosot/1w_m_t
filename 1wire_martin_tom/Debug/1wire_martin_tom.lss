
1wire_martin_tom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000518  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080007c  0080007c  000005c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be8  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000734  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067a  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  0000205c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d9  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b8  00000000  00000000  000026fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	38 c1       	rjmp	.+624    	; 0x278 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e1       	ldi	r30, 0x18	; 24
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 37       	cpi	r26, 0x7C	; 124
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e7       	ldi	r26, 0x7C	; 124
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 3a       	cpi	r26, 0xA2	; 162
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e1 d1       	rcall	.+962    	; 0x41c <main>
  5a:	5c c2       	rjmp	.+1208   	; 0x514 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_6>:
	DDRC &= ~((1 << PORTC2) | (1 << PORTC1) | (1 << PORTC0)); //INPUT PC0-BUT+; PC1-BUT-; PC2-BUT_M	
	PORTC |= (1 << PORTC2) | (1 << PORTC1) | (1 << PORTC0); //pull up
}

void initGenerator(){
	DDRC |= (1 << PORTC4); //output
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	af 93       	push	r26
  6e:	bf 93       	push	r27
  70:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <timer1_millis>
  74:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <timer1_millis+0x1>
  78:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <timer1_millis+0x2>
  7c:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <timer1_millis+0x3>
  80:	01 96       	adiw	r24, 0x01	; 1
  82:	a1 1d       	adc	r26, r1
  84:	b1 1d       	adc	r27, r1
  86:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <timer1_millis>
  8a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <timer1_millis+0x1>
  8e:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <timer1_millis+0x2>
  92:	b0 93 85 00 	sts	0x0085, r27	; 0x800085 <timer1_millis+0x3>
  96:	bf 91       	pop	r27
  98:	af 91       	pop	r26
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <millis>:
  a8:	f8 94       	cli
  aa:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <timer1_millis>
  ae:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <timer1_millis+0x1>
  b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer1_millis+0x2>
  b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer1_millis+0x3>
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <initWDT>:
  be:	81 b5       	in	r24, 0x21	; 33
  c0:	87 60       	ori	r24, 0x07	; 7
  c2:	81 bd       	out	0x21, r24	; 33
  c4:	81 b5       	in	r24, 0x21	; 33
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	81 bd       	out	0x21, r24	; 33
  ca:	81 b5       	in	r24, 0x21	; 33
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	81 bd       	out	0x21, r24	; 33
  d0:	a8 95       	wdr
  d2:	08 95       	ret

000000d4 <disableWDT>:
  d4:	a8 95       	wdr
  d6:	81 b5       	in	r24, 0x21	; 33
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	81 bd       	out	0x21, r24	; 33
  dc:	81 b5       	in	r24, 0x21	; 33
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	81 bd       	out	0x21, r24	; 33
  e2:	08 95       	ret

000000e4 <handleError>:
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	88 23       	and	r24, r24
  f0:	e1 f0       	breq	.+56     	; 0x12a <handleError+0x46>
  f2:	18 2f       	mov	r17, r24
  f4:	ce e9       	ldi	r28, 0x9E	; 158
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	0f 2e       	mov	r0, r31
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	ff 2e       	mov	r15, r31
  fe:	f0 2d       	mov	r31, r0
 100:	00 e1       	ldi	r16, 0x10	; 16
 102:	e8 df       	rcall	.-48     	; 0xd4 <disableWDT>
 104:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <mode>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	f8 82       	st	Y, r15
 10e:	09 83       	std	Y+1, r16	; 0x01
 110:	0a 83       	std	Y+2, r16	; 0x02
 112:	1b 83       	std	Y+3, r17	; 0x03
 114:	8f bf       	out	0x3f, r24	; 63
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ed       	ldi	r24, 0xD3	; 211
 11a:	90 e3       	ldi	r25, 0x30	; 48
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <handleError+0x38>
 124:	00 c0       	rjmp	.+0      	; 0x126 <handleError+0x42>
 126:	00 00       	nop
 128:	ec cf       	rjmp	.-40     	; 0x102 <handleError+0x1e>
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	08 95       	ret

00000136 <initButton>:
 136:	84 b3       	in	r24, 0x14	; 20
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	84 bb       	out	0x14, r24	; 20
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	87 60       	ori	r24, 0x07	; 7
 140:	85 bb       	out	0x15, r24	; 21
 142:	08 95       	ret

00000144 <initDisplay>:
}

void initDisplay(){		//									   					     _A_
	DDRB |= 0b11111111; //PB0-B; PB1-E; PB2-D; PB3-DP; PB4-C; PB5-G; PB6-A; PB7-F  F|_G_|B
 144:	87 b3       	in	r24, 0x17	; 23
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0b00001111; //dig1-PD2; dig2-PD1; dig3-PD0; dig4-PD4				   E|_D_|C													  
 14a:	81 b3       	in	r24, 0x11	; 17
 14c:	8f 60       	ori	r24, 0x0F	; 15
 14e:	81 bb       	out	0x11, r24	; 17
 150:	08 95       	ret

00000152 <initTimer1>:
}

void initTimer1(){
	TCNT1 = 0;
 152:	1d bc       	out	0x2d, r1	; 45
 154:	1c bc       	out	0x2c, r1	; 44
	OCR1AH = (uint8_t)(CTC_MATCH_OVERFLOW >> 8);
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
 15a:	88 ee       	ldi	r24, 0xE8	; 232
 15c:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0;
 15e:	1f bc       	out	0x2f, r1	; 47
	TCCR1A |= (0 << WGM11) | (0 << WGM10); //mode CTC
 160:	8f b5       	in	r24, 0x2f	; 47
 162:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 << WGM13) | (1 << WGM12) |(0 << CS12) | (1 << CS11) | (0 << CS10); //mode CTC, clk/8
 164:	8e b5       	in	r24, 0x2e	; 46
 166:	8a 60       	ori	r24, 0x0A	; 10
 168:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
 16a:	89 b7       	in	r24, 0x39	; 57
 16c:	80 61       	ori	r24, 0x10	; 16
 16e:	89 bf       	out	0x39, r24	; 57
 170:	08 95       	ret

00000172 <initTimer2>:
}

void initTimer2(){
	TCNT2 = 0;
 172:	14 bc       	out	0x24, r1	; 36
	OCR2 = 125; //4ms
 174:	8d e7       	ldi	r24, 0x7D	; 125
 176:	83 bd       	out	0x23, r24	; 35
	TCCR2 = 0;
 178:	15 bc       	out	0x25, r1	; 37
	TCCR2 |= (1 << WGM21) | (0 << WGM20); //mode CTC
 17a:	85 b5       	in	r24, 0x25	; 37
 17c:	88 60       	ori	r24, 0x08	; 8
 17e:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS22) | (1 << CS21) | (0 << CS20); //mode CTC, clk/256
 180:	85 b5       	in	r24, 0x25	; 37
 182:	86 60       	ori	r24, 0x06	; 6
 184:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2); //Output Compare A Match Interrupt Enable
 186:	89 b7       	in	r24, 0x39	; 57
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	89 bf       	out	0x39, r24	; 57
 18c:	08 95       	ret

0000018e <getButtonState>:
}

void getButtonState(uint8_t but){
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	uint8_t state = PINC & buttonMask[but];
 19c:	13 b3       	in	r17, 0x13	; 19
 19e:	c8 2f       	mov	r28, r24
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	fe 01       	movw	r30, r28
 1a4:	e0 5a       	subi	r30, 0xA0	; 160
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	80 81       	ld	r24, Z
 1aa:	18 23       	and	r17, r24
	if (state ^ buttonDebounceState[but]){
 1ac:	fe 01       	movw	r30, r28
 1ae:	e8 56       	subi	r30, 0x68	; 104
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 81       	ld	r24, Z
 1b4:	81 17       	cp	r24, r17
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <getButtonState+0x4a>
		buttonDebounceState[but] = state;
 1b8:	fe 01       	movw	r30, r28
 1ba:	e8 56       	subi	r30, 0x68	; 104
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	10 83       	st	Z, r17
		lastDebounceTime[but] = millis();
 1c0:	73 df       	rcall	.-282    	; 0xa8 <millis>
 1c2:	fe 01       	movw	r30, r28
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	e4 57       	subi	r30, 0x74	; 116
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	60 83       	st	Z, r22
 1d2:	71 83       	std	Z+1, r23	; 0x01
 1d4:	82 83       	std	Z+2, r24	; 0x02
 1d6:	93 83       	std	Z+3, r25	; 0x03
	}
	if ((millis() - lastDebounceTime[but] > 39)){
 1d8:	67 df       	rcall	.-306    	; 0xa8 <millis>
 1da:	fe 01       	movw	r30, r28
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	e4 57       	subi	r30, 0x74	; 116
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	c0 80       	ld	r12, Z
 1ea:	d1 80       	ldd	r13, Z+1	; 0x01
 1ec:	e2 80       	ldd	r14, Z+2	; 0x02
 1ee:	f3 80       	ldd	r15, Z+3	; 0x03
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	8c 19       	sub	r24, r12
 1f6:	9d 09       	sbc	r25, r13
 1f8:	ae 09       	sbc	r26, r14
 1fa:	bf 09       	sbc	r27, r15
 1fc:	88 97       	sbiw	r24, 0x28	; 40
 1fe:	a1 05       	cpc	r26, r1
 200:	b1 05       	cpc	r27, r1
 202:	c8 f0       	brcs	.+50     	; 0x236 <getButtonState+0xa8>
		if (state ^ buttonPrefState[but]){
 204:	fe 01       	movw	r30, r28
 206:	ed 59       	subi	r30, 0x9D	; 157
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	80 81       	ld	r24, Z
 20c:	81 17       	cp	r24, r17
 20e:	99 f0       	breq	.+38     	; 0x236 <getButtonState+0xa8>
			buttonPrefState[but] = state;
 210:	fe 01       	movw	r30, r28
 212:	ed 59       	subi	r30, 0x9D	; 157
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	10 83       	st	Z, r17
			buttonStateON[but] = (~state) & buttonMask[but];
 218:	10 95       	com	r17
 21a:	fe 01       	movw	r30, r28
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	80 81       	ld	r24, Z
 222:	fe 01       	movw	r30, r28
 224:	e7 57       	subi	r30, 0x77	; 119
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	91 2f       	mov	r25, r17
 22a:	98 23       	and	r25, r24
 22c:	90 83       	st	Z, r25
			buttonStateOFF[but] = (~state) ^ buttonMask[but];
 22e:	ca 57       	subi	r28, 0x7A	; 122
 230:	df 4f       	sbci	r29, 0xFF	; 255
 232:	18 27       	eor	r17, r24
 234:	18 83       	st	Y, r17
		}
	}
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	08 95       	ret

00000246 <setNumber>:

void setNumber(uint8_t num, uint8_t dig){
	if (num > MAXNUMBER-1 || dig>3) return;
 246:	81 31       	cpi	r24, 0x11	; 17
 248:	b0 f4       	brcc	.+44     	; 0x276 <setNumber+0x30>
 24a:	64 30       	cpi	r22, 0x04	; 4
 24c:	a0 f4       	brcc	.+40     	; 0x276 <setNumber+0x30>
	PORTD |= 0b00001111;
 24e:	92 b3       	in	r25, 0x12	; 18
 250:	9f 60       	ori	r25, 0x0F	; 15
 252:	92 bb       	out	0x12, r25	; 18
	PORTB = number[num];
 254:	e8 2f       	mov	r30, r24
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	e6 59       	subi	r30, 0x96	; 150
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	80 81       	ld	r24, Z
 25e:	88 bb       	out	0x18, r24	; 24
	if (dig == 2) PORTB |= 0b00001000;
 260:	62 30       	cpi	r22, 0x02	; 2
 262:	09 f4       	brne	.+2      	; 0x266 <setNumber+0x20>
 264:	c3 9a       	sbi	0x18, 3	; 24
	PORTD &= digit[dig];
 266:	92 b3       	in	r25, 0x12	; 18
 268:	e6 2f       	mov	r30, r22
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ea 59       	subi	r30, 0x9A	; 154
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 81       	ld	r24, Z
 272:	89 23       	and	r24, r25
 274:	82 bb       	out	0x12, r24	; 18
 276:	08 95       	ret

00000278 <__vector_3>:

ISR (TIMER1_COMPA_vect){
	timer1_millis++;
}

ISR(TIMER2_COMP_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	counterDigit &= 0b00000011;
 29a:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <counterDigit>
 29e:	83 70       	andi	r24, 0x03	; 3
 2a0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <counterDigit>
	temp += 1;
 2a4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	if (!counterDigit){
 2ae:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <counterDigit>
 2b2:	81 11       	cpse	r24, r1
 2b4:	13 c0       	rjmp	.+38     	; 0x2dc <__vector_3+0x64>
		if (heatStatus == HEAT_ON && mode == MODE_NORMAL){
 2b6:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <heatStatus>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	79 f4       	brne	.+30     	; 0x2dc <__vector_3+0x64>
 2be:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <mode>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	59 f4       	brne	.+22     	; 0x2dc <__vector_3+0x64>
			if (temp & 0b10000000) temperature[0] = DEFIS_HEAT;
 2c6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 2ca:	88 23       	and	r24, r24
 2cc:	24 f4       	brge	.+8      	; 0x2d6 <__vector_3+0x5e>
 2ce:	8b e0       	ldi	r24, 0x0B	; 11
 2d0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <temperature>
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <__vector_3+0x64>
			else temperature[0] = CLEAR;
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <temperature>
		}
	}
	setNumber(temperature[counterDigit], counterDigit);
 2dc:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <counterDigit>
 2e0:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <counterDigit>
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e2 56       	subi	r30, 0x62	; 98
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	80 81       	ld	r24, Z
 2ec:	ac df       	rcall	.-168    	; 0x246 <setNumber>
	counterDigit += 1;
 2ee:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <counterDigit>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <counterDigit>
}
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <convertTempToDigit>:
	PORTB = number[num];
	if (dig == 2) PORTB |= 0b00001000;
	PORTD &= digit[dig];
}

void convertTempToDigit(uint16_t t, uint8_t mode){
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	fc 01       	movw	r30, r24
 326:	f6 2e       	mov	r15, r22
	uint16_t temp, d1, d2, d3, d4;
	temp = t;
	d4 = temp/1000;
 328:	9c 01       	movw	r18, r24
 32a:	36 95       	lsr	r19
 32c:	27 95       	ror	r18
 32e:	36 95       	lsr	r19
 330:	27 95       	ror	r18
 332:	36 95       	lsr	r19
 334:	27 95       	ror	r18
 336:	a5 ec       	ldi	r26, 0xC5	; 197
 338:	b0 e2       	ldi	r27, 0x20	; 32
 33a:	e0 d0       	rcall	.+448    	; 0x4fc <__umulhisi3>
 33c:	ec 01       	movw	r28, r24
 33e:	d2 95       	swap	r29
 340:	c2 95       	swap	r28
 342:	cf 70       	andi	r28, 0x0F	; 15
 344:	cd 27       	eor	r28, r29
 346:	df 70       	andi	r29, 0x0F	; 15
 348:	cd 27       	eor	r28, r29
	temp = temp - d4*1000;
 34a:	28 ee       	ldi	r18, 0xE8	; 232
 34c:	33 e0       	ldi	r19, 0x03	; 3
 34e:	c2 9f       	mul	r28, r18
 350:	c0 01       	movw	r24, r0
 352:	c3 9f       	mul	r28, r19
 354:	90 0d       	add	r25, r0
 356:	d2 9f       	mul	r29, r18
 358:	90 0d       	add	r25, r0
 35a:	11 24       	eor	r1, r1
 35c:	af 01       	movw	r20, r30
 35e:	48 1b       	sub	r20, r24
 360:	59 0b       	sbc	r21, r25
	if (t & 0x8000) d4 = 11;
 362:	ff 23       	and	r31, r31
 364:	14 f4       	brge	.+4      	; 0x36a <convertTempToDigit+0x50>
 366:	cb e0       	ldi	r28, 0x0B	; 11
 368:	d0 e0       	ldi	r29, 0x00	; 0
	d3 = temp/100;
 36a:	9a 01       	movw	r18, r20
 36c:	36 95       	lsr	r19
 36e:	27 95       	ror	r18
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	ab e7       	ldi	r26, 0x7B	; 123
 376:	b4 e1       	ldi	r27, 0x14	; 20
 378:	c1 d0       	rcall	.+386    	; 0x4fc <__umulhisi3>
 37a:	8c 01       	movw	r16, r24
 37c:	16 95       	lsr	r17
 37e:	07 95       	ror	r16
	temp = temp - d3*100;
 380:	24 e6       	ldi	r18, 0x64	; 100
 382:	20 9f       	mul	r18, r16
 384:	c0 01       	movw	r24, r0
 386:	21 9f       	mul	r18, r17
 388:	90 0d       	add	r25, r0
 38a:	11 24       	eor	r1, r1
 38c:	48 1b       	sub	r20, r24
 38e:	59 0b       	sbc	r21, r25
	d2 = temp/10;
 390:	9a 01       	movw	r18, r20
 392:	ad ec       	ldi	r26, 0xCD	; 205
 394:	bc ec       	ldi	r27, 0xCC	; 204
 396:	b2 d0       	rcall	.+356    	; 0x4fc <__umulhisi3>
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
	d1 = temp - d2*10;
 3a4:	bc 01       	movw	r22, r24
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	9c 01       	movw	r18, r24
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	26 0f       	add	r18, r22
 3ba:	37 1f       	adc	r19, r23
 3bc:	42 1b       	sub	r20, r18
 3be:	53 0b       	sbc	r21, r19
	switch (mode){
 3c0:	22 e0       	ldi	r18, 0x02	; 2
 3c2:	f2 16       	cp	r15, r18
 3c4:	39 f0       	breq	.+14     	; 0x3d4 <convertTempToDigit+0xba>
 3c6:	23 e0       	ldi	r18, 0x03	; 3
 3c8:	f2 16       	cp	r15, r18
 3ca:	91 f0       	breq	.+36     	; 0x3f0 <convertTempToDigit+0xd6>
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	f2 12       	cpse	r15, r18
 3d0:	16 c0       	rjmp	.+44     	; 0x3fe <convertTempToDigit+0xe4>
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <convertTempToDigit+0xc0>
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
 3d4:	cd e0       	ldi	r28, 0x0D	; 13
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
 3d8:	12 c0       	rjmp	.+36     	; 0x3fe <convertTempToDigit+0xe4>
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
 3da:	01 15       	cp	r16, r1
 3dc:	11 05       	cpc	r17, r1
 3de:	19 f4       	brne	.+6      	; 0x3e6 <convertTempToDigit+0xcc>
 3e0:	20 97       	sbiw	r28, 0x00	; 0
 3e2:	49 f0       	breq	.+18     	; 0x3f6 <convertTempToDigit+0xdc>
 3e4:	0c c0       	rjmp	.+24     	; 0x3fe <convertTempToDigit+0xe4>
			if (d4 == 0) d4 = CLEAR;
 3e6:	20 97       	sbiw	r28, 0x00	; 0
 3e8:	51 f4       	brne	.+20     	; 0x3fe <convertTempToDigit+0xe4>
 3ea:	ca e0       	ldi	r28, 0x0A	; 10
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <convertTempToDigit+0xe4>
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
			break;
		case MODE_LOW:
			d4 = DEFIS_DOWN;
 3f0:	ce e0       	ldi	r28, 0x0E	; 14
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <convertTempToDigit+0xe4>
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
 3f6:	ca e0       	ldi	r28, 0x0A	; 10
 3f8:	d0 e0       	ldi	r29, 0x00	; 0
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
 3fa:	0a e0       	ldi	r16, 0x0A	; 10
 3fc:	10 e0       	ldi	r17, 0x00	; 0
			d4 = DEFIS_DOWN;
			break;
		default:
			break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3fe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 400:	f8 94       	cli
		temperature[0] = (uint8_t)d4;
 402:	ee e9       	ldi	r30, 0x9E	; 158
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	c0 83       	st	Z, r28
		temperature[1] = (uint8_t)d3;
 408:	01 83       	std	Z+1, r16	; 0x01
		temperature[2] = (uint8_t)d2;
 40a:	82 83       	std	Z+2, r24	; 0x02
		temperature[3] = (uint8_t)d1;
 40c:	43 83       	std	Z+3, r20	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 40e:	9f bf       	out	0x3f, r25	; 63
	}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	ff 90       	pop	r15
 41a:	08 95       	ret

0000041c <main>:
// }


int main(void)
{
	if (MCUCSR & (1 << WDRF)){
 41c:	04 b6       	in	r0, 0x34	; 52
 41e:	03 fe       	sbrs	r0, 3
 420:	07 c0       	rjmp	.+14     	; 0x430 <main+0x14>
		MCUCSR &= ~(1 << WDRF);
 422:	84 b7       	in	r24, 0x34	; 52
 424:	87 7f       	andi	r24, 0xF7	; 247
 426:	84 bf       	out	0x34, r24	; 52
		disableWDT();
 428:	55 de       	rcall	.-854    	; 0xd4 <disableWDT>
		err = ERROR_WDT;
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <err>
		
// 	#ifndef OW_ONE_BUS
// 		ow_set_bus(&PIND,&PORTD,&DDRD,PORTD7);
// 	#endif
// 		
 	sei();
 430:	78 94       	sei
// 		if ( nSensors > 0 ) {
// 			eeprom_test();
// 		}
// 	#endif	
				
	initDisplay();
 432:	88 de       	rcall	.-752    	; 0x144 <initDisplay>
	initTimer2();
 434:	9e de       	rcall	.-708    	; 0x172 <initTimer2>
	initTimer1();
 436:	8d de       	rcall	.-742    	; 0x152 <initTimer1>
	initButton();
 438:	7e de       	rcall	.-772    	; 0x136 <initButton>
	mode = MODE_NORMAL;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	89 e6       	ldi	r24, 0x69	; 105
 444:	98 e1       	ldi	r25, 0x18	; 24
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <main+0x2a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <main+0x34>
 450:	00 00       	nop
	_delay_ms(1000);
	initWDT();
 452:	35 de       	rcall	.-918    	; 0xbe <initWDT>
		
    while (1) {	
 		handleError(err);	
 		getButtonState(BUTTON1);	
 		if (buttonStateON[BUTTON1]){
 454:	c9 e8       	ldi	r28, 0x89	; 137
 456:	d0 e0       	ldi	r29, 0x00	; 0
 			buttonStateON[BUTTON1] = 0;
 			mode += 1;
 			if (mode == 4) mode = MODE_NORMAL;
 458:	11 e0       	ldi	r17, 0x01	; 1
	mode = MODE_NORMAL;
	_delay_ms(1000);
	initWDT();
		
    while (1) {	
 		handleError(err);	
 45a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <err>
 45e:	42 de       	rcall	.-892    	; 0xe4 <handleError>
 		getButtonState(BUTTON1);	
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	95 de       	rcall	.-726    	; 0x18e <getButtonState>
 		if (buttonStateON[BUTTON1]){
 464:	88 81       	ld	r24, Y
 466:	88 23       	and	r24, r24
 468:	61 f0       	breq	.+24     	; 0x482 <__stack+0x23>
 			buttonStateON[BUTTON1] = 0;
 46a:	18 82       	st	Y, r1
 			mode += 1;
 46c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <mode>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <mode>
 			if (mode == 4) mode = MODE_NORMAL;
 476:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <mode>
 47a:	84 30       	cpi	r24, 0x04	; 4
 47c:	11 f4       	brne	.+4      	; 0x482 <__stack+0x23>
 47e:	10 93 9c 00 	sts	0x009C, r17	; 0x80009c <mode>
 		}
 		wdt_reset();
 482:	a8 95       	wdr
 		switch (mode){
 484:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <mode>
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	51 f1       	breq	.+84     	; 0x4e0 <__stack+0x81>
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	79 f1       	breq	.+94     	; 0x4ee <__stack+0x8f>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	19 f7       	brne	.-58     	; 0x45a <main+0x3e>
 		case MODE_NORMAL:
			if (millis() - milliseconds_since > 999){
 494:	09 de       	rcall	.-1006   	; 0xa8 <millis>
 496:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <milliseconds_since>
 49a:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <milliseconds_since+0x1>
 49e:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <milliseconds_since+0x2>
 4a2:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <milliseconds_since+0x3>
 4a6:	dc 01       	movw	r26, r24
 4a8:	cb 01       	movw	r24, r22
 4aa:	8c 19       	sub	r24, r12
 4ac:	9d 09       	sbc	r25, r13
 4ae:	ae 09       	sbc	r26, r14
 4b0:	bf 09       	sbc	r27, r15
 4b2:	88 3e       	cpi	r24, 0xE8	; 232
 4b4:	93 40       	sbci	r25, 0x03	; 3
 4b6:	a1 05       	cpc	r26, r1
 4b8:	b1 05       	cpc	r27, r1
 4ba:	78 f0       	brcs	.+30     	; 0x4da <__stack+0x7b>
				milliseconds_since = millis();
 4bc:	f5 dd       	rcall	.-1046   	; 0xa8 <millis>
 4be:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <milliseconds_since>
 4c2:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <milliseconds_since+0x1>
 4c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <milliseconds_since+0x2>
 4ca:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <milliseconds_since+0x3>
/*				readTempForOnlyDS18b20();*/
 				convertTempToDigit(decicelsius, mode);
 4ce:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <mode>
 4d2:	86 ee       	ldi	r24, 0xE6	; 230
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	21 df       	rcall	.-446    	; 0x31a <convertTempToDigit>
 				wdt_reset();
 4d8:	a8 95       	wdr
 			}
			if (decicelsius > ALARM_HEAT){
				err = ERROR_TEMP_OVERHEAT;
			}
			if (decicelsius < limitLow){ //heat on
				heatStatus = HEAT_ON;
 4da:	10 93 9b 00 	sts	0x009B, r17	; 0x80009b <heatStatus>
 4de:	bd cf       	rjmp	.-134    	; 0x45a <main+0x3e>
			if (decicelsius > limitLow && decicelsius < limitHigh){ //cool on
				
			}
 			break;		
 		case MODE_HIGH:
 			convertTempToDigit(limitHigh, mode);
 4e0:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <mode>
 4e4:	84 e0       	ldi	r24, 0x04	; 4
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	18 df       	rcall	.-464    	; 0x31a <convertTempToDigit>
 			wdt_reset();
 4ea:	a8 95       	wdr
 			break;		
 4ec:	b6 cf       	rjmp	.-148    	; 0x45a <main+0x3e>
 		case MODE_LOW:
 			convertTempToDigit(limitLow, mode);
 4ee:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <mode>
 4f2:	8a ef       	ldi	r24, 0xFA	; 250
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	11 df       	rcall	.-478    	; 0x31a <convertTempToDigit>
 			wdt_reset();
 4f8:	a8 95       	wdr
 			break;	
 4fa:	af cf       	rjmp	.-162    	; 0x45a <main+0x3e>

000004fc <__umulhisi3>:
 4fc:	a2 9f       	mul	r26, r18
 4fe:	b0 01       	movw	r22, r0
 500:	b3 9f       	mul	r27, r19
 502:	c0 01       	movw	r24, r0
 504:	a3 9f       	mul	r26, r19
 506:	01 d0       	rcall	.+2      	; 0x50a <__umulhisi3+0xe>
 508:	b2 9f       	mul	r27, r18
 50a:	70 0d       	add	r23, r0
 50c:	81 1d       	adc	r24, r1
 50e:	11 24       	eor	r1, r1
 510:	91 1d       	adc	r25, r1
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
