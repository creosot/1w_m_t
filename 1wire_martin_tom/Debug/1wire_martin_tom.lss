
1wire_martin_tom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000b88  00000c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080007e  0080007e  00000c3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000214c  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cff  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f5  00000000  00000000  00003cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c4  00000000  00000000  00004fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000872  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000201a  00000000  00000000  00005de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	19 c4       	rjmp	.+2098   	; 0x83a <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	da c2       	rjmp	.+1460   	; 0x5c2 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e8       	ldi	r30, 0x88	; 136
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 37       	cpi	r26, 0x7E	; 126
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ae e7       	ldi	r26, 0x7E	; 126
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3b       	cpi	r26, 0xB3	; 179
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c2 d4       	rcall	.+2436   	; 0x9de <main>
  5a:	94 c5       	rjmp	.+2856   	; 0xb84 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
  5e:	61 15       	cp	r22, r1
  60:	71 05       	cpc	r23, r1
  62:	b1 f0       	breq	.+44     	; 0x90 <crc8+0x32>
  64:	fc 01       	movw	r30, r24
  66:	68 0f       	add	r22, r24
  68:	79 1f       	adc	r23, r25
  6a:	80 e0       	ldi	r24, 0x00	; 0
	{
		b = data[loop_count];
  6c:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
  6e:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
  70:	21 91       	ld	r18, Z+
  72:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
  74:	32 2f       	mov	r19, r18
  76:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
  78:	30 ff       	sbrs	r19, 0
  7a:	0c c0       	rjmp	.+24     	; 0x94 <crc8+0x36>
				crc = crc ^ CRC8POLY;
  7c:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
  7e:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
  80:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
  82:	26 95       	lsr	r18
  84:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
  86:	b1 f7       	brne	.-20     	; 0x74 <crc8+0x16>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
  88:	e6 17       	cp	r30, r22
  8a:	f7 07       	cpc	r31, r23
  8c:	89 f7       	brne	.-30     	; 0x70 <crc8+0x12>
  8e:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
  94:	86 95       	lsr	r24
  96:	f5 cf       	rjmp	.-22     	; 0x82 <crc8+0x24>

00000098 <DS18X20_raw_to_decicelsius>:
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
	if ( ret == DS18X20_OK ) {
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
	}
	return ret;
}
  98:	fb 01       	movw	r30, r22
  9a:	41 81       	ldd	r20, Z+1	; 0x01
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	54 2f       	mov	r21, r20
  a0:	44 27       	eor	r20, r20
  a2:	90 81       	ld	r25, Z
  a4:	49 2b       	or	r20, r25
  a6:	9a 01       	movw	r18, r20
  a8:	80 31       	cpi	r24, 0x10	; 16
  aa:	91 f4       	brne	.+36     	; 0xd0 <DS18X20_raw_to_decicelsius+0x38>
  ac:	4e 7f       	andi	r20, 0xFE	; 254
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	96 81       	ldd	r25, Z+6	; 0x06
  bc:	2c e0       	ldi	r18, 0x0C	; 12
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	29 1b       	sub	r18, r25
  c2:	31 09       	sbc	r19, r1
  c4:	24 0f       	add	r18, r20
  c6:	35 1f       	adc	r19, r21
  c8:	33 23       	and	r19, r19
  ca:	0c f0       	brlt	.+2      	; 0xce <DS18X20_raw_to_decicelsius+0x36>
  cc:	5b c0       	rjmp	.+182    	; 0x184 <DS18X20_raw_to_decicelsius+0xec>
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DS18X20_raw_to_decicelsius+0x3c>
  d0:	55 23       	and	r21, r21
  d2:	2c f4       	brge	.+10     	; 0xde <DS18X20_raw_to_decicelsius+0x46>
  d4:	31 95       	neg	r19
  d6:	21 95       	neg	r18
  d8:	31 09       	sbc	r19, r1
  da:	a1 e0       	ldi	r26, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <DS18X20_raw_to_decicelsius+0x48>
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	88 32       	cpi	r24, 0x28	; 40
  e2:	11 f0       	breq	.+4      	; 0xe8 <DS18X20_raw_to_decicelsius+0x50>
  e4:	82 32       	cpi	r24, 0x22	; 34
  e6:	69 f4       	brne	.+26     	; 0x102 <DS18X20_raw_to_decicelsius+0x6a>
  e8:	84 81       	ldd	r24, Z+4	; 0x04
  ea:	80 76       	andi	r24, 0x60	; 96
  ec:	80 32       	cpi	r24, 0x20	; 32
  ee:	31 f0       	breq	.+12     	; 0xfc <DS18X20_raw_to_decicelsius+0x64>
  f0:	80 34       	cpi	r24, 0x40	; 64
  f2:	31 f0       	breq	.+12     	; 0x100 <DS18X20_raw_to_decicelsius+0x68>
  f4:	81 11       	cpse	r24, r1
  f6:	05 c0       	rjmp	.+10     	; 0x102 <DS18X20_raw_to_decicelsius+0x6a>
  f8:	28 7f       	andi	r18, 0xF8	; 248
  fa:	03 c0       	rjmp	.+6      	; 0x102 <DS18X20_raw_to_decicelsius+0x6a>
  fc:	2c 7f       	andi	r18, 0xFC	; 252
  fe:	01 c0       	rjmp	.+2      	; 0x102 <DS18X20_raw_to_decicelsius+0x6a>
 100:	2e 7f       	andi	r18, 0xFE	; 254
 102:	a9 01       	movw	r20, r18
 104:	52 95       	swap	r21
 106:	42 95       	swap	r20
 108:	4f 70       	andi	r20, 0x0F	; 15
 10a:	45 27       	eor	r20, r21
 10c:	5f 70       	andi	r21, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	ba 01       	movw	r22, r20
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	44 0f       	add	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	64 0f       	add	r22, r20
 124:	75 1f       	adc	r23, r21
 126:	2f 70       	andi	r18, 0x0F	; 15
 128:	33 27       	eor	r19, r19
 12a:	c9 01       	movw	r24, r18
 12c:	96 95       	lsr	r25
 12e:	98 2f       	mov	r25, r24
 130:	88 27       	eor	r24, r24
 132:	97 95       	ror	r25
 134:	87 95       	ror	r24
 136:	32 2f       	mov	r19, r18
 138:	22 27       	eor	r18, r18
 13a:	33 0f       	add	r19, r19
 13c:	82 0f       	add	r24, r18
 13e:	93 1f       	adc	r25, r19
 140:	a1 11       	cpse	r26, r1
 142:	15 c0       	rjmp	.+42     	; 0x16e <DS18X20_raw_to_decicelsius+0xd6>
 144:	ac 01       	movw	r20, r24
 146:	5e 5f       	subi	r21, 0xFE	; 254
 148:	45 2f       	mov	r20, r21
 14a:	55 27       	eor	r21, r21
 14c:	46 95       	lsr	r20
 14e:	46 95       	lsr	r20
 150:	9b 01       	movw	r18, r22
 152:	24 0f       	add	r18, r20
 154:	35 1f       	adc	r19, r21
 156:	c9 01       	movw	r24, r18
 158:	8a 5d       	subi	r24, 0xDA	; 218
 15a:	9d 4f       	sbci	r25, 0xFD	; 253
 15c:	89 30       	cpi	r24, 0x09	; 9
 15e:	97 40       	sbci	r25, 0x07	; 7
 160:	18 f4       	brcc	.+6      	; 0x168 <DS18X20_raw_to_decicelsius+0xd0>
 162:	82 2f       	mov	r24, r18
 164:	93 2f       	mov	r25, r19
 166:	08 95       	ret
 168:	80 ed       	ldi	r24, 0xD0	; 208
 16a:	97 e0       	ldi	r25, 0x07	; 7
 16c:	08 95       	ret
 16e:	89 2f       	mov	r24, r25
 170:	99 27       	eor	r25, r25
 172:	86 95       	lsr	r24
 174:	86 95       	lsr	r24
 176:	9b 01       	movw	r18, r22
 178:	28 0f       	add	r18, r24
 17a:	39 1f       	adc	r19, r25
 17c:	31 95       	neg	r19
 17e:	21 95       	neg	r18
 180:	31 09       	sbc	r19, r1
 182:	e9 cf       	rjmp	.-46     	; 0x156 <DS18X20_raw_to_decicelsius+0xbe>
 184:	f9 01       	movw	r30, r18
 186:	f2 95       	swap	r31
 188:	e2 95       	swap	r30
 18a:	ef 70       	andi	r30, 0x0F	; 15
 18c:	ef 27       	eor	r30, r31
 18e:	ff 70       	andi	r31, 0x0F	; 15
 190:	ef 27       	eor	r30, r31
 192:	bf 01       	movw	r22, r30
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	6e 0f       	add	r22, r30
 1a6:	7f 1f       	adc	r23, r31
 1a8:	a9 01       	movw	r20, r18
 1aa:	4f 70       	andi	r20, 0x0F	; 15
 1ac:	55 27       	eor	r21, r21
 1ae:	ca 01       	movw	r24, r20
 1b0:	96 95       	lsr	r25
 1b2:	98 2f       	mov	r25, r24
 1b4:	88 27       	eor	r24, r24
 1b6:	97 95       	ror	r25
 1b8:	87 95       	ror	r24
 1ba:	54 2f       	mov	r21, r20
 1bc:	44 27       	eor	r20, r20
 1be:	55 0f       	add	r21, r21
 1c0:	84 0f       	add	r24, r20
 1c2:	95 1f       	adc	r25, r21
 1c4:	bf cf       	rjmp	.-130    	; 0x144 <DS18X20_raw_to_decicelsius+0xac>

000001c6 <read_scratchpad>:
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	7b 01       	movw	r14, r22
 1d4:	04 2f       	mov	r16, r20
 1d6:	bc 01       	movw	r22, r24
 1d8:	8e eb       	ldi	r24, 0xBE	; 190
 1da:	ed d1       	rcall	.+986    	; 0x5b6 <ow_command>
 1dc:	00 23       	and	r16, r16
 1de:	61 f0       	breq	.+24     	; 0x1f8 <read_scratchpad+0x32>
 1e0:	e7 01       	movw	r28, r14
 1e2:	01 50       	subi	r16, 0x01	; 1
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	0f 5f       	subi	r16, 0xFF	; 255
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ea:	0e 0d       	add	r16, r14
 1ec:	1f 1d       	adc	r17, r15
 1ee:	8c d1       	rcall	.+792    	; 0x508 <ow_byte_rd>
 1f0:	89 93       	st	Y+, r24
 1f2:	c0 17       	cp	r28, r16
 1f4:	d1 07       	cpc	r29, r17
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <read_scratchpad+0x28>
 1f8:	69 e0       	ldi	r22, 0x09	; 9
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	c7 01       	movw	r24, r14
 1fe:	2f df       	rcall	.-418    	; 0x5e <crc8>
 200:	81 11       	cpse	r24, r1
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	08 95       	ret

00000212 <DS18X20_find_sensor>:
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	8b 01       	movw	r16, r22
 21e:	b8 01       	movw	r22, r16
 220:	88 81       	ld	r24, Y
 222:	75 d1       	rcall	.+746    	; 0x50e <ow_rom_search>
 224:	88 83       	st	Y, r24
 226:	81 50       	subi	r24, 0x01	; 1
 228:	8d 3f       	cpi	r24, 0xFD	; 253
 22a:	50 f4       	brcc	.+20     	; 0x240 <DS18X20_find_sensor+0x2e>
 22c:	f8 01       	movw	r30, r16
 22e:	90 81       	ld	r25, Z
 230:	98 32       	cpi	r25, 0x28	; 40
 232:	41 f0       	breq	.+16     	; 0x244 <DS18X20_find_sensor+0x32>
 234:	90 31       	cpi	r25, 0x10	; 16
 236:	41 f0       	breq	.+16     	; 0x248 <DS18X20_find_sensor+0x36>
 238:	92 32       	cpi	r25, 0x22	; 34
 23a:	89 f7       	brne	.-30     	; 0x21e <DS18X20_find_sensor+0xc>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	05 c0       	rjmp	.+10     	; 0x24a <DS18X20_find_sensor+0x38>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	03 c0       	rjmp	.+6      	; 0x24a <DS18X20_find_sensor+0x38>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	01 c0       	rjmp	.+2      	; 0x24a <DS18X20_find_sensor+0x38>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <DS18X20_start_meas>:
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
 25c:	8b 01       	movw	r16, r22
 25e:	a4 d0       	rcall	.+328    	; 0x3a8 <ow_reset>
 260:	43 d0       	rcall	.+134    	; 0x2e8 <ow_input_pin_state>
 262:	88 23       	and	r24, r24
 264:	61 f0       	breq	.+24     	; 0x27e <DS18X20_start_meas+0x2a>
 266:	c1 30       	cpi	r28, 0x01	; 1
 268:	29 f0       	breq	.+10     	; 0x274 <DS18X20_start_meas+0x20>
 26a:	b8 01       	movw	r22, r16
 26c:	84 e4       	ldi	r24, 0x44	; 68
 26e:	a6 d1       	rcall	.+844    	; 0x5bc <ow_command_with_parasite_enable>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	06 c0       	rjmp	.+12     	; 0x280 <DS18X20_start_meas+0x2c>
 274:	b8 01       	movw	r22, r16
 276:	84 e4       	ldi	r24, 0x44	; 68
 278:	9e d1       	rcall	.+828    	; 0x5b6 <ow_command>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	01 c0       	rjmp	.+2      	; 0x280 <DS18X20_start_meas+0x2c>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	29 97       	sbiw	r28, 0x09	; 9
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	08 2f       	mov	r16, r24
 2a6:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
 2a8:	49 e0       	ldi	r20, 0x09	; 9
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	88 df       	rcall	.-240    	; 0x1c6 <read_scratchpad>
 2b6:	18 2f       	mov	r17, r24
	if ( ret == DS18X20_OK ) {
 2b8:	81 11       	cpse	r24, r1
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <DS18X20_read_decicelsius_single+0x44>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
 2bc:	be 01       	movw	r22, r28
 2be:	6f 5f       	subi	r22, 0xFF	; 255
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	80 2f       	mov	r24, r16
 2c4:	e9 de       	rcall	.-558    	; 0x98 <DS18X20_raw_to_decicelsius>
 2c6:	f7 01       	movw	r30, r14
 2c8:	91 83       	std	Z+1, r25	; 0x01
 2ca:	80 83       	st	Z, r24
	}
	return ret;
}
 2cc:	81 2f       	mov	r24, r17
 2ce:	29 96       	adiw	r28, 0x09	; 9
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	08 95       	ret

000002e8 <ow_input_pin_state>:

void ow_parasite_disable(void)
{
	OW_DIR_IN();
#if (!OW_USE_INTERNAL_PULLUP)
	OW_OUT_LOW();
 2e8:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <OW_IN>
 2ec:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <OW_IN+0x1>
 2f0:	90 81       	ld	r25, Z
 2f2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 2f6:	89 23       	and	r24, r25
 2f8:	08 95       	ret

000002fa <ow_parasite_enable>:
 2fa:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <OW_OUT>
 2fe:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <OW_OUT+0x1>
 302:	90 81       	ld	r25, Z
 304:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 308:	89 2b       	or	r24, r25
 30a:	80 83       	st	Z, r24
 30c:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <OW_DDR>
 310:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <OW_DDR+0x1>
 314:	90 81       	ld	r25, Z
 316:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 31a:	89 2b       	or	r24, r25
 31c:	80 83       	st	Z, r24
 31e:	08 95       	ret

00000320 <ow_bit_io_intern>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	c8 2f       	mov	r28, r24
 326:	df b7       	in	r29, 0x3f	; 63
 328:	f8 94       	cli
 32a:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <OW_DDR>
 32e:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <OW_DDR+0x1>
 332:	90 81       	ld	r25, Z
 334:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 338:	89 2b       	or	r24, r25
 33a:	80 83       	st	Z, r24
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	8a 95       	dec	r24
 340:	f1 f7       	brne	.-4      	; 0x33e <ow_bit_io_intern+0x1e>
 342:	00 00       	nop
 344:	cc 23       	and	r28, r28
 346:	51 f0       	breq	.+20     	; 0x35c <ow_bit_io_intern+0x3c>
 348:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <OW_DDR>
 34c:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <OW_DDR+0x1>
 350:	20 81       	ld	r18, Z
 352:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 356:	90 95       	com	r25
 358:	92 23       	and	r25, r18
 35a:	90 83       	st	Z, r25
 35c:	80 e2       	ldi	r24, 0x20	; 32
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <ow_bit_io_intern+0x3e>
 362:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <OW_IN>
 366:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <OW_IN+0x1>
 36a:	20 81       	ld	r18, Z
 36c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 370:	92 23       	and	r25, r18
 372:	09 f4       	brne	.+2      	; 0x376 <ow_bit_io_intern+0x56>
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	85 e7       	ldi	r24, 0x75	; 117
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <ow_bit_io_intern+0x58>
 37c:	00 00       	nop
 37e:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <OW_DDR>
 382:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <OW_DDR+0x1>
 386:	20 81       	ld	r18, Z
 388:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 38c:	90 95       	com	r25
 38e:	92 23       	and	r25, r18
 390:	90 83       	st	Z, r25
 392:	61 11       	cpse	r22, r1
 394:	b2 df       	rcall	.-156    	; 0x2fa <ow_parasite_enable>
 396:	df bf       	out	0x3f, r29	; 63
 398:	8a e1       	ldi	r24, 0x1A	; 26
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <ow_bit_io_intern+0x7a>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <ow_bit_io_intern+0x80>
 3a0:	8c 2f       	mov	r24, r28
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
 3a8:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <OW_OUT>
 3ac:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <OW_OUT+0x1>
 3b0:	90 81       	ld	r25, Z
 3b2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 3b6:	80 95       	com	r24
 3b8:	89 23       	and	r24, r25
 3ba:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
 3bc:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <OW_DDR>
 3c0:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <OW_DDR+0x1>
 3c4:	90 81       	ld	r25, Z
 3c6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 3ca:	89 2b       	or	r24, r25
 3cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	8f eb       	ldi	r24, 0xBF	; 191
 3d0:	93 e0       	ldi	r25, 0x03	; 3
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <ow_reset+0x2a>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <ow_reset+0x30>
 3d8:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3da:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3dc:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
 3de:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <OW_DDR>
 3e2:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <OW_DDR+0x1>
 3e6:	90 81       	ld	r25, Z
 3e8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 3ec:	80 95       	com	r24
 3ee:	89 23       	and	r24, r25
 3f0:	80 83       	st	Z, r24
 3f2:	9a ea       	ldi	r25, 0xAA	; 170
 3f4:	9a 95       	dec	r25
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <ow_reset+0x4c>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <ow_reset+0x52>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
 3fa:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <OW_IN>
 3fe:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <OW_IN+0x1>
 402:	30 81       	ld	r19, Z
 404:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 408:	2f bf       	out	0x3f, r18	; 63
 40a:	ef e3       	ldi	r30, 0x3F	; 63
 40c:	f3 e0       	ldi	r31, 0x03	; 3
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
 416:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <OW_IN>
 41a:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <OW_IN+0x1>
 41e:	20 81       	ld	r18, Z
 420:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <OW_PIN_MASK>
 424:	92 23       	and	r25, r18
 426:	11 f0       	breq	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
 428:	83 23       	and	r24, r19
 42a:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
 42c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err; //err=0 -sensor got job
}
 42e:	08 95       	ret

00000430 <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
 430:	50 93 aa 00 	sts	0x00AA, r21	; 0x8000aa <OW_DDR+0x1>
 434:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <OW_DDR>
	OW_OUT=out;
 438:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <OW_OUT+0x1>
 43c:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <OW_OUT>
	OW_IN=in;
 440:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <OW_IN+0x1>
 444:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <OW_IN>
	OW_PIN_MASK = (1 << pin);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	01 c0       	rjmp	.+2      	; 0x44e <ow_set_bus+0x1e>
 44c:	88 0f       	add	r24, r24
 44e:	2a 95       	dec	r18
 450:	ea f7       	brpl	.-6      	; 0x44c <ow_set_bus+0x1c>
 452:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <OW_PIN_MASK>
	ow_reset();
 456:	a8 df       	rcall	.-176    	; 0x3a8 <ow_reset>
 458:	08 95       	ret

0000045a <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	81 70       	andi	r24, 0x01	; 1
 45e:	60 df       	rcall	.-320    	; 0x320 <ow_bit_io_intern>
}
 460:	08 95       	ret

00000462 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	c8 2f       	mov	r28, r24
 468:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
 46a:	8c 2f       	mov	r24, r28
 46c:	81 70       	andi	r24, 0x01	; 1
 46e:	f5 df       	rcall	.-22     	; 0x45a <ow_bit_io>
		b >>= 1;
 470:	c6 95       	lsr	r28
		if( j ) {
 472:	81 11       	cpse	r24, r1
			b |= 0x80;
 474:	c0 68       	ori	r28, 0x80	; 128
 476:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
 478:	c1 f7       	brne	.-16     	; 0x46a <ow_byte_wr+0x8>
	
	return b;
}
 47a:	8c 2f       	mov	r24, r28
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
 488:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
 48a:	d1 30       	cpi	r29, 0x01	; 1
 48c:	41 f0       	breq	.+16     	; 0x49e <ow_byte_wr_with_parasite_enable+0x1c>
			j = ow_bit_io_intern( b & 1, 0 );
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	8c 2f       	mov	r24, r28
 492:	81 70       	andi	r24, 0x01	; 1
 494:	45 df       	rcall	.-374    	; 0x320 <ow_bit_io_intern>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
		}
		b >>= 1;
 496:	c6 95       	lsr	r28
		if( j ) {
 498:	81 11       	cpse	r24, r1
 49a:	08 c0       	rjmp	.+16     	; 0x4ac <ow_byte_wr_with_parasite_enable+0x2a>
 49c:	08 c0       	rjmp	.+16     	; 0x4ae <ow_byte_wr_with_parasite_enable+0x2c>
	
	do {
		if ( i != 1 ) {
			j = ow_bit_io_intern( b & 1, 0 );
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	8c 2f       	mov	r24, r28
 4a2:	81 70       	andi	r24, 0x01	; 1
 4a4:	3d df       	rcall	.-390    	; 0x320 <ow_bit_io_intern>
		}
		b >>= 1;
 4a6:	c6 95       	lsr	r28
		if( j ) {
 4a8:	88 23       	and	r24, r24
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <ow_byte_wr_with_parasite_enable+0x30>
			b |= 0x80;
 4ac:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
 4ae:	d1 50       	subi	r29, 0x01	; 1
 4b0:	61 f7       	brne	.-40     	; 0x48a <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
 4b2:	8c 2f       	mov	r24, r28
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	e8 2e       	mov	r14, r24
 4c8:	eb 01       	movw	r28, r22
 4ca:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
 4cc:	6d df       	rcall	.-294    	; 0x3a8 <ow_reset>

	if( id ) {
 4ce:	20 97       	sbiw	r28, 0x00	; 0
 4d0:	59 f0       	breq	.+22     	; 0x4e8 <ow_command_intern+0x2e>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
 4d2:	85 e5       	ldi	r24, 0x55	; 85
 4d4:	c6 df       	rcall	.-116    	; 0x462 <ow_byte_wr>
 4d6:	8e 01       	movw	r16, r28
 4d8:	08 5f       	subi	r16, 0xF8	; 248
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
 4dc:	89 91       	ld	r24, Y+
 4de:	c1 df       	rcall	.-126    	; 0x462 <ow_byte_wr>
			id++;
		} while( --i );
 4e0:	c0 17       	cp	r28, r16
 4e2:	d1 07       	cpc	r29, r17
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <ow_command_intern+0x22>
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <ow_command_intern+0x32>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
 4e8:	8c ec       	ldi	r24, 0xCC	; 204
 4ea:	bb df       	rcall	.-138    	; 0x462 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
 4ec:	ff 20       	and	r15, r15
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <ow_command_intern+0x3c>
		ow_byte_wr_with_parasite_enable( command );
 4f0:	8e 2d       	mov	r24, r14
 4f2:	c7 df       	rcall	.-114    	; 0x482 <ow_byte_wr_with_parasite_enable>
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <ow_command_intern+0x40>
	} else {
		ow_byte_wr( command );
 4f6:	8e 2d       	mov	r24, r14
 4f8:	b4 df       	rcall	.-152    	; 0x462 <ow_byte_wr>
	}
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	08 95       	ret

00000508 <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
 508:	8f ef       	ldi	r24, 0xFF	; 255
 50a:	ab df       	rcall	.-170    	; 0x462 <ow_byte_wr>
}
 50c:	08 95       	ret

0000050e <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	d8 2e       	mov	r13, r24
 51e:	8b 01       	movw	r16, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
 520:	43 df       	rcall	.-378    	; 0x3a8 <ow_reset>
 522:	81 11       	cpse	r24, r1
 524:	28 c0       	rjmp	.+80     	; 0x576 <ow_rom_search+0x68>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
 526:	80 ef       	ldi	r24, 0xF0	; 240
 528:	9c df       	rcall	.-200    	; 0x462 <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
 52a:	e1 2c       	mov	r14, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
 52c:	c0 e4       	ldi	r28, 0x40	; 64
 52e:	0f 2e       	mov	r0, r31
 530:	f8 ef       	ldi	r31, 0xF8	; 248
 532:	ff 2e       	mov	r15, r31
 534:	f0 2d       	mov	r31, r0
 536:	fc 0e       	add	r15, r28
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	8f df       	rcall	.-226    	; 0x45a <ow_bit_io>
 53c:	d8 2f       	mov	r29, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	8c df       	rcall	.-232    	; 0x45a <ow_bit_io>
 542:	88 23       	and	r24, r24
 544:	19 f0       	breq	.+6      	; 0x54c <ow_rom_search+0x3e>
				if( b ) {               // 0b11
 546:	dd 23       	and	r29, r29
 548:	d1 f0       	breq	.+52     	; 0x57e <ow_rom_search+0x70>
 54a:	17 c0       	rjmp	.+46     	; 0x57a <ow_rom_search+0x6c>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
 54c:	d1 11       	cpse	r29, r1
 54e:	23 c0       	rjmp	.+70     	; 0x596 <ow_rom_search+0x88>
					if( diff > i || ((*id & 1) && diff != i) ) {
 550:	cd 15       	cp	r28, r13
 552:	e0 f0       	brcs	.+56     	; 0x58c <ow_rom_search+0x7e>
 554:	f8 01       	movw	r30, r16
 556:	80 81       	ld	r24, Z
 558:	80 ff       	sbrs	r24, 0
 55a:	11 c0       	rjmp	.+34     	; 0x57e <ow_rom_search+0x70>
 55c:	dc 12       	cpse	r13, r28
 55e:	19 c0       	rjmp	.+50     	; 0x592 <ow_rom_search+0x84>
 560:	0e c0       	rjmp	.+28     	; 0x57e <ow_rom_search+0x70>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
 562:	c1 50       	subi	r28, 0x01	; 1
			
		} while( --j );
 564:	cf 11       	cpse	r28, r15
 566:	e8 cf       	rjmp	.-48     	; 0x538 <ow_rom_search+0x2a>
		
		id++;                           // next byte
 568:	0f 5f       	subi	r16, 0xFF	; 255
 56a:	1f 4f       	sbci	r17, 0xFF	; 255
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
 56c:	cf 2d       	mov	r28, r15
			
		} while( --j );
		
		id++;                           // next byte
	
	} while( i );
 56e:	f1 10       	cpse	r15, r1
 570:	de cf       	rjmp	.-68     	; 0x52e <ow_rom_search+0x20>
 572:	8e 2d       	mov	r24, r14
 574:	18 c0       	rjmp	.+48     	; 0x5a6 <ow_rom_search+0x98>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	16 c0       	rjmp	.+44     	; 0x5a6 <ow_rom_search+0x98>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
 57a:	8e ef       	ldi	r24, 0xFE	; 254
 57c:	14 c0       	rjmp	.+40     	; 0x5a6 <ow_rom_search+0x98>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	6c df       	rcall	.-296    	; 0x45a <ow_bit_io>
			*id >>= 1;
 582:	f8 01       	movw	r30, r16
 584:	90 81       	ld	r25, Z
 586:	96 95       	lsr	r25
 588:	90 83       	st	Z, r25
 58a:	eb cf       	rjmp	.-42     	; 0x562 <ow_rom_search+0x54>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
 58c:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
 58e:	d1 e0       	ldi	r29, 0x01	; 1
 590:	02 c0       	rjmp	.+4      	; 0x596 <ow_rom_search+0x88>
						next_diff = i;  // next pass 0
 592:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
 594:	d1 e0       	ldi	r29, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
 596:	8d 2f       	mov	r24, r29
 598:	60 df       	rcall	.-320    	; 0x45a <ow_bit_io>
			*id >>= 1;
 59a:	f8 01       	movw	r30, r16
 59c:	90 81       	ld	r25, Z
 59e:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
 5a0:	90 68       	ori	r25, 0x80	; 128
 5a2:	90 83       	st	Z, r25
 5a4:	de cf       	rjmp	.-68     	; 0x562 <ow_rom_search+0x54>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	08 95       	ret

000005b6 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	80 df       	rcall	.-256    	; 0x4ba <ow_command_intern>
 5ba:	08 95       	ret

000005bc <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	7d df       	rcall	.-262    	; 0x4ba <ow_command_intern>
 5c0:	08 95       	ret

000005c2 <__vector_6>:
	DDRC &= ~((1 << PORTC2) | (1 << PORTC1) | (1 << PORTC0)); //INPUT PC0-BUT+; PC1-BUT-; PC2-BUT_M	
	PORTC |= (1 << PORTC2) | (1 << PORTC1) | (1 << PORTC0); //pull up
}

void initGenerator(){
	DDRC |= (1 << PORTC4); //output
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer1_millis>
 5d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer1_millis+0x1>
 5dc:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <timer1_millis+0x2>
 5e0:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <timer1_millis+0x3>
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	a1 1d       	adc	r26, r1
 5e8:	b1 1d       	adc	r27, r1
 5ea:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <timer1_millis>
 5ee:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <timer1_millis+0x1>
 5f2:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <timer1_millis+0x2>
 5f6:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <timer1_millis+0x3>
 5fa:	bf 91       	pop	r27
 5fc:	af 91       	pop	r26
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <readTempForOnlyDS18b20>:
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	ca e0       	ldi	r28, 0x0A	; 10
 616:	0b ea       	ldi	r16, 0xAB	; 171
 618:	10 e0       	ldi	r17, 0x00	; 0
 61a:	a8 95       	wdr
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	18 de       	rcall	.-976    	; 0x254 <DS18X20_start_meas>
 624:	d8 2f       	mov	r29, r24
 626:	2f e7       	ldi	r18, 0x7F	; 127
 628:	8f e4       	ldi	r24, 0x4F	; 79
 62a:	92 e1       	ldi	r25, 0x12	; 18
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <readTempForOnlyDS18b20+0x20>
 634:	00 c0       	rjmp	.+0      	; 0x636 <readTempForOnlyDS18b20+0x2a>
 636:	00 00       	nop
 638:	66 e6       	ldi	r22, 0x66	; 102
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	f8 01       	movw	r30, r16
 63e:	80 81       	ld	r24, Z
 640:	23 de       	rcall	.-954    	; 0x288 <DS18X20_read_decicelsius_single>
 642:	d1 11       	cpse	r29, r1
 644:	02 c0       	rjmp	.+4      	; 0x64a <readTempForOnlyDS18b20+0x3e>
 646:	88 23       	and	r24, r24
 648:	71 f0       	breq	.+28     	; 0x666 <readTempForOnlyDS18b20+0x5a>
 64a:	ff ef       	ldi	r31, 0xFF	; 255
 64c:	21 ee       	ldi	r18, 0xE1	; 225
 64e:	84 e0       	ldi	r24, 0x04	; 4
 650:	f1 50       	subi	r31, 0x01	; 1
 652:	20 40       	sbci	r18, 0x00	; 0
 654:	80 40       	sbci	r24, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <readTempForOnlyDS18b20+0x44>
 658:	00 c0       	rjmp	.+0      	; 0x65a <readTempForOnlyDS18b20+0x4e>
 65a:	00 00       	nop
 65c:	c1 50       	subi	r28, 0x01	; 1
 65e:	e9 f6       	brne	.-70     	; 0x61a <readTempForOnlyDS18b20+0xe>
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <err>
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	08 95       	ret

00000670 <millis>:
 670:	f8 94       	cli
 672:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <timer1_millis>
 676:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <timer1_millis+0x1>
 67a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <timer1_millis+0x2>
 67e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <timer1_millis+0x3>
 682:	78 94       	sei
 684:	08 95       	ret

00000686 <initWDT>:
 686:	8f e1       	ldi	r24, 0x1F	; 31
 688:	81 bd       	out	0x21, r24	; 33
 68a:	8f e0       	ldi	r24, 0x0F	; 15
 68c:	81 bd       	out	0x21, r24	; 33
 68e:	a8 95       	wdr
 690:	08 95       	ret

00000692 <disableWDT>:
 692:	a8 95       	wdr
 694:	81 b5       	in	r24, 0x21	; 33
 696:	88 61       	ori	r24, 0x18	; 24
 698:	81 bd       	out	0x21, r24	; 33
 69a:	11 bc       	out	0x21, r1	; 33
 69c:	08 95       	ret

0000069e <handleError>:
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	88 23       	and	r24, r24
 6aa:	e9 f0       	breq	.+58     	; 0x6e6 <handleError+0x48>
 6ac:	18 2f       	mov	r17, r24
 6ae:	c0 ea       	ldi	r28, 0xA0	; 160
 6b0:	d0 e0       	ldi	r29, 0x00	; 0
 6b2:	0f 2e       	mov	r0, r31
 6b4:	ff e0       	ldi	r31, 0x0F	; 15
 6b6:	ff 2e       	mov	r15, r31
 6b8:	f0 2d       	mov	r31, r0
 6ba:	00 e1       	ldi	r16, 0x10	; 16
 6bc:	95 98       	cbi	0x12, 5	; 18
 6be:	e9 df       	rcall	.-46     	; 0x692 <disableWDT>
 6c0:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <mode>
 6c4:	8f b7       	in	r24, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	f8 82       	st	Y, r15
 6ca:	09 83       	std	Y+1, r16	; 0x01
 6cc:	0a 83       	std	Y+2, r16	; 0x02
 6ce:	1b 83       	std	Y+3, r17	; 0x03
 6d0:	8f bf       	out	0x3f, r24	; 63
 6d2:	2f ef       	ldi	r18, 0xFF	; 255
 6d4:	83 ed       	ldi	r24, 0xD3	; 211
 6d6:	90 e3       	ldi	r25, 0x30	; 48
 6d8:	21 50       	subi	r18, 0x01	; 1
 6da:	80 40       	sbci	r24, 0x00	; 0
 6dc:	90 40       	sbci	r25, 0x00	; 0
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <handleError+0x3a>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <handleError+0x44>
 6e2:	00 00       	nop
 6e4:	eb cf       	rjmp	.-42     	; 0x6bc <handleError+0x1e>
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	08 95       	ret

000006f2 <initRele>:
 6f2:	95 98       	cbi	0x12, 5	; 18
 6f4:	8d 9a       	sbi	0x11, 5	; 17
 6f6:	08 95       	ret

000006f8 <initButton>:
 6f8:	84 b3       	in	r24, 0x14	; 20
 6fa:	88 7f       	andi	r24, 0xF8	; 248
 6fc:	84 bb       	out	0x14, r24	; 20
 6fe:	85 b3       	in	r24, 0x15	; 21
 700:	87 60       	ori	r24, 0x07	; 7
 702:	85 bb       	out	0x15, r24	; 21
 704:	08 95       	ret

00000706 <initDisplay>:
}

void initDisplay(){		//									   					     _A_
	DDRB |= 0b11111111; //PB0-B; PB1-E; PB2-D; PB3-DP; PB4-C; PB5-G; PB6-A; PB7-F  F|_G_|B
 706:	87 b3       	in	r24, 0x17	; 23
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0b00001111; //dig1-PD2; dig2-PD1; dig3-PD0; dig4-PD4				   E|_D_|C													  
 70c:	81 b3       	in	r24, 0x11	; 17
 70e:	8f 60       	ori	r24, 0x0F	; 15
 710:	81 bb       	out	0x11, r24	; 17
 712:	08 95       	ret

00000714 <initTimer1>:
}

void initTimer1(){
	TCNT1 = 0;
 714:	1d bc       	out	0x2d, r1	; 45
 716:	1c bc       	out	0x2c, r1	; 44
	OCR1AH = (uint8_t)(CTC_MATCH_OVERFLOW >> 8);
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
 71c:	88 ee       	ldi	r24, 0xE8	; 232
 71e:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0;
 720:	1f bc       	out	0x2f, r1	; 47
	TCCR1A |= (0 << WGM11) | (0 << WGM10); //mode CTC
 722:	8f b5       	in	r24, 0x2f	; 47
 724:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 << WGM13) | (1 << WGM12) |(0 << CS12) | (1 << CS11) | (0 << CS10); //mode CTC, clk/8
 726:	8e b5       	in	r24, 0x2e	; 46
 728:	8a 60       	ori	r24, 0x0A	; 10
 72a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
 72c:	89 b7       	in	r24, 0x39	; 57
 72e:	80 61       	ori	r24, 0x10	; 16
 730:	89 bf       	out	0x39, r24	; 57
 732:	08 95       	ret

00000734 <initTimer2>:
}

void initTimer2(){
	TCNT2 = 0;
 734:	14 bc       	out	0x24, r1	; 36
	OCR2 = 125; //4ms
 736:	8d e7       	ldi	r24, 0x7D	; 125
 738:	83 bd       	out	0x23, r24	; 35
	TCCR2 = 0;
 73a:	15 bc       	out	0x25, r1	; 37
	TCCR2 |= (1 << WGM21) | (0 << WGM20); //mode CTC
 73c:	85 b5       	in	r24, 0x25	; 37
 73e:	88 60       	ori	r24, 0x08	; 8
 740:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS22) | (1 << CS21) | (0 << CS20); //mode CTC, clk/256
 742:	85 b5       	in	r24, 0x25	; 37
 744:	86 60       	ori	r24, 0x06	; 6
 746:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2); //Output Compare A Match Interrupt Enable
 748:	89 b7       	in	r24, 0x39	; 57
 74a:	80 68       	ori	r24, 0x80	; 128
 74c:	89 bf       	out	0x39, r24	; 57
 74e:	08 95       	ret

00000750 <getButtonState>:
}

void getButtonState(uint8_t but){
 750:	cf 92       	push	r12
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
	uint8_t state = PINC & buttonMask[but];
 75e:	13 b3       	in	r17, 0x13	; 19
 760:	c8 2f       	mov	r28, r24
 762:	d0 e0       	ldi	r29, 0x00	; 0
 764:	fe 01       	movw	r30, r28
 766:	e0 5a       	subi	r30, 0xA0	; 160
 768:	ff 4f       	sbci	r31, 0xFF	; 255
 76a:	80 81       	ld	r24, Z
 76c:	18 23       	and	r17, r24
	if (state ^ buttonDebounceState[but]){
 76e:	fe 01       	movw	r30, r28
 770:	e6 56       	subi	r30, 0x66	; 102
 772:	ff 4f       	sbci	r31, 0xFF	; 255
 774:	80 81       	ld	r24, Z
 776:	81 17       	cp	r24, r17
 778:	81 f0       	breq	.+32     	; 0x79a <getButtonState+0x4a>
		buttonDebounceState[but] = state;
 77a:	fe 01       	movw	r30, r28
 77c:	e6 56       	subi	r30, 0x66	; 102
 77e:	ff 4f       	sbci	r31, 0xFF	; 255
 780:	10 83       	st	Z, r17
		lastDebounceTime[but] = millis();
 782:	76 df       	rcall	.-276    	; 0x670 <millis>
 784:	fe 01       	movw	r30, r28
 786:	ee 0f       	add	r30, r30
 788:	ff 1f       	adc	r31, r31
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	e2 57       	subi	r30, 0x72	; 114
 790:	ff 4f       	sbci	r31, 0xFF	; 255
 792:	60 83       	st	Z, r22
 794:	71 83       	std	Z+1, r23	; 0x01
 796:	82 83       	std	Z+2, r24	; 0x02
 798:	93 83       	std	Z+3, r25	; 0x03
	}
	if ((millis() - lastDebounceTime[but] > 39)){
 79a:	6a df       	rcall	.-300    	; 0x670 <millis>
 79c:	fe 01       	movw	r30, r28
 79e:	ee 0f       	add	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	e2 57       	subi	r30, 0x72	; 114
 7a8:	ff 4f       	sbci	r31, 0xFF	; 255
 7aa:	c0 80       	ld	r12, Z
 7ac:	d1 80       	ldd	r13, Z+1	; 0x01
 7ae:	e2 80       	ldd	r14, Z+2	; 0x02
 7b0:	f3 80       	ldd	r15, Z+3	; 0x03
 7b2:	dc 01       	movw	r26, r24
 7b4:	cb 01       	movw	r24, r22
 7b6:	8c 19       	sub	r24, r12
 7b8:	9d 09       	sbc	r25, r13
 7ba:	ae 09       	sbc	r26, r14
 7bc:	bf 09       	sbc	r27, r15
 7be:	88 97       	sbiw	r24, 0x28	; 40
 7c0:	a1 05       	cpc	r26, r1
 7c2:	b1 05       	cpc	r27, r1
 7c4:	c8 f0       	brcs	.+50     	; 0x7f8 <getButtonState+0xa8>
		if (state ^ buttonPrefState[but]){
 7c6:	fe 01       	movw	r30, r28
 7c8:	ed 59       	subi	r30, 0x9D	; 157
 7ca:	ff 4f       	sbci	r31, 0xFF	; 255
 7cc:	80 81       	ld	r24, Z
 7ce:	81 17       	cp	r24, r17
 7d0:	99 f0       	breq	.+38     	; 0x7f8 <getButtonState+0xa8>
			buttonPrefState[but] = state;
 7d2:	fe 01       	movw	r30, r28
 7d4:	ed 59       	subi	r30, 0x9D	; 157
 7d6:	ff 4f       	sbci	r31, 0xFF	; 255
 7d8:	10 83       	st	Z, r17
			buttonStateON[but] = (~state) & buttonMask[but];
 7da:	10 95       	com	r17
 7dc:	fe 01       	movw	r30, r28
 7de:	e0 5a       	subi	r30, 0xA0	; 160
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	80 81       	ld	r24, Z
 7e4:	fe 01       	movw	r30, r28
 7e6:	e5 57       	subi	r30, 0x75	; 117
 7e8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ea:	91 2f       	mov	r25, r17
 7ec:	98 23       	and	r25, r24
 7ee:	90 83       	st	Z, r25
			buttonStateOFF[but] = (~state) ^ buttonMask[but];
 7f0:	c8 57       	subi	r28, 0x78	; 120
 7f2:	df 4f       	sbci	r29, 0xFF	; 255
 7f4:	18 27       	eor	r17, r24
 7f6:	18 83       	st	Y, r17
		}
	}
}
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	ff 90       	pop	r15
 800:	ef 90       	pop	r14
 802:	df 90       	pop	r13
 804:	cf 90       	pop	r12
 806:	08 95       	ret

00000808 <setNumber>:

void setNumber(uint8_t num, uint8_t dig){
	if (num > MAXNUMBER-1 || dig>3) return;
 808:	81 31       	cpi	r24, 0x11	; 17
 80a:	b0 f4       	brcc	.+44     	; 0x838 <setNumber+0x30>
 80c:	64 30       	cpi	r22, 0x04	; 4
 80e:	a0 f4       	brcc	.+40     	; 0x838 <setNumber+0x30>
	PORTD |= 0b00001111;
 810:	92 b3       	in	r25, 0x12	; 18
 812:	9f 60       	ori	r25, 0x0F	; 15
 814:	92 bb       	out	0x12, r25	; 18
	PORTB = number[num];
 816:	e8 2f       	mov	r30, r24
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	e4 59       	subi	r30, 0x94	; 148
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	80 81       	ld	r24, Z
 820:	88 bb       	out	0x18, r24	; 24
	if (dig == 2) PORTB |= 0b00001000;
 822:	62 30       	cpi	r22, 0x02	; 2
 824:	09 f4       	brne	.+2      	; 0x828 <setNumber+0x20>
 826:	c3 9a       	sbi	0x18, 3	; 24
	PORTD &= digit[dig];
 828:	92 b3       	in	r25, 0x12	; 18
 82a:	e6 2f       	mov	r30, r22
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	e8 59       	subi	r30, 0x98	; 152
 830:	ff 4f       	sbci	r31, 0xFF	; 255
 832:	80 81       	ld	r24, Z
 834:	89 23       	and	r24, r25
 836:	82 bb       	out	0x12, r24	; 18
 838:	08 95       	ret

0000083a <__vector_3>:

ISR (TIMER1_COMPA_vect){
	timer1_millis++;
}

ISR(TIMER2_COMP_vect){
 83a:	1f 92       	push	r1
 83c:	0f 92       	push	r0
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	0f 92       	push	r0
 842:	11 24       	eor	r1, r1
 844:	2f 93       	push	r18
 846:	3f 93       	push	r19
 848:	4f 93       	push	r20
 84a:	5f 93       	push	r21
 84c:	6f 93       	push	r22
 84e:	7f 93       	push	r23
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	af 93       	push	r26
 856:	bf 93       	push	r27
 858:	ef 93       	push	r30
 85a:	ff 93       	push	r31
	counterDigit &= 0b00000011;
 85c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counterDigit>
 860:	83 70       	andi	r24, 0x03	; 3
 862:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <counterDigit>
	temp += 1;
 866:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 86a:	8f 5f       	subi	r24, 0xFF	; 255
 86c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
	if (!counterDigit){
 870:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counterDigit>
 874:	81 11       	cpse	r24, r1
 876:	13 c0       	rjmp	.+38     	; 0x89e <__vector_3+0x64>
		if (heatStatus == HEAT_ON && mode == MODE_NORMAL){
 878:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <heatStatus>
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	79 f4       	brne	.+30     	; 0x89e <__vector_3+0x64>
 880:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <mode>
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	59 f4       	brne	.+22     	; 0x89e <__vector_3+0x64>
			if (temp & 0b10000000) temperature[0] = DEFIS_HEAT;
 888:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 88c:	88 23       	and	r24, r24
 88e:	24 f4       	brge	.+8      	; 0x898 <__vector_3+0x5e>
 890:	8b e0       	ldi	r24, 0x0B	; 11
 892:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <temperature>
 896:	03 c0       	rjmp	.+6      	; 0x89e <__vector_3+0x64>
			else temperature[0] = CLEAR;
 898:	8a e0       	ldi	r24, 0x0A	; 10
 89a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <temperature>
		}
	}
	setNumber(temperature[counterDigit], counterDigit);
 89e:	60 91 9f 00 	lds	r22, 0x009F	; 0x80009f <counterDigit>
 8a2:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <counterDigit>
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	e0 56       	subi	r30, 0x60	; 96
 8aa:	ff 4f       	sbci	r31, 0xFF	; 255
 8ac:	80 81       	ld	r24, Z
 8ae:	ac df       	rcall	.-168    	; 0x808 <setNumber>
	counterDigit += 1;
 8b0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <counterDigit>
 8b4:	8f 5f       	subi	r24, 0xFF	; 255
 8b6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <counterDigit>
}
 8ba:	ff 91       	pop	r31
 8bc:	ef 91       	pop	r30
 8be:	bf 91       	pop	r27
 8c0:	af 91       	pop	r26
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	7f 91       	pop	r23
 8c8:	6f 91       	pop	r22
 8ca:	5f 91       	pop	r21
 8cc:	4f 91       	pop	r20
 8ce:	3f 91       	pop	r19
 8d0:	2f 91       	pop	r18
 8d2:	0f 90       	pop	r0
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	0f 90       	pop	r0
 8d8:	1f 90       	pop	r1
 8da:	18 95       	reti

000008dc <convertTempToDigit>:
	PORTB = number[num];
	if (dig == 2) PORTB |= 0b00001000;
	PORTD &= digit[dig];
}

void convertTempToDigit(uint16_t t, uint8_t mode){
 8dc:	ff 92       	push	r15
 8de:	0f 93       	push	r16
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	fc 01       	movw	r30, r24
 8e8:	f6 2e       	mov	r15, r22
	uint16_t temp, d1, d2, d3, d4;
	temp = t;
	d4 = temp/1000;
 8ea:	9c 01       	movw	r18, r24
 8ec:	36 95       	lsr	r19
 8ee:	27 95       	ror	r18
 8f0:	36 95       	lsr	r19
 8f2:	27 95       	ror	r18
 8f4:	36 95       	lsr	r19
 8f6:	27 95       	ror	r18
 8f8:	a5 ec       	ldi	r26, 0xC5	; 197
 8fa:	b0 e2       	ldi	r27, 0x20	; 32
 8fc:	37 d1       	rcall	.+622    	; 0xb6c <__umulhisi3>
 8fe:	ec 01       	movw	r28, r24
 900:	d2 95       	swap	r29
 902:	c2 95       	swap	r28
 904:	cf 70       	andi	r28, 0x0F	; 15
 906:	cd 27       	eor	r28, r29
 908:	df 70       	andi	r29, 0x0F	; 15
 90a:	cd 27       	eor	r28, r29
	temp = temp - d4*1000;
 90c:	28 ee       	ldi	r18, 0xE8	; 232
 90e:	33 e0       	ldi	r19, 0x03	; 3
 910:	c2 9f       	mul	r28, r18
 912:	c0 01       	movw	r24, r0
 914:	c3 9f       	mul	r28, r19
 916:	90 0d       	add	r25, r0
 918:	d2 9f       	mul	r29, r18
 91a:	90 0d       	add	r25, r0
 91c:	11 24       	eor	r1, r1
 91e:	af 01       	movw	r20, r30
 920:	48 1b       	sub	r20, r24
 922:	59 0b       	sbc	r21, r25
	if (t & 0x8000) d4 = 11;
 924:	ff 23       	and	r31, r31
 926:	14 f4       	brge	.+4      	; 0x92c <convertTempToDigit+0x50>
 928:	cb e0       	ldi	r28, 0x0B	; 11
 92a:	d0 e0       	ldi	r29, 0x00	; 0
	d3 = temp/100;
 92c:	9a 01       	movw	r18, r20
 92e:	36 95       	lsr	r19
 930:	27 95       	ror	r18
 932:	36 95       	lsr	r19
 934:	27 95       	ror	r18
 936:	ab e7       	ldi	r26, 0x7B	; 123
 938:	b4 e1       	ldi	r27, 0x14	; 20
 93a:	18 d1       	rcall	.+560    	; 0xb6c <__umulhisi3>
 93c:	8c 01       	movw	r16, r24
 93e:	16 95       	lsr	r17
 940:	07 95       	ror	r16
	temp = temp - d3*100;
 942:	24 e6       	ldi	r18, 0x64	; 100
 944:	20 9f       	mul	r18, r16
 946:	c0 01       	movw	r24, r0
 948:	21 9f       	mul	r18, r17
 94a:	90 0d       	add	r25, r0
 94c:	11 24       	eor	r1, r1
 94e:	48 1b       	sub	r20, r24
 950:	59 0b       	sbc	r21, r25
	d2 = temp/10;
 952:	9a 01       	movw	r18, r20
 954:	ad ec       	ldi	r26, 0xCD	; 205
 956:	bc ec       	ldi	r27, 0xCC	; 204
 958:	09 d1       	rcall	.+530    	; 0xb6c <__umulhisi3>
 95a:	96 95       	lsr	r25
 95c:	87 95       	ror	r24
 95e:	96 95       	lsr	r25
 960:	87 95       	ror	r24
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
	d1 = temp - d2*10;
 966:	bc 01       	movw	r22, r24
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	9c 01       	movw	r18, r24
 96e:	22 0f       	add	r18, r18
 970:	33 1f       	adc	r19, r19
 972:	22 0f       	add	r18, r18
 974:	33 1f       	adc	r19, r19
 976:	22 0f       	add	r18, r18
 978:	33 1f       	adc	r19, r19
 97a:	26 0f       	add	r18, r22
 97c:	37 1f       	adc	r19, r23
 97e:	42 1b       	sub	r20, r18
 980:	53 0b       	sbc	r21, r19
	switch (mode){
 982:	22 e0       	ldi	r18, 0x02	; 2
 984:	f2 16       	cp	r15, r18
 986:	39 f0       	breq	.+14     	; 0x996 <convertTempToDigit+0xba>
 988:	23 e0       	ldi	r18, 0x03	; 3
 98a:	f2 16       	cp	r15, r18
 98c:	91 f0       	breq	.+36     	; 0x9b2 <convertTempToDigit+0xd6>
 98e:	21 e0       	ldi	r18, 0x01	; 1
 990:	f2 12       	cpse	r15, r18
 992:	16 c0       	rjmp	.+44     	; 0x9c0 <convertTempToDigit+0xe4>
 994:	03 c0       	rjmp	.+6      	; 0x99c <convertTempToDigit+0xc0>
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
 996:	cd e0       	ldi	r28, 0x0D	; 13
 998:	d0 e0       	ldi	r29, 0x00	; 0
 99a:	12 c0       	rjmp	.+36     	; 0x9c0 <convertTempToDigit+0xe4>
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
 99c:	01 15       	cp	r16, r1
 99e:	11 05       	cpc	r17, r1
 9a0:	19 f4       	brne	.+6      	; 0x9a8 <convertTempToDigit+0xcc>
 9a2:	20 97       	sbiw	r28, 0x00	; 0
 9a4:	49 f0       	breq	.+18     	; 0x9b8 <convertTempToDigit+0xdc>
 9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <convertTempToDigit+0xe4>
			if (d4 == 0) d4 = CLEAR;
 9a8:	20 97       	sbiw	r28, 0x00	; 0
 9aa:	51 f4       	brne	.+20     	; 0x9c0 <convertTempToDigit+0xe4>
 9ac:	ca e0       	ldi	r28, 0x0A	; 10
 9ae:	d0 e0       	ldi	r29, 0x00	; 0
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <convertTempToDigit+0xe4>
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
			break;
		case MODE_LOW:
			d4 = DEFIS_DOWN;
 9b2:	ce e0       	ldi	r28, 0x0E	; 14
 9b4:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <convertTempToDigit+0xe4>
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
 9b8:	ca e0       	ldi	r28, 0x0A	; 10
 9ba:	d0 e0       	ldi	r29, 0x00	; 0
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
 9bc:	0a e0       	ldi	r16, 0x0A	; 10
 9be:	10 e0       	ldi	r17, 0x00	; 0
			d4 = DEFIS_DOWN;
			break;
		default:
			break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 9c0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 9c2:	f8 94       	cli
		temperature[0] = (uint8_t)d4;
 9c4:	e0 ea       	ldi	r30, 0xA0	; 160
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	c0 83       	st	Z, r28
		temperature[1] = (uint8_t)d3;
 9ca:	01 83       	std	Z+1, r16	; 0x01
		temperature[2] = (uint8_t)d2;
 9cc:	82 83       	std	Z+2, r24	; 0x02
		temperature[3] = (uint8_t)d1;
 9ce:	43 83       	std	Z+3, r20	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 9d0:	9f bf       	out	0x3f, r25	; 63
	}
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	ff 90       	pop	r15
 9dc:	08 95       	ret

000009de <main>:
	err = ERROR_NO_SENSOR_AFTER_START;
}


int main(void)
{
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	cd b7       	in	r28, 0x3d	; 61
 9e4:	de b7       	in	r29, 0x3e	; 62
 9e6:	29 97       	sbiw	r28, 0x09	; 9
 9e8:	0f b6       	in	r0, 0x3f	; 63
 9ea:	f8 94       	cli
 9ec:	de bf       	out	0x3e, r29	; 62
 9ee:	0f be       	out	0x3f, r0	; 63
 9f0:	cd bf       	out	0x3d, r28	; 61
	uint8_t nSensors;
			
/*	uart_init((UART_BAUD_SELECT((BAUD),F_CPU)));*/
		
	#ifndef OW_ONE_BUS
		ow_set_bus(&PIND,&PORTD,&DDRD,PORTD7);
 9f2:	27 e0       	ldi	r18, 0x07	; 7
 9f4:	41 e3       	ldi	r20, 0x31	; 49
 9f6:	50 e0       	ldi	r21, 0x00	; 0
 9f8:	62 e3       	ldi	r22, 0x32	; 50
 9fa:	70 e0       	ldi	r23, 0x00	; 0
 9fc:	80 e3       	ldi	r24, 0x30	; 48
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	17 dd       	rcall	.-1490   	; 0x430 <ow_set_bus>
	#endif
		
 	sei();
 a02:	78 94       	sei
	uint8_t id[OW_ROMCODE_SIZE];
	uint8_t diff, nSensors;
	
/*	uart_puts_P( NEWLINESTR "Scanning Bus for DS18X20" NEWLINESTR );*/
	
	ow_reset();
 a04:	d1 dc       	rcall	.-1630   	; 0x3a8 <ow_reset>

	nSensors = 0;
	
	diff = OW_SEARCH_FIRST;
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	89 87       	std	Y+9, r24	; 0x09
	while ( diff != OW_LAST_DEVICE && nSensors < MAXSENSORS ) {
		DS18X20_find_sensor( &diff, &id[0] );
 a0a:	be 01       	movw	r22, r28
 a0c:	6f 5f       	subi	r22, 0xFF	; 255
 a0e:	7f 4f       	sbci	r23, 0xFF	; 255
 a10:	ce 01       	movw	r24, r28
 a12:	09 96       	adiw	r24, 0x09	; 9
 a14:	fe db       	rcall	.-2052   	; 0x212 <DS18X20_find_sensor>
		if( diff == OW_PRESENCE_ERR ) {
/*			uart_puts_P( "No Sensor found" NEWLINESTR );*/
			break;
		}
		
		if( diff == OW_DATA_ERR ) {
 a16:	89 85       	ldd	r24, Y+9	; 0x09
 a18:	8e 5f       	subi	r24, 0xFE	; 254
 a1a:	82 30       	cpi	r24, 0x02	; 2
 a1c:	08 f4       	brcc	.+2      	; 0xa20 <main+0x42>
 a1e:	a2 c0       	rjmp	.+324    	; 0xb64 <main+0x186>
 a20:	fe 01       	movw	r30, r28
 a22:	31 96       	adiw	r30, 0x01	; 1
 a24:	ab ea       	ldi	r26, 0xAB	; 171
 a26:	b0 e0       	ldi	r27, 0x00	; 0
 a28:	ce 01       	movw	r24, r28
 a2a:	09 96       	adiw	r24, 0x09	; 9
/*			uart_puts_P( "Bus Error" NEWLINESTR );*/
			break;
		}
		
		for ( i=0; i < OW_ROMCODE_SIZE; i++ )
		gSensorIDs[nSensors][i] = id[i];
 a2c:	21 91       	ld	r18, Z+
 a2e:	2d 93       	st	X+, r18
		if( diff == OW_DATA_ERR ) {
/*			uart_puts_P( "Bus Error" NEWLINESTR );*/
			break;
		}
		
		for ( i=0; i < OW_ROMCODE_SIZE; i++ )
 a30:	e8 17       	cp	r30, r24
 a32:	f9 07       	cpc	r31, r25
 a34:	d9 f7       	brne	.-10     	; 0xa2c <main+0x4e>
// 		if ( nSensors > 0 ) {
// 			eeprom_test();
// 		}
// 	#endif	
				
	initDisplay();
 a36:	67 de       	rcall	.-818    	; 0x706 <initDisplay>
	initTimer2();
 a38:	7d de       	rcall	.-774    	; 0x734 <initTimer2>
	initTimer1();
 a3a:	6c de       	rcall	.-808    	; 0x714 <initTimer1>
	initButton();
 a3c:	5d de       	rcall	.-838    	; 0x6f8 <initButton>
	initRele();
 a3e:	59 de       	rcall	.-846    	; 0x6f2 <initRele>
	mode = MODE_NORMAL;
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a46:	2f ef       	ldi	r18, 0xFF	; 255
 a48:	89 e6       	ldi	r24, 0x69	; 105
 a4a:	98 e1       	ldi	r25, 0x18	; 24
 a4c:	21 50       	subi	r18, 0x01	; 1
 a4e:	80 40       	sbci	r24, 0x00	; 0
 a50:	90 40       	sbci	r25, 0x00	; 0
 a52:	e1 f7       	brne	.-8      	; 0xa4c <main+0x6e>
 a54:	00 c0       	rjmp	.+0      	; 0xa56 <main+0x78>
 a56:	00 00       	nop
	_delay_ms(1000);
	
	if (MCUCSR & (1 << WDRF)){
 a58:	04 b6       	in	r0, 0x34	; 52
 a5a:	03 fe       	sbrs	r0, 3
 a5c:	08 c0       	rjmp	.+16     	; 0xa6e <main+0x90>
		MCUCSR &= ~(1 << WDRF);
 a5e:	84 b7       	in	r24, 0x34	; 52
 a60:	87 7f       	andi	r24, 0xF7	; 247
 a62:	84 bf       	out	0x34, r24	; 52
		disableWDT();
 a64:	16 de       	rcall	.-980    	; 0x692 <disableWDT>
		err = ERROR_WDT;
 a66:	84 e0       	ldi	r24, 0x04	; 4
 a68:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <err>
 a6c:	01 c0       	rjmp	.+2      	; 0xa70 <main+0x92>
	}
	else{
		initWDT();
 a6e:	0b de       	rcall	.-1002   	; 0x686 <initWDT>
		
    while (1) {		
		wdt_reset();	
 		handleError(err);	
		getButtonState(BUTTON1);
 		if (buttonStateON[BUTTON1]){
 a70:	0b e8       	ldi	r16, 0x8B	; 139
 a72:	10 e0       	ldi	r17, 0x00	; 0
 			buttonStateON[BUTTON1] = 0;
 			mode += 1;
 			if (mode == 4) mode = MODE_NORMAL;
 a74:	ff 24       	eor	r15, r15
 a76:	f3 94       	inc	r15
				readTempForOnlyDS18b20();
 				convertTempToDigit(decicelsius, mode);
 				wdt_reset();
 			}
			if (decicelsius > ALARM_HEAT){
				err = ERROR_TEMP_OVERHEAT;
 a78:	0f 2e       	mov	r0, r31
 a7a:	f3 e0       	ldi	r31, 0x03	; 3
 a7c:	ef 2e       	mov	r14, r31
 a7e:	f0 2d       	mov	r31, r0
		initWDT();
	}
/*	_delay_ms(1650);*/
		
    while (1) {		
		wdt_reset();	
 a80:	a8 95       	wdr
 		handleError(err);	
 a82:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <err>
 a86:	0b de       	rcall	.-1002   	; 0x69e <handleError>
		getButtonState(BUTTON1);
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	62 de       	rcall	.-828    	; 0x750 <getButtonState>
 		if (buttonStateON[BUTTON1]){
 a8c:	f8 01       	movw	r30, r16
 a8e:	80 81       	ld	r24, Z
 a90:	88 23       	and	r24, r24
 a92:	61 f0       	breq	.+24     	; 0xaac <main+0xce>
 			buttonStateON[BUTTON1] = 0;
 a94:	10 82       	st	Z, r1
 			mode += 1;
 a96:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <mode>
 a9a:	8f 5f       	subi	r24, 0xFF	; 255
 a9c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <mode>
 			if (mode == 4) mode = MODE_NORMAL;
 aa0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <mode>
 aa4:	84 30       	cpi	r24, 0x04	; 4
 aa6:	11 f4       	brne	.+4      	; 0xaac <main+0xce>
 aa8:	f0 92 9e 00 	sts	0x009E, r15	; 0x80009e <mode>
		}
 		switch (mode){
 aac:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <mode>
 ab0:	82 30       	cpi	r24, 0x02	; 2
 ab2:	09 f4       	brne	.+2      	; 0xab6 <main+0xd8>
 ab4:	47 c0       	rjmp	.+142    	; 0xb44 <main+0x166>
 ab6:	83 30       	cpi	r24, 0x03	; 3
 ab8:	09 f4       	brne	.+2      	; 0xabc <main+0xde>
 aba:	4c c0       	rjmp	.+152    	; 0xb54 <main+0x176>
 abc:	81 30       	cpi	r24, 0x01	; 1
 abe:	01 f7       	brne	.-64     	; 0xa80 <main+0xa2>
 		case MODE_NORMAL:
			if (millis() - milliseconds_since > 999){
 ac0:	d7 dd       	rcall	.-1106   	; 0x670 <millis>
 ac2:	80 90 80 00 	lds	r8, 0x0080	; 0x800080 <milliseconds_since>
 ac6:	90 90 81 00 	lds	r9, 0x0081	; 0x800081 <milliseconds_since+0x1>
 aca:	a0 90 82 00 	lds	r10, 0x0082	; 0x800082 <milliseconds_since+0x2>
 ace:	b0 90 83 00 	lds	r11, 0x0083	; 0x800083 <milliseconds_since+0x3>
 ad2:	dc 01       	movw	r26, r24
 ad4:	cb 01       	movw	r24, r22
 ad6:	88 19       	sub	r24, r8
 ad8:	99 09       	sbc	r25, r9
 ada:	aa 09       	sbc	r26, r10
 adc:	bb 09       	sbc	r27, r11
 ade:	88 3e       	cpi	r24, 0xE8	; 232
 ae0:	93 40       	sbci	r25, 0x03	; 3
 ae2:	a1 05       	cpc	r26, r1
 ae4:	b1 05       	cpc	r27, r1
 ae6:	90 f0       	brcs	.+36     	; 0xb0c <main+0x12e>
				milliseconds_since = millis();
 ae8:	c3 dd       	rcall	.-1146   	; 0x670 <millis>
 aea:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <milliseconds_since>
 aee:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <milliseconds_since+0x1>
 af2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <milliseconds_since+0x2>
 af6:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <milliseconds_since+0x3>
				readTempForOnlyDS18b20();
 afa:	88 dd       	rcall	.-1264   	; 0x60c <readTempForOnlyDS18b20>
 				convertTempToDigit(decicelsius, mode);
 afc:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <mode>
 b00:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <decicelsius>
 b04:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <decicelsius+0x1>
 b08:	e9 de       	rcall	.-558    	; 0x8dc <convertTempToDigit>
 				wdt_reset();
 b0a:	a8 95       	wdr
 			}
			if (decicelsius > ALARM_HEAT){
 b0c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <decicelsius>
 b10:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <decicelsius+0x1>
 b14:	8d 32       	cpi	r24, 0x2D	; 45
 b16:	21 e0       	ldi	r18, 0x01	; 1
 b18:	92 07       	cpc	r25, r18
 b1a:	14 f0       	brlt	.+4      	; 0xb20 <main+0x142>
				err = ERROR_TEMP_OVERHEAT;
 b1c:	e0 92 7f 00 	sts	0x007F, r14	; 0x80007f <err>
			}
			if (decicelsius < limitLow){ //heat on
 b20:	8a 3f       	cpi	r24, 0xFA	; 250
 b22:	91 05       	cpc	r25, r1
 b24:	1c f4       	brge	.+6      	; 0xb2c <main+0x14e>
				heatStatus = HEAT_ON;
 b26:	f0 92 9d 00 	sts	0x009D, r15	; 0x80009d <heatStatus>
				RELE_ON;
 b2a:	95 9a       	sbi	0x12, 5	; 18
			}
			if (decicelsius > limitHigh){ //cool on
 b2c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <decicelsius>
 b30:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <decicelsius+0x1>
 b34:	85 30       	cpi	r24, 0x05	; 5
 b36:	91 40       	sbci	r25, 0x01	; 1
 b38:	0c f4       	brge	.+2      	; 0xb3c <main+0x15e>
 b3a:	a2 cf       	rjmp	.-188    	; 0xa80 <main+0xa2>
				heatStatus = HEAT_OFF;
 b3c:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <heatStatus>
				RELE_OFF;
 b40:	95 98       	cbi	0x12, 5	; 18
 b42:	9e cf       	rjmp	.-196    	; 0xa80 <main+0xa2>
			if (decicelsius > limitLow && decicelsius < limitHigh){ //cool on
				
			}
 			break;		
 		case MODE_HIGH:
 			convertTempToDigit(limitHigh, mode);
 b44:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <mode>
 b48:	84 e0       	ldi	r24, 0x04	; 4
 b4a:	91 e0       	ldi	r25, 0x01	; 1
 b4c:	c7 de       	rcall	.-626    	; 0x8dc <convertTempToDigit>
			RELE_OFF;
 b4e:	95 98       	cbi	0x12, 5	; 18
 			wdt_reset();
 b50:	a8 95       	wdr
 			break;		
 b52:	96 cf       	rjmp	.-212    	; 0xa80 <main+0xa2>
 		case MODE_LOW:
 			convertTempToDigit(limitLow, mode);
 b54:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <mode>
 b58:	8a ef       	ldi	r24, 0xFA	; 250
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	bf de       	rcall	.-642    	; 0x8dc <convertTempToDigit>
			RELE_OFF;
 b5e:	95 98       	cbi	0x12, 5	; 18
 			wdt_reset();
 b60:	a8 95       	wdr
 			break;	
 b62:	8e cf       	rjmp	.-228    	; 0xa80 <main+0xa2>
		
 	sei();
		
	nSensors = search_sensors();
	if (nSensors == 0){
		err = ERROR_NO_SENSOR_START;
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <err>
 b6a:	65 cf       	rjmp	.-310    	; 0xa36 <main+0x58>

00000b6c <__umulhisi3>:
 b6c:	a2 9f       	mul	r26, r18
 b6e:	b0 01       	movw	r22, r0
 b70:	b3 9f       	mul	r27, r19
 b72:	c0 01       	movw	r24, r0
 b74:	a3 9f       	mul	r26, r19
 b76:	01 d0       	rcall	.+2      	; 0xb7a <__umulhisi3+0xe>
 b78:	b2 9f       	mul	r27, r18
 b7a:	70 0d       	add	r23, r0
 b7c:	81 1d       	adc	r24, r1
 b7e:	11 24       	eor	r1, r1
 b80:	91 1d       	adc	r25, r1
 b82:	08 95       	ret

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>
