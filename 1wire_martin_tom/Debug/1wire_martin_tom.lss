
1wire_martin_tom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000012f8  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000075  0080012a  0080012a  000013b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004080  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013cd  00000000  00000000  00005750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f94  00000000  00000000  00006b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000918  00000000  00000000  00008ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bff  00000000  00000000  000093cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000334f  00000000  00000000  00009fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000d31a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__ctors_end>
       4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      18:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_6>
      1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      2c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_11>
      30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      38:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_14>
      3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      48:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_18>
      4c:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_19>
      50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	44 53       	subi	r20, 0x34	; 52
      6a:	31 38       	cpi	r19, 0x81	; 129
      6c:	58 32       	cpi	r21, 0x28	; 40
      6e:	30 5f       	subi	r19, 0xF0	; 240
      70:	73 74       	andi	r23, 0x43	; 67
      72:	61 72       	andi	r22, 0x21	; 33
      74:	74 5f       	subi	r23, 0xF4	; 244
      76:	6d 65       	ori	r22, 0x5D	; 93
      78:	61 73       	andi	r22, 0x31	; 49
      7a:	3a 20       	and	r3, r10
      7c:	53 68       	ori	r21, 0x83	; 131
      7e:	6f 72       	andi	r22, 0x2F	; 47
      80:	74 20       	and	r7, r4
      82:	43 69       	ori	r20, 0x93	; 147
      84:	72 63       	ori	r23, 0x32	; 50
      86:	75 69       	ori	r23, 0x95	; 149
      88:	74 21       	and	r23, r4
      8a:	0d 00       	.word	0x000d	; ????

0000008c <__c.2201>:
      8c:	20 43 52 43 20 4f 2e 4b 2e 20 00                     CRC O.K. .

00000097 <__c.2199>:
      97:	20 43 52 43 20 46 41 49 4c 20 00                     CRC FAIL .

000000a2 <__c.2194>:
      a2:	28 20 3f 20 29 00                                   ( ? ).

000000a8 <__c.2192>:
      a8:	28 32 32 29 00                                      (22).

000000ad <__c.2190>:
      ad:	28 31 38 42 29 00                                   (18B).

000000b3 <__c.2188>:
      b3:	28 31 38 53 29 00                                   (18S).

000000b9 <__c.2186>:
      b9:	20 00                                                .

000000bb <__c.2184>:
      bb:	53 4e 3a 20 00                                      SN: .

000000c0 <__c.2182>:
      c0:	43 52 43 3a 00                                      CRC:.

000000c5 <__c.2180>:
      c5:	46 43 3a 00                                         FC:.

000000c9 <__c.2386>:
      c9:	42 75 73 20 45 72 72 6f 72 0d 0a 00                 Bus Error...

000000d5 <__c.2383>:
      d5:	4e 6f 20 53 65 6e 73 6f 72 20 66 6f 75 6e 64 0d     No Sensor found.
      e5:	0a 00                                               ..

000000e7 <__c.2381>:
      e7:	0d 0a 53 63 61 6e 6e 69 6e 67 20 42 75 73 20 66     ..Scanning Bus f
      f7:	6f 72 20 44 53 31 38 58 32 30 0d 0a 00              or DS18X20...

00000104 <__c.2342>:
     104:	20 70 6f 77 65 72 65 64 0d 0a 00                     powered...

0000010f <__c.2340>:
     10f:	65 78 74 65 72 6e 61 6c 6c 79 00                    externally.

0000011a <__c.2338>:
     11a:	70 61 72 61 73 69 74 65 00                          parasite.

00000123 <__c.2336>:
     123:	20 77 68 69 63 68 20 69 73 20 00                     which is .

0000012e <__c.2334>:
     12e:	44 53 31 38 42 32 30 00                             DS18B20.

00000136 <__c.2332>:
     136:	44 53 31 38 32 32 00                                DS1822.

0000013d <__c.2330>:
     13d:	44 53 31 38 53 32 30 2f 44 53 31 38 32 30 00        DS18S20/DS1820.

0000014c <__c.2328>:
     14c:	20 69 73 20 61 20 00                                 is a .

00000153 <__c.2326>:
     153:	53 65 6e 73 6f 72 23 20 00                          Sensor# .

0000015c <__c.2321>:
     15c:	0d 0a 00                                            ...

0000015f <__c.2319>:
     15f:	20 3a 20 00                                          : .

00000163 <__c.2317>:
     163:	23 20 69 6e 20 42 75 73 20 3a 00                    # in Bus :.

0000016e <__c.2315>:
     16e:	20 44 53 31 38 58 32 30 20 53 65 6e 73 6f 72 28      DS18X20 Sensor(
     17e:	73 29 20 61 76 61 69 6c 61 62 6c 65 3a 0d 0a 00     s) available:...

0000018e <__c.2313>:
     18e:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     19e:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1ae:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 -----------.

000001ba <__c.2311>:
     1ba:	0d 0a 44 53 31 38 58 32 30 20 31 2d 57 69 72 65     ..DS18X20 1-Wire
     1ca:	2d 52 65 61 64 65 72 20 44 65 6d 6f 20 62 79 20     -Reader Demo by 
     1da:	4d 61 72 74 69 6e 20 54 68 6f 6d 61 73 0d 0a 00     Martin Thomas...

000001ea <__ctors_end>:
     1ea:	11 24       	eor	r1, r1
     1ec:	1f be       	out	0x3f, r1	; 63
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	d8 e0       	ldi	r29, 0x08	; 8
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	e8 ef       	ldi	r30, 0xF8	; 248
     1fe:	f2 e1       	ldi	r31, 0x12	; 18
     200:	02 c0       	rjmp	.+4      	; 0x206 <__do_copy_data+0x10>
     202:	05 90       	lpm	r0, Z+
     204:	0d 92       	st	X+, r0
     206:	aa 32       	cpi	r26, 0x2A	; 42
     208:	b1 07       	cpc	r27, r17
     20a:	d9 f7       	brne	.-10     	; 0x202 <__do_copy_data+0xc>

0000020c <__do_clear_bss>:
     20c:	21 e0       	ldi	r18, 0x01	; 1
     20e:	aa e2       	ldi	r26, 0x2A	; 42
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
     214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
     216:	af 39       	cpi	r26, 0x9F	; 159
     218:	b2 07       	cpc	r27, r18
     21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
     21c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <main>
     220:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <_exit>

00000224 <__bad_interrupt>:
     224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     228:	61 15       	cp	r22, r1
     22a:	71 05       	cpc	r23, r1
     22c:	b1 f0       	breq	.+44     	; 0x25a <crc8+0x32>
     22e:	fc 01       	movw	r30, r24
     230:	68 0f       	add	r22, r24
     232:	79 1f       	adc	r23, r25
     234:	80 e0       	ldi	r24, 0x00	; 0
	{
		b = data[loop_count];
     236:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
     238:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
     23a:	21 91       	ld	r18, Z+
     23c:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
     23e:	32 2f       	mov	r19, r18
     240:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
     242:	30 ff       	sbrs	r19, 0
     244:	0c c0       	rjmp	.+24     	; 0x25e <crc8+0x36>
				crc = crc ^ CRC8POLY;
     246:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
     248:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
     24a:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
     24c:	26 95       	lsr	r18
     24e:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
     250:	b1 f7       	brne	.-20     	; 0x23e <crc8+0x16>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     252:	e6 17       	cp	r30, r22
     254:	f7 07       	cpc	r31, r23
     256:	89 f7       	brne	.-30     	; 0x23a <crc8+0x12>
     258:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
     25e:	86 95       	lsr	r24
     260:	f5 cf       	rjmp	.-22     	; 0x24c <crc8+0x24>

00000262 <DS18X20_raw_to_decicelsius>:
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
	if ( ret == DS18X20_OK ) {
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
	}
	return ret;
}
     262:	fb 01       	movw	r30, r22
     264:	41 81       	ldd	r20, Z+1	; 0x01
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	54 2f       	mov	r21, r20
     26a:	44 27       	eor	r20, r20
     26c:	90 81       	ld	r25, Z
     26e:	49 2b       	or	r20, r25
     270:	9a 01       	movw	r18, r20
     272:	80 31       	cpi	r24, 0x10	; 16
     274:	91 f4       	brne	.+36     	; 0x29a <DS18X20_raw_to_decicelsius+0x38>
     276:	4e 7f       	andi	r20, 0xFE	; 254
     278:	44 0f       	add	r20, r20
     27a:	55 1f       	adc	r21, r21
     27c:	44 0f       	add	r20, r20
     27e:	55 1f       	adc	r21, r21
     280:	44 0f       	add	r20, r20
     282:	55 1f       	adc	r21, r21
     284:	96 81       	ldd	r25, Z+6	; 0x06
     286:	2c e0       	ldi	r18, 0x0C	; 12
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	29 1b       	sub	r18, r25
     28c:	31 09       	sbc	r19, r1
     28e:	24 0f       	add	r18, r20
     290:	35 1f       	adc	r19, r21
     292:	33 23       	and	r19, r19
     294:	0c f0       	brlt	.+2      	; 0x298 <DS18X20_raw_to_decicelsius+0x36>
     296:	5b c0       	rjmp	.+182    	; 0x34e <DS18X20_raw_to_decicelsius+0xec>
     298:	02 c0       	rjmp	.+4      	; 0x29e <DS18X20_raw_to_decicelsius+0x3c>
     29a:	55 23       	and	r21, r21
     29c:	2c f4       	brge	.+10     	; 0x2a8 <DS18X20_raw_to_decicelsius+0x46>
     29e:	31 95       	neg	r19
     2a0:	21 95       	neg	r18
     2a2:	31 09       	sbc	r19, r1
     2a4:	a1 e0       	ldi	r26, 0x01	; 1
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <DS18X20_raw_to_decicelsius+0x48>
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	88 32       	cpi	r24, 0x28	; 40
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <DS18X20_raw_to_decicelsius+0x50>
     2ae:	82 32       	cpi	r24, 0x22	; 34
     2b0:	69 f4       	brne	.+26     	; 0x2cc <DS18X20_raw_to_decicelsius+0x6a>
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	80 76       	andi	r24, 0x60	; 96
     2b6:	80 32       	cpi	r24, 0x20	; 32
     2b8:	31 f0       	breq	.+12     	; 0x2c6 <DS18X20_raw_to_decicelsius+0x64>
     2ba:	80 34       	cpi	r24, 0x40	; 64
     2bc:	31 f0       	breq	.+12     	; 0x2ca <DS18X20_raw_to_decicelsius+0x68>
     2be:	81 11       	cpse	r24, r1
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <DS18X20_raw_to_decicelsius+0x6a>
     2c2:	28 7f       	andi	r18, 0xF8	; 248
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <DS18X20_raw_to_decicelsius+0x6a>
     2c6:	2c 7f       	andi	r18, 0xFC	; 252
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <DS18X20_raw_to_decicelsius+0x6a>
     2ca:	2e 7f       	andi	r18, 0xFE	; 254
     2cc:	a9 01       	movw	r20, r18
     2ce:	52 95       	swap	r21
     2d0:	42 95       	swap	r20
     2d2:	4f 70       	andi	r20, 0x0F	; 15
     2d4:	45 27       	eor	r20, r21
     2d6:	5f 70       	andi	r21, 0x0F	; 15
     2d8:	45 27       	eor	r20, r21
     2da:	ba 01       	movw	r22, r20
     2dc:	66 0f       	add	r22, r22
     2de:	77 1f       	adc	r23, r23
     2e0:	44 0f       	add	r20, r20
     2e2:	55 1f       	adc	r21, r21
     2e4:	44 0f       	add	r20, r20
     2e6:	55 1f       	adc	r21, r21
     2e8:	44 0f       	add	r20, r20
     2ea:	55 1f       	adc	r21, r21
     2ec:	64 0f       	add	r22, r20
     2ee:	75 1f       	adc	r23, r21
     2f0:	2f 70       	andi	r18, 0x0F	; 15
     2f2:	33 27       	eor	r19, r19
     2f4:	c9 01       	movw	r24, r18
     2f6:	96 95       	lsr	r25
     2f8:	98 2f       	mov	r25, r24
     2fa:	88 27       	eor	r24, r24
     2fc:	97 95       	ror	r25
     2fe:	87 95       	ror	r24
     300:	32 2f       	mov	r19, r18
     302:	22 27       	eor	r18, r18
     304:	33 0f       	add	r19, r19
     306:	82 0f       	add	r24, r18
     308:	93 1f       	adc	r25, r19
     30a:	a1 11       	cpse	r26, r1
     30c:	15 c0       	rjmp	.+42     	; 0x338 <DS18X20_raw_to_decicelsius+0xd6>
     30e:	ac 01       	movw	r20, r24
     310:	5e 5f       	subi	r21, 0xFE	; 254
     312:	45 2f       	mov	r20, r21
     314:	55 27       	eor	r21, r21
     316:	46 95       	lsr	r20
     318:	46 95       	lsr	r20
     31a:	9b 01       	movw	r18, r22
     31c:	24 0f       	add	r18, r20
     31e:	35 1f       	adc	r19, r21
     320:	c9 01       	movw	r24, r18
     322:	8a 5d       	subi	r24, 0xDA	; 218
     324:	9d 4f       	sbci	r25, 0xFD	; 253
     326:	89 30       	cpi	r24, 0x09	; 9
     328:	97 40       	sbci	r25, 0x07	; 7
     32a:	18 f4       	brcc	.+6      	; 0x332 <DS18X20_raw_to_decicelsius+0xd0>
     32c:	82 2f       	mov	r24, r18
     32e:	93 2f       	mov	r25, r19
     330:	08 95       	ret
     332:	80 ed       	ldi	r24, 0xD0	; 208
     334:	97 e0       	ldi	r25, 0x07	; 7
     336:	08 95       	ret
     338:	89 2f       	mov	r24, r25
     33a:	99 27       	eor	r25, r25
     33c:	86 95       	lsr	r24
     33e:	86 95       	lsr	r24
     340:	9b 01       	movw	r18, r22
     342:	28 0f       	add	r18, r24
     344:	39 1f       	adc	r19, r25
     346:	31 95       	neg	r19
     348:	21 95       	neg	r18
     34a:	31 09       	sbc	r19, r1
     34c:	e9 cf       	rjmp	.-46     	; 0x320 <DS18X20_raw_to_decicelsius+0xbe>
     34e:	f9 01       	movw	r30, r18
     350:	f2 95       	swap	r31
     352:	e2 95       	swap	r30
     354:	ef 70       	andi	r30, 0x0F	; 15
     356:	ef 27       	eor	r30, r31
     358:	ff 70       	andi	r31, 0x0F	; 15
     35a:	ef 27       	eor	r30, r31
     35c:	bf 01       	movw	r22, r30
     35e:	66 0f       	add	r22, r22
     360:	77 1f       	adc	r23, r23
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	6e 0f       	add	r22, r30
     370:	7f 1f       	adc	r23, r31
     372:	a9 01       	movw	r20, r18
     374:	4f 70       	andi	r20, 0x0F	; 15
     376:	55 27       	eor	r21, r21
     378:	ca 01       	movw	r24, r20
     37a:	96 95       	lsr	r25
     37c:	98 2f       	mov	r25, r24
     37e:	88 27       	eor	r24, r24
     380:	97 95       	ror	r25
     382:	87 95       	ror	r24
     384:	54 2f       	mov	r21, r20
     386:	44 27       	eor	r20, r20
     388:	55 0f       	add	r21, r21
     38a:	84 0f       	add	r24, r20
     38c:	95 1f       	adc	r25, r21
     38e:	bf cf       	rjmp	.-130    	; 0x30e <DS18X20_raw_to_decicelsius+0xac>

00000390 <read_scratchpad>:
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	7b 01       	movw	r14, r22
     39e:	04 2f       	mov	r16, r20
     3a0:	bc 01       	movw	r22, r24
     3a2:	8e eb       	ldi	r24, 0xBE	; 190
     3a4:	0e 94 8e 04 	call	0x91c	; 0x91c <ow_command>
     3a8:	00 23       	and	r16, r16
     3aa:	69 f0       	breq	.+26     	; 0x3c6 <read_scratchpad+0x36>
     3ac:	e7 01       	movw	r28, r14
     3ae:	01 50       	subi	r16, 0x01	; 1
     3b0:	10 e0       	ldi	r17, 0x00	; 0
     3b2:	0f 5f       	subi	r16, 0xFF	; 255
     3b4:	1f 4f       	sbci	r17, 0xFF	; 255
     3b6:	0e 0d       	add	r16, r14
     3b8:	1f 1d       	adc	r17, r15
     3ba:	0e 94 30 04 	call	0x860	; 0x860 <ow_byte_rd>
     3be:	89 93       	st	Y+, r24
     3c0:	c0 17       	cp	r28, r16
     3c2:	d1 07       	cpc	r29, r17
     3c4:	d1 f7       	brne	.-12     	; 0x3ba <read_scratchpad+0x2a>
     3c6:	69 e0       	ldi	r22, 0x09	; 9
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	c7 01       	movw	r24, r14
     3cc:	0e 94 14 01 	call	0x228	; 0x228 <crc8>
     3d0:	81 11       	cpse	r24, r1
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	08 95       	ret

000003e2 <DS18X20_show_id_uart>:
     3e2:	af 92       	push	r10
     3e4:	bf 92       	push	r11
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	5c 01       	movw	r10, r24
     3f8:	7b 01       	movw	r14, r22
     3fa:	61 15       	cp	r22, r1
     3fc:	71 05       	cpc	r23, r1
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	5b c0       	rjmp	.+182    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     402:	8c 01       	movw	r16, r24
     404:	c0 e0       	ldi	r28, 0x00	; 0
     406:	d0 e0       	ldi	r29, 0x00	; 0
     408:	6b 01       	movw	r12, r22
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	c8 1a       	sub	r12, r24
     40e:	d1 08       	sbc	r13, r1
     410:	20 97       	sbiw	r28, 0x00	; 0
     412:	69 f4       	brne	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     414:	85 ec       	ldi	r24, 0xC5	; 197
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     41c:	f8 01       	movw	r30, r16
     41e:	80 81       	ld	r24, Z
     420:	0e 94 2b 09 	call	0x1256	; 0x1256 <uart_puthex_byte>
     424:	89 eb       	ldi	r24, 0xB9	; 185
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     42c:	23 c0       	rjmp	.+70     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     42e:	cc 16       	cp	r12, r28
     430:	dd 06       	cpc	r13, r29
     432:	09 f0       	breq	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	5b c0       	rjmp	.+182    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     436:	80 ec       	ldi	r24, 0xC0	; 192
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     43e:	f1 e0       	ldi	r31, 0x01	; 1
     440:	cf 16       	cp	r12, r31
     442:	d1 04       	cpc	r13, r1
     444:	69 f4       	brne	.+26     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     446:	8b eb       	ldi	r24, 0xBB	; 187
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     44e:	f8 01       	movw	r30, r16
     450:	80 81       	ld	r24, Z
     452:	0e 94 2b 09 	call	0x1256	; 0x1256 <uart_puthex_byte>
     456:	89 eb       	ldi	r24, 0xB9	; 185
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     45e:	25 c0       	rjmp	.+74     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     460:	f8 01       	movw	r30, r16
     462:	80 81       	ld	r24, Z
     464:	0e 94 2b 09 	call	0x1256	; 0x1256 <uart_puthex_byte>
     468:	89 eb       	ldi	r24, 0xB9	; 185
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     470:	20 97       	sbiw	r28, 0x00	; 0
     472:	d9 f4       	brne	.+54     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     474:	f5 01       	movw	r30, r10
     476:	80 81       	ld	r24, Z
     478:	80 31       	cpi	r24, 0x10	; 16
     47a:	29 f4       	brne	.+10     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     47c:	83 eb       	ldi	r24, 0xB3	; 179
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     484:	12 c0       	rjmp	.+36     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     486:	88 32       	cpi	r24, 0x28	; 40
     488:	29 f4       	brne	.+10     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     48a:	8d ea       	ldi	r24, 0xAD	; 173
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     492:	0b c0       	rjmp	.+22     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     494:	82 32       	cpi	r24, 0x22	; 34
     496:	29 f4       	brne	.+10     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     498:	88 ea       	ldi	r24, 0xA8	; 168
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4a2:	82 ea       	ldi	r24, 0xA2	; 162
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     4aa:	21 96       	adiw	r28, 0x01	; 1
     4ac:	0f 5f       	subi	r16, 0xFF	; 255
     4ae:	1f 4f       	sbci	r17, 0xFF	; 255
     4b0:	ce 15       	cp	r28, r14
     4b2:	df 05       	cpc	r29, r15
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b6:	ac cf       	rjmp	.-168    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     4b8:	68 e0       	ldi	r22, 0x08	; 8
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	c5 01       	movw	r24, r10
     4be:	0e 94 14 01 	call	0x228	; 0x228 <crc8>
     4c2:	88 23       	and	r24, r24
     4c4:	29 f0       	breq	.+10     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4c6:	87 e9       	ldi	r24, 0x97	; 151
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     4ce:	12 c0       	rjmp	.+36     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4d0:	8c e8       	ldi	r24, 0x8C	; 140
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4da:	f8 01       	movw	r30, r16
     4dc:	80 81       	ld	r24, Z
     4de:	0e 94 2b 09 	call	0x1256	; 0x1256 <uart_puthex_byte>
     4e2:	89 eb       	ldi	r24, 0xB9	; 185
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     4ea:	df cf       	rjmp	.-66     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4ec:	c1 30       	cpi	r28, 0x01	; 1
     4ee:	d1 05       	cpc	r29, r1
     4f0:	a1 f7       	brne	.-24     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4f2:	a9 cf       	rjmp	.-174    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	08 95       	ret

0000050a <DS18X20_find_sensor>:
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ec 01       	movw	r28, r24
     514:	8b 01       	movw	r16, r22
     516:	b8 01       	movw	r22, r16
     518:	88 81       	ld	r24, Y
     51a:	0e 94 34 04 	call	0x868	; 0x868 <ow_rom_search>
     51e:	88 83       	st	Y, r24
     520:	81 50       	subi	r24, 0x01	; 1
     522:	8d 3f       	cpi	r24, 0xFD	; 253
     524:	50 f4       	brcc	.+20     	; 0x53a <DS18X20_find_sensor+0x30>
     526:	f8 01       	movw	r30, r16
     528:	90 81       	ld	r25, Z
     52a:	98 32       	cpi	r25, 0x28	; 40
     52c:	41 f0       	breq	.+16     	; 0x53e <DS18X20_find_sensor+0x34>
     52e:	90 31       	cpi	r25, 0x10	; 16
     530:	41 f0       	breq	.+16     	; 0x542 <DS18X20_find_sensor+0x38>
     532:	92 32       	cpi	r25, 0x22	; 34
     534:	81 f7       	brne	.-32     	; 0x516 <DS18X20_find_sensor+0xc>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	05 c0       	rjmp	.+10     	; 0x544 <DS18X20_find_sensor+0x3a>
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	03 c0       	rjmp	.+6      	; 0x544 <DS18X20_find_sensor+0x3a>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	01 c0       	rjmp	.+2      	; 0x544 <DS18X20_find_sensor+0x3a>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <DS18X20_get_power_status>:
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
     554:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ow_reset>
     558:	be 01       	movw	r22, r28
     55a:	84 eb       	ldi	r24, 0xB4	; 180
     55c:	0e 94 8e 04 	call	0x91c	; 0x91c <ow_command>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	0e 94 cf 03 	call	0x79e	; 0x79e <ow_bit_io>
     566:	c8 2f       	mov	r28, r24
     568:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ow_reset>
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	c1 11       	cpse	r28, r1
     570:	01 c0       	rjmp	.+2      	; 0x574 <DS18X20_get_power_status+0x26>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <DS18X20_start_meas>:
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	18 2f       	mov	r17, r24
     582:	eb 01       	movw	r28, r22
     584:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ow_reset>
     588:	0e 94 11 03 	call	0x622	; 0x622 <ow_input_pin_state>
     58c:	88 23       	and	r24, r24
     58e:	71 f0       	breq	.+28     	; 0x5ac <DS18X20_start_meas+0x32>
     590:	11 30       	cpi	r17, 0x01	; 1
     592:	31 f0       	breq	.+12     	; 0x5a0 <DS18X20_start_meas+0x26>
     594:	be 01       	movw	r22, r28
     596:	84 e4       	ldi	r24, 0x44	; 68
     598:	0e 94 92 04 	call	0x924	; 0x924 <ow_command_with_parasite_enable>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0b c0       	rjmp	.+22     	; 0x5b6 <DS18X20_start_meas+0x3c>
     5a0:	be 01       	movw	r22, r28
     5a2:	84 e4       	ldi	r24, 0x44	; 68
     5a4:	0e 94 8e 04 	call	0x91c	; 0x91c <ow_command>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <DS18X20_start_meas+0x3c>
     5ac:	88 e6       	ldi	r24, 0x68	; 104
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	08 95       	ret

000005be <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	29 97       	sbiw	r28, 0x09	; 9
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	08 2f       	mov	r16, r24
     5dc:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     5de:	49 e0       	ldi	r20, 0x09	; 9
     5e0:	be 01       	movw	r22, r28
     5e2:	6f 5f       	subi	r22, 0xFF	; 255
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 c8 01 	call	0x390	; 0x390 <read_scratchpad>
     5ee:	18 2f       	mov	r17, r24
	if ( ret == DS18X20_OK ) {
     5f0:	81 11       	cpse	r24, r1
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <DS18X20_read_decicelsius_single+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	80 2f       	mov	r24, r16
     5fc:	0e 94 31 01 	call	0x262	; 0x262 <DS18X20_raw_to_decicelsius>
     600:	f7 01       	movw	r30, r14
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	80 83       	st	Z, r24
	}
	return ret;
}
     606:	81 2f       	mov	r24, r17
     608:	29 96       	adiw	r28, 0x09	; 9
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	08 95       	ret

00000622 <ow_input_pin_state>:

void ow_parasite_disable(void)
{
	OW_DIR_IN();
#if (!OW_USE_INTERNAL_PULLUP)
	OW_OUT_LOW();
     622:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     626:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     62a:	90 81       	ld	r25, Z
     62c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     630:	89 23       	and	r24, r25
     632:	08 95       	ret

00000634 <ow_parasite_enable>:
     634:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <OW_OUT>
     638:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <OW_OUT+0x1>
     63c:	90 81       	ld	r25, Z
     63e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     642:	89 2b       	or	r24, r25
     644:	80 83       	st	Z, r24
     646:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     64a:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     64e:	90 81       	ld	r25, Z
     650:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     654:	89 2b       	or	r24, r25
     656:	80 83       	st	Z, r24
     658:	08 95       	ret

0000065a <ow_bit_io_intern>:
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	c8 2f       	mov	r28, r24
     660:	df b7       	in	r29, 0x3f	; 63
     662:	f8 94       	cli
     664:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     668:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     66c:	90 81       	ld	r25, Z
     66e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     672:	89 2b       	or	r24, r25
     674:	80 83       	st	Z, r24
     676:	8a e0       	ldi	r24, 0x0A	; 10
     678:	8a 95       	dec	r24
     67a:	f1 f7       	brne	.-4      	; 0x678 <ow_bit_io_intern+0x1e>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <ow_bit_io_intern+0x24>
     67e:	cc 23       	and	r28, r28
     680:	51 f0       	breq	.+20     	; 0x696 <ow_bit_io_intern+0x3c>
     682:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     686:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     68a:	20 81       	ld	r18, Z
     68c:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <OW_PIN_MASK>
     690:	90 95       	com	r25
     692:	92 23       	and	r25, r18
     694:	90 83       	st	Z, r25
     696:	85 e4       	ldi	r24, 0x45	; 69
     698:	8a 95       	dec	r24
     69a:	f1 f7       	brne	.-4      	; 0x698 <ow_bit_io_intern+0x3e>
     69c:	00 00       	nop
     69e:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     6a2:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     6a6:	20 81       	ld	r18, Z
     6a8:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <OW_PIN_MASK>
     6ac:	92 23       	and	r25, r18
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <ow_bit_io_intern+0x58>
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	85 ee       	ldi	r24, 0xE5	; 229
     6b4:	8a 95       	dec	r24
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <ow_bit_io_intern+0x5a>
     6b8:	00 00       	nop
     6ba:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     6be:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     6c2:	20 81       	ld	r18, Z
     6c4:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <OW_PIN_MASK>
     6c8:	90 95       	com	r25
     6ca:	92 23       	and	r25, r18
     6cc:	90 83       	st	Z, r25
     6ce:	61 11       	cpse	r22, r1
     6d0:	0e 94 1a 03 	call	0x634	; 0x634 <ow_parasite_enable>
     6d4:	df bf       	out	0x3f, r29	; 63
     6d6:	85 e3       	ldi	r24, 0x35	; 53
     6d8:	8a 95       	dec	r24
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <ow_bit_io_intern+0x7e>
     6dc:	00 00       	nop
     6de:	8c 2f       	mov	r24, r28
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     6e6:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <OW_OUT>
     6ea:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <OW_OUT+0x1>
     6ee:	90 81       	ld	r25, Z
     6f0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     6f4:	80 95       	com	r24
     6f6:	89 23       	and	r24, r25
     6f8:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     6fa:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     6fe:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     702:	90 81       	ld	r25, Z
     704:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     708:	89 2b       	or	r24, r25
     70a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70c:	8f e7       	ldi	r24, 0x7F	; 127
     70e:	97 e0       	ldi	r25, 0x07	; 7
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <ow_reset+0x2a>
     714:	00 c0       	rjmp	.+0      	; 0x716 <ow_reset+0x30>
     716:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     718:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     71a:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     71c:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     720:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     724:	90 81       	ld	r25, Z
     726:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     72a:	80 95       	com	r24
     72c:	89 23       	and	r24, r25
     72e:	80 83       	st	Z, r24
     730:	ef ef       	ldi	r30, 0xFF	; 255
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <ow_reset+0x4e>
     738:	00 c0       	rjmp	.+0      	; 0x73a <ow_reset+0x54>
     73a:	00 00       	nop
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     73c:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     740:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     744:	30 81       	ld	r19, Z
     746:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     74a:	2f bf       	out	0x3f, r18	; 63
     74c:	ef e7       	ldi	r30, 0x7F	; 127
     74e:	f6 e0       	ldi	r31, 0x06	; 6
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <ow_reset+0x6a>
     754:	00 c0       	rjmp	.+0      	; 0x756 <ow_reset+0x70>
     756:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     758:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     75c:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     760:	20 81       	ld	r18, Z
     762:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <OW_PIN_MASK>
     766:	92 23       	and	r25, r18
     768:	11 f0       	breq	.+4      	; 0x76e <ow_reset+0x88>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     76a:	83 23       	and	r24, r19
     76c:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     76e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err; //err=0 -sensor got job
}
     770:	08 95       	ret

00000772 <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
     772:	50 93 96 01 	sts	0x0196, r21	; 0x800196 <OW_DDR+0x1>
     776:	40 93 95 01 	sts	0x0195, r20	; 0x800195 <OW_DDR>
	OW_OUT=out;
     77a:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <OW_OUT+0x1>
     77e:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <OW_OUT>
	OW_IN=in;
     782:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <OW_IN+0x1>
     786:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <OW_IN>
	OW_PIN_MASK = (1 << pin);
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	01 c0       	rjmp	.+2      	; 0x790 <ow_set_bus+0x1e>
     78e:	88 0f       	add	r24, r24
     790:	2a 95       	dec	r18
     792:	ea f7       	brpl	.-6      	; 0x78e <ow_set_bus+0x1c>
     794:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <OW_PIN_MASK>
	ow_reset();
     798:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ow_reset>
     79c:	08 95       	ret

0000079e <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	81 70       	andi	r24, 0x01	; 1
     7a2:	0e 94 2d 03 	call	0x65a	; 0x65a <ow_bit_io_intern>
}
     7a6:	08 95       	ret

000007a8 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	c8 2f       	mov	r28, r24
     7ae:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     7b0:	8c 2f       	mov	r24, r28
     7b2:	81 70       	andi	r24, 0x01	; 1
     7b4:	0e 94 cf 03 	call	0x79e	; 0x79e <ow_bit_io>
		b >>= 1;
     7b8:	c6 95       	lsr	r28
		if( j ) {
     7ba:	81 11       	cpse	r24, r1
			b |= 0x80;
     7bc:	c0 68       	ori	r28, 0x80	; 128
     7be:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     7c0:	b9 f7       	brne	.-18     	; 0x7b0 <ow_byte_wr+0x8>
	
	return b;
}
     7c2:	8c 2f       	mov	r24, r28
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     7d0:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     7d2:	d1 30       	cpi	r29, 0x01	; 1
     7d4:	49 f0       	breq	.+18     	; 0x7e8 <ow_byte_wr_with_parasite_enable+0x1e>
			j = ow_bit_io_intern( b & 1, 0 );
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	8c 2f       	mov	r24, r28
     7da:	81 70       	andi	r24, 0x01	; 1
     7dc:	0e 94 2d 03 	call	0x65a	; 0x65a <ow_bit_io_intern>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
		}
		b >>= 1;
     7e0:	c6 95       	lsr	r28
		if( j ) {
     7e2:	81 11       	cpse	r24, r1
     7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <ow_byte_wr_with_parasite_enable+0x2e>
     7e6:	09 c0       	rjmp	.+18     	; 0x7fa <ow_byte_wr_with_parasite_enable+0x30>
	
	do {
		if ( i != 1 ) {
			j = ow_bit_io_intern( b & 1, 0 );
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	8c 2f       	mov	r24, r28
     7ec:	81 70       	andi	r24, 0x01	; 1
     7ee:	0e 94 2d 03 	call	0x65a	; 0x65a <ow_bit_io_intern>
		}
		b >>= 1;
     7f2:	c6 95       	lsr	r28
		if( j ) {
     7f4:	88 23       	and	r24, r24
     7f6:	19 f0       	breq	.+6      	; 0x7fe <ow_byte_wr_with_parasite_enable+0x34>
			b |= 0x80;
     7f8:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     7fa:	d1 50       	subi	r29, 0x01	; 1
     7fc:	51 f7       	brne	.-44     	; 0x7d2 <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     7fe:	8c 2f       	mov	r24, r28
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	e8 2e       	mov	r14, r24
     814:	eb 01       	movw	r28, r22
     816:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     818:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ow_reset>

	if( id ) {
     81c:	20 97       	sbiw	r28, 0x00	; 0
     81e:	69 f0       	breq	.+26     	; 0x83a <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     820:	85 e5       	ldi	r24, 0x55	; 85
     822:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_byte_wr>
     826:	8e 01       	movw	r16, r28
     828:	08 5f       	subi	r16, 0xF8	; 248
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     82c:	89 91       	ld	r24, Y+
     82e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_byte_wr>
			id++;
		} while( --i );
     832:	c0 17       	cp	r28, r16
     834:	d1 07       	cpc	r29, r17
     836:	d1 f7       	brne	.-12     	; 0x82c <ow_command_intern+0x26>
     838:	03 c0       	rjmp	.+6      	; 0x840 <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     83a:	8c ec       	ldi	r24, 0xCC	; 204
     83c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     840:	ff 20       	and	r15, r15
     842:	21 f0       	breq	.+8      	; 0x84c <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
     844:	8e 2d       	mov	r24, r14
     846:	0e 94 e5 03 	call	0x7ca	; 0x7ca <ow_byte_wr_with_parasite_enable>
     84a:	03 c0       	rjmp	.+6      	; 0x852 <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
     84c:	8e 2d       	mov	r24, r14
     84e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_byte_wr>
	}
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_byte_wr>
}
     866:	08 95       	ret

00000868 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	d8 2e       	mov	r13, r24
     878:	8b 01       	movw	r16, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     87a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ow_reset>
     87e:	81 11       	cpse	r24, r1
     880:	2b c0       	rjmp	.+86     	; 0x8d8 <ow_rom_search+0x70>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     882:	80 ef       	ldi	r24, 0xF0	; 240
     884:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     888:	e1 2c       	mov	r14, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     88a:	c0 e4       	ldi	r28, 0x40	; 64
     88c:	0f 2e       	mov	r0, r31
     88e:	f8 ef       	ldi	r31, 0xF8	; 248
     890:	ff 2e       	mov	r15, r31
     892:	f0 2d       	mov	r31, r0
     894:	fc 0e       	add	r15, r28
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 cf 03 	call	0x79e	; 0x79e <ow_bit_io>
     89c:	d8 2f       	mov	r29, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 cf 03 	call	0x79e	; 0x79e <ow_bit_io>
     8a4:	88 23       	and	r24, r24
     8a6:	19 f0       	breq	.+6      	; 0x8ae <ow_rom_search+0x46>
				if( b ) {               // 0b11
     8a8:	dd 23       	and	r29, r29
     8aa:	d1 f0       	breq	.+52     	; 0x8e0 <ow_rom_search+0x78>
     8ac:	17 c0       	rjmp	.+46     	; 0x8dc <ow_rom_search+0x74>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     8ae:	d1 11       	cpse	r29, r1
     8b0:	24 c0       	rjmp	.+72     	; 0x8fa <ow_rom_search+0x92>
					if( diff > i || ((*id & 1) && diff != i) ) {
     8b2:	cd 15       	cp	r28, r13
     8b4:	e8 f0       	brcs	.+58     	; 0x8f0 <ow_rom_search+0x88>
     8b6:	f8 01       	movw	r30, r16
     8b8:	80 81       	ld	r24, Z
     8ba:	80 ff       	sbrs	r24, 0
     8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <ow_rom_search+0x78>
     8be:	dc 12       	cpse	r13, r28
     8c0:	1a c0       	rjmp	.+52     	; 0x8f6 <ow_rom_search+0x8e>
     8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <ow_rom_search+0x78>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     8c4:	c1 50       	subi	r28, 0x01	; 1
			
		} while( --j );
     8c6:	cf 11       	cpse	r28, r15
     8c8:	e6 cf       	rjmp	.-52     	; 0x896 <ow_rom_search+0x2e>
		
		id++;                           // next byte
     8ca:	0f 5f       	subi	r16, 0xFF	; 255
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     8ce:	cf 2d       	mov	r28, r15
			
		} while( --j );
		
		id++;                           // next byte
	
	} while( i );
     8d0:	f1 10       	cpse	r15, r1
     8d2:	dc cf       	rjmp	.-72     	; 0x88c <ow_rom_search+0x24>
     8d4:	8e 2d       	mov	r24, r14
     8d6:	1a c0       	rjmp	.+52     	; 0x90c <__stack+0xd>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	18 c0       	rjmp	.+48     	; 0x90c <__stack+0xd>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     8dc:	8e ef       	ldi	r24, 0xFE	; 254
     8de:	16 c0       	rjmp	.+44     	; 0x90c <__stack+0xd>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 cf 03 	call	0x79e	; 0x79e <ow_bit_io>
			*id >>= 1;
     8e6:	f8 01       	movw	r30, r16
     8e8:	90 81       	ld	r25, Z
     8ea:	96 95       	lsr	r25
     8ec:	90 83       	st	Z, r25
     8ee:	ea cf       	rjmp	.-44     	; 0x8c4 <ow_rom_search+0x5c>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     8f0:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     8f2:	d1 e0       	ldi	r29, 0x01	; 1
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <ow_rom_search+0x92>
						next_diff = i;  // next pass 0
     8f6:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     8f8:	d1 e0       	ldi	r29, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     8fa:	8d 2f       	mov	r24, r29
     8fc:	0e 94 cf 03 	call	0x79e	; 0x79e <ow_bit_io>
			*id >>= 1;
     900:	f8 01       	movw	r30, r16
     902:	90 81       	ld	r25, Z
     904:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
     906:	90 68       	ori	r25, 0x80	; 128
     908:	90 83       	st	Z, r25
     90a:	dc cf       	rjmp	.-72     	; 0x8c4 <ow_rom_search+0x5c>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	08 95       	ret

0000091c <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	0e 94 03 04 	call	0x806	; 0x806 <ow_command_intern>
     922:	08 95       	ret

00000924 <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	0e 94 03 04 	call	0x806	; 0x806 <ow_command_intern>
     92a:	08 95       	ret

0000092c <search_sensors>:
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5)); //input
	PORTC |= (1 << PORTC4) | (1 << PORTC5); //pull up
}

void initGenerator(){
	DDRC |= (1 << PORTC4); //output
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	29 97       	sbiw	r28, 0x09	; 9
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	87 ee       	ldi	r24, 0xE7	; 231
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     948:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ow_reset>
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	89 87       	std	Y+9, r24	; 0x09
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	ce 01       	movw	r24, r28
     958:	09 96       	adiw	r24, 0x09	; 9
     95a:	0e 94 85 02 	call	0x50a	; 0x50a <DS18X20_find_sensor>
     95e:	89 85       	ldd	r24, Y+9	; 0x09
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	31 f4       	brne	.+12     	; 0x970 <search_sensors+0x44>
     964:	85 ed       	ldi	r24, 0xD5	; 213
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	15 c0       	rjmp	.+42     	; 0x99a <search_sensors+0x6e>
     970:	8e 3f       	cpi	r24, 0xFE	; 254
     972:	31 f4       	brne	.+12     	; 0x980 <search_sensors+0x54>
     974:	89 ec       	ldi	r24, 0xC9	; 201
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0d c0       	rjmp	.+26     	; 0x99a <search_sensors+0x6e>
     980:	fe 01       	movw	r30, r28
     982:	31 96       	adiw	r30, 0x01	; 1
     984:	a7 e9       	ldi	r26, 0x97	; 151
     986:	b1 e0       	ldi	r27, 0x01	; 1
     988:	9e 01       	movw	r18, r28
     98a:	27 5f       	subi	r18, 0xF7	; 247
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	81 91       	ld	r24, Z+
     990:	8d 93       	st	X+, r24
     992:	e2 17       	cp	r30, r18
     994:	f3 07       	cpc	r31, r19
     996:	d9 f7       	brne	.-10     	; 0x98e <search_sensors+0x62>
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	29 96       	adiw	r28, 0x09	; 9
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <__vector_11>:
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
     9ba:	af 93       	push	r26
     9bc:	bf 93       	push	r27
     9be:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timer1_millis>
     9c2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timer1_millis+0x1>
     9c6:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <timer1_millis+0x2>
     9ca:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <timer1_millis+0x3>
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	a1 1d       	adc	r26, r1
     9d2:	b1 1d       	adc	r27, r1
     9d4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timer1_millis>
     9d8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timer1_millis+0x1>
     9dc:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timer1_millis+0x2>
     9e0:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timer1_millis+0x3>
     9e4:	bf 91       	pop	r27
     9e6:	af 91       	pop	r26
     9e8:	9f 91       	pop	r25
     9ea:	8f 91       	pop	r24
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <__vector_6>:
     9f6:	1f 92       	push	r1
     9f8:	0f 92       	push	r0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	0f 92       	push	r0
     9fe:	11 24       	eor	r1, r1
     a00:	8f 93       	push	r24
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	a8 95       	wdr
     a08:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a0c:	88 61       	ori	r24, 0x18	; 24
     a0e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a12:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <err>
     a1e:	8f 91       	pop	r24
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <readTempForOnlyDS18b20>:
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ca e0       	ldi	r28, 0x0A	; 10
     a34:	07 e9       	ldi	r16, 0x97	; 151
     a36:	11 e0       	ldi	r17, 0x01	; 1
     a38:	a8 95       	wdr
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	0e 94 bd 02 	call	0x57a	; 0x57a <DS18X20_start_meas>
     a44:	d8 2f       	mov	r29, r24
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	8e e9       	ldi	r24, 0x9E	; 158
     a4a:	94 e2       	ldi	r25, 0x24	; 36
     a4c:	21 50       	subi	r18, 0x01	; 1
     a4e:	80 40       	sbci	r24, 0x00	; 0
     a50:	90 40       	sbci	r25, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <readTempForOnlyDS18b20+0x22>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <readTempForOnlyDS18b20+0x2c>
     a56:	00 00       	nop
     a58:	64 e4       	ldi	r22, 0x44	; 68
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	f8 01       	movw	r30, r16
     a5e:	80 81       	ld	r24, Z
     a60:	0e 94 df 02 	call	0x5be	; 0x5be <DS18X20_read_decicelsius_single>
     a64:	d1 11       	cpse	r29, r1
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <readTempForOnlyDS18b20+0x42>
     a68:	88 23       	and	r24, r24
     a6a:	71 f0       	breq	.+28     	; 0xa88 <readTempForOnlyDS18b20+0x5e>
     a6c:	ff ef       	ldi	r31, 0xFF	; 255
     a6e:	23 ec       	ldi	r18, 0xC3	; 195
     a70:	89 e0       	ldi	r24, 0x09	; 9
     a72:	f1 50       	subi	r31, 0x01	; 1
     a74:	20 40       	sbci	r18, 0x00	; 0
     a76:	80 40       	sbci	r24, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <readTempForOnlyDS18b20+0x48>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <readTempForOnlyDS18b20+0x52>
     a7c:	00 00       	nop
     a7e:	c1 50       	subi	r28, 0x01	; 1
     a80:	d9 f6       	brne	.-74     	; 0xa38 <readTempForOnlyDS18b20+0xe>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <err>
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <millis>:
     a92:	f8 94       	cli
     a94:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <timer1_millis>
     a98:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <timer1_millis+0x1>
     a9c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timer1_millis+0x2>
     aa0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timer1_millis+0x3>
     aa4:	78 94       	sei
     aa6:	08 95       	ret

00000aa8 <initWDT>:
     aa8:	98 e2       	ldi	r25, 0x28	; 40
     aaa:	88 e1       	ldi	r24, 0x18	; 24
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	a8 95       	wdr
     ab2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     abc:	a8 95       	wdr
     abe:	e0 e6       	ldi	r30, 0x60	; 96
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	80 64       	ori	r24, 0x40	; 64
     ac6:	80 83       	st	Z, r24
     ac8:	08 95       	ret

00000aca <disableWDT>:
     aca:	a8 95       	wdr
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	a8 95       	wdr
     ad2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ad6:	88 61       	ori	r24, 0x18	; 24
     ad8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     adc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	e0 e6       	ldi	r30, 0x60	; 96
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	8f 7b       	andi	r24, 0xBF	; 191
     aea:	80 83       	st	Z, r24
     aec:	08 95       	ret

00000aee <handleError>:
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	88 23       	and	r24, r24
     afa:	e9 f0       	breq	.+58     	; 0xb36 <handleError+0x48>
     afc:	18 2f       	mov	r17, r24
     afe:	c7 e4       	ldi	r28, 0x47	; 71
     b00:	d1 e0       	ldi	r29, 0x01	; 1
     b02:	0f 2e       	mov	r0, r31
     b04:	ff e0       	ldi	r31, 0x0F	; 15
     b06:	ff 2e       	mov	r15, r31
     b08:	f0 2d       	mov	r31, r0
     b0a:	00 e1       	ldi	r16, 0x10	; 16
     b0c:	0e 94 65 05 	call	0xaca	; 0xaca <disableWDT>
     b10:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <mode>
     b14:	8f b7       	in	r24, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	f8 82       	st	Y, r15
     b1a:	09 83       	std	Y+1, r16	; 0x01
     b1c:	0a 83       	std	Y+2, r16	; 0x02
     b1e:	1b 83       	std	Y+3, r17	; 0x03
     b20:	8f bf       	out	0x3f, r24	; 63
     b22:	2f ef       	ldi	r18, 0xFF	; 255
     b24:	87 ea       	ldi	r24, 0xA7	; 167
     b26:	91 e6       	ldi	r25, 0x61	; 97
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	80 40       	sbci	r24, 0x00	; 0
     b2c:	90 40       	sbci	r25, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <handleError+0x3a>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <handleError+0x44>
     b32:	00 00       	nop
     b34:	eb cf       	rjmp	.-42     	; 0xb0c <handleError+0x1e>
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	08 95       	ret

00000b42 <initButton>:
     b42:	87 b1       	in	r24, 0x07	; 7
     b44:	8f 7c       	andi	r24, 0xCF	; 207
     b46:	87 b9       	out	0x07, r24	; 7
     b48:	88 b1       	in	r24, 0x08	; 8
     b4a:	80 63       	ori	r24, 0x30	; 48
     b4c:	88 b9       	out	0x08, r24	; 8
     b4e:	08 95       	ret

00000b50 <initDisplay>:
}

void initDisplay(){
	DDRB |= 0b00111111;
     b50:	84 b1       	in	r24, 0x04	; 4
     b52:	8f 63       	ori	r24, 0x3F	; 63
     b54:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b01100000;
     b56:	8a b1       	in	r24, 0x0a	; 10
     b58:	80 66       	ori	r24, 0x60	; 96
     b5a:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0b00001111;
     b5c:	87 b1       	in	r24, 0x07	; 7
     b5e:	8f 60       	ori	r24, 0x0F	; 15
     b60:	87 b9       	out	0x07, r24	; 7
     b62:	08 95       	ret

00000b64 <initTimer1>:
}

void initTimer1(){
	TCNT1 = 0;
     b64:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b68:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1AH = (uint8_t)(CTC_MATCH_OVERFLOW >> 8);
     b6c:	87 e0       	ldi	r24, 0x07	; 7
     b6e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
     b72:	80 ed       	ldi	r24, 0xD0	; 208
     b74:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0;
     b78:	e0 e8       	ldi	r30, 0x80	; 128
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
	TCCR1A |= (0 << WGM11) | (0 << WGM10); //mode CTC
     b7e:	80 81       	ld	r24, Z
     b80:	80 83       	st	Z, r24
	TCCR1B |= (0 << WGM13) | (1 << WGM12) |(0 << CS12) | (1 << CS11) | (0 << CS10); //mode CTC, clk/8
     b82:	e1 e8       	ldi	r30, 0x81	; 129
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8a 60       	ori	r24, 0x0A	; 10
     b8a:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
     b8c:	ef e6       	ldi	r30, 0x6F	; 111
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 60       	ori	r24, 0x02	; 2
     b94:	80 83       	st	Z, r24
     b96:	08 95       	ret

00000b98 <initTimer0>:
}

void initTimer0(){
	TCNT0 = 0;
     b98:	16 bc       	out	0x26, r1	; 38
	OCR0A = 250; //4ms
     b9a:	8a ef       	ldi	r24, 0xFA	; 250
     b9c:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0;
     b9e:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01) | (0 << WGM00); //mode CTC
     ba0:	84 b5       	in	r24, 0x24	; 36
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0 << WGM02) |(1 << CS02) | (0 << CS01) | (0 << CS00); //mode CTC, clk/256
     ba6:	85 b5       	in	r24, 0x25	; 37
     ba8:	84 60       	ori	r24, 0x04	; 4
     baa:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A); //Output Compare A Match Interrupt Enable
     bac:	ee e6       	ldi	r30, 0x6E	; 110
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	80 83       	st	Z, r24
     bb6:	08 95       	ret

00000bb8 <getButtonState>:
}

void getButtonState(uint8_t but){
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
	uint8_t state = PINC & buttonMask[but];
     bc6:	16 b1       	in	r17, 0x06	; 6
     bc8:	c8 2f       	mov	r28, r24
     bca:	d0 e0       	ldi	r29, 0x00	; 0
     bcc:	fe 01       	movw	r30, r28
     bce:	e0 50       	subi	r30, 0x00	; 0
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	80 81       	ld	r24, Z
     bd4:	18 23       	and	r17, r24
	if (state ^ buttonDebounceState[but]){
     bd6:	fe 01       	movw	r30, r28
     bd8:	e0 5c       	subi	r30, 0xC0	; 192
     bda:	fe 4f       	sbci	r31, 0xFE	; 254
     bdc:	80 81       	ld	r24, Z
     bde:	81 17       	cp	r24, r17
     be0:	89 f0       	breq	.+34     	; 0xc04 <getButtonState+0x4c>
		buttonDebounceState[but] = state;
     be2:	fe 01       	movw	r30, r28
     be4:	e0 5c       	subi	r30, 0xC0	; 192
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	10 83       	st	Z, r17
		lastDebounceTime[but] = millis();
     bea:	0e 94 49 05 	call	0xa92	; 0xa92 <millis>
     bee:	fe 01       	movw	r30, r28
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	e8 5c       	subi	r30, 0xC8	; 200
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	60 83       	st	Z, r22
     bfe:	71 83       	std	Z+1, r23	; 0x01
     c00:	82 83       	std	Z+2, r24	; 0x02
     c02:	93 83       	std	Z+3, r25	; 0x03
	}
	if ((millis() - lastDebounceTime[but] > 39)){
     c04:	0e 94 49 05 	call	0xa92	; 0xa92 <millis>
     c08:	fe 01       	movw	r30, r28
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	e8 5c       	subi	r30, 0xC8	; 200
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	c0 80       	ld	r12, Z
     c18:	d1 80       	ldd	r13, Z+1	; 0x01
     c1a:	e2 80       	ldd	r14, Z+2	; 0x02
     c1c:	f3 80       	ldd	r15, Z+3	; 0x03
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	8c 19       	sub	r24, r12
     c24:	9d 09       	sbc	r25, r13
     c26:	ae 09       	sbc	r26, r14
     c28:	bf 09       	sbc	r27, r15
     c2a:	88 97       	sbiw	r24, 0x28	; 40
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	c8 f0       	brcs	.+50     	; 0xc64 <getButtonState+0xac>
		if (state ^ buttonPrefState[but]){
     c32:	fe 01       	movw	r30, r28
     c34:	ee 5f       	subi	r30, 0xFE	; 254
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	80 81       	ld	r24, Z
     c3a:	81 17       	cp	r24, r17
     c3c:	99 f0       	breq	.+38     	; 0xc64 <getButtonState+0xac>
			buttonPrefState[but] = state;
     c3e:	fe 01       	movw	r30, r28
     c40:	ee 5f       	subi	r30, 0xFE	; 254
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	10 83       	st	Z, r17
			buttonStateON[but] = (~state) & buttonMask[but];
     c46:	10 95       	com	r17
     c48:	fe 01       	movw	r30, r28
     c4a:	e0 50       	subi	r30, 0x00	; 0
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	80 81       	ld	r24, Z
     c50:	fe 01       	movw	r30, r28
     c52:	ea 5c       	subi	r30, 0xCA	; 202
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	91 2f       	mov	r25, r17
     c58:	98 23       	and	r25, r24
     c5a:	90 83       	st	Z, r25
			buttonStateOFF[but] = (~state) ^ buttonMask[but];
     c5c:	cc 5c       	subi	r28, 0xCC	; 204
     c5e:	de 4f       	sbci	r29, 0xFE	; 254
     c60:	18 27       	eor	r17, r24
     c62:	18 83       	st	Y, r17
		}
	}
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	08 95       	ret

00000c74 <setNumber>:

void setNumber(uint8_t num, uint8_t dig){
	if (num > MAXNUMBER-1 || dig>3) return;
     c74:	81 31       	cpi	r24, 0x11	; 17
     c76:	58 f5       	brcc	.+86     	; 0xcce <setNumber+0x5a>
     c78:	64 30       	cpi	r22, 0x04	; 4
     c7a:	48 f5       	brcc	.+82     	; 0xcce <setNumber+0x5a>
	uint8_t pb, pd;
	pb = number[num][0];
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	fc 01       	movw	r30, r24
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	e8 5f       	subi	r30, 0xF8	; 248
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	20 81       	ld	r18, Z
	if (dig == 2) pb |= 0b00000001;
     c8a:	62 30       	cpi	r22, 0x02	; 2
     c8c:	09 f4       	brne	.+2      	; 0xc90 <setNumber+0x1c>
     c8e:	21 60       	ori	r18, 0x01	; 1
	PORTB |= pb;
     c90:	35 b1       	in	r19, 0x05	; 5
     c92:	32 2b       	or	r19, r18
     c94:	35 b9       	out	0x05, r19	; 5
	PORTB &= pb | 0b11000000;
     c96:	35 b1       	in	r19, 0x05	; 5
     c98:	20 6c       	ori	r18, 0xC0	; 192
     c9a:	23 23       	and	r18, r19
     c9c:	25 b9       	out	0x05, r18	; 5
	pd = number[num][1];
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	fc 01       	movw	r30, r24
     ca4:	e8 5f       	subi	r30, 0xF8	; 248
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
	PORTD |= pd;
     caa:	9b b1       	in	r25, 0x0b	; 11
     cac:	98 2b       	or	r25, r24
     cae:	9b b9       	out	0x0b, r25	; 11
	PORTD &= pd | 0b10011111;
     cb0:	9b b1       	in	r25, 0x0b	; 11
     cb2:	8f 69       	ori	r24, 0x9F	; 159
     cb4:	89 23       	and	r24, r25
     cb6:	8b b9       	out	0x0b, r24	; 11
	PORTC &= 0b11110000;
     cb8:	88 b1       	in	r24, 0x08	; 8
     cba:	80 7f       	andi	r24, 0xF0	; 240
     cbc:	88 b9       	out	0x08, r24	; 8
	PORTC |= digit[dig];
     cbe:	98 b1       	in	r25, 0x08	; 8
     cc0:	e6 2f       	mov	r30, r22
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ec 5f       	subi	r30, 0xFC	; 252
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	80 81       	ld	r24, Z
     cca:	89 2b       	or	r24, r25
     ccc:	88 b9       	out	0x08, r24	; 8
     cce:	08 95       	ret

00000cd0 <__vector_14>:

ISR (TIMER1_COMPA_vect){
	timer1_millis++;
}

ISR(TIMER0_COMPA_vect){
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	2f 93       	push	r18
     cdc:	3f 93       	push	r19
     cde:	4f 93       	push	r20
     ce0:	5f 93       	push	r21
     ce2:	6f 93       	push	r22
     ce4:	7f 93       	push	r23
     ce6:	8f 93       	push	r24
     ce8:	9f 93       	push	r25
     cea:	af 93       	push	r26
     cec:	bf 93       	push	r27
     cee:	ef 93       	push	r30
     cf0:	ff 93       	push	r31
	counterDigit &= 0b00000011;
     cf2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counterDigit>
     cf6:	83 70       	andi	r24, 0x03	; 3
     cf8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <counterDigit>
	temp += 1;
     cfc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	if (!counterDigit){
     d06:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counterDigit>
     d0a:	81 11       	cpse	r24, r1
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <__vector_14+0x64>
		if (heatStatus == HEAT_ON && mode == MODE_NORMAL){
     d0e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <heatStatus>
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	79 f4       	brne	.+30     	; 0xd34 <__vector_14+0x64>
     d16:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	59 f4       	brne	.+22     	; 0xd34 <__vector_14+0x64>
			if (temp & 0b10000000) temperature[0] = DEFIS_HEAT;
     d1e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     d22:	88 23       	and	r24, r24
     d24:	24 f4       	brge	.+8      	; 0xd2e <__vector_14+0x5e>
     d26:	8b e0       	ldi	r24, 0x0B	; 11
     d28:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <temperature>
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <__vector_14+0x64>
			else temperature[0] = CLEAR;
     d2e:	8a e0       	ldi	r24, 0x0A	; 10
     d30:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <temperature>
		}
	}
	setNumber(temperature[counterDigit], counterDigit);
     d34:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <counterDigit>
     d38:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <counterDigit>
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	e9 5b       	subi	r30, 0xB9	; 185
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	80 81       	ld	r24, Z
     d44:	0e 94 3a 06 	call	0xc74	; 0xc74 <setNumber>
	counterDigit += 1;
     d48:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counterDigit>
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <counterDigit>
}
     d52:	ff 91       	pop	r31
     d54:	ef 91       	pop	r30
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <convertTempToDigit>:
	PORTD &= pd | 0b10011111;
	PORTC &= 0b11110000;
	PORTC |= digit[dig];
}

void convertTempToDigit(uint16_t t, uint8_t mode){
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	fc 01       	movw	r30, r24
     d80:	f6 2e       	mov	r15, r22
	uint16_t temp, d1, d2, d3, d4;
	temp = t;
	d4 = temp/1000;
     d82:	9c 01       	movw	r18, r24
     d84:	36 95       	lsr	r19
     d86:	27 95       	ror	r18
     d88:	36 95       	lsr	r19
     d8a:	27 95       	ror	r18
     d8c:	36 95       	lsr	r19
     d8e:	27 95       	ror	r18
     d90:	a5 ec       	ldi	r26, 0xC5	; 197
     d92:	b0 e2       	ldi	r27, 0x20	; 32
     d94:	0e 94 36 09 	call	0x126c	; 0x126c <__umulhisi3>
     d98:	ec 01       	movw	r28, r24
     d9a:	d2 95       	swap	r29
     d9c:	c2 95       	swap	r28
     d9e:	cf 70       	andi	r28, 0x0F	; 15
     da0:	cd 27       	eor	r28, r29
     da2:	df 70       	andi	r29, 0x0F	; 15
     da4:	cd 27       	eor	r28, r29
	temp = temp - d4*1000;
     da6:	28 ee       	ldi	r18, 0xE8	; 232
     da8:	33 e0       	ldi	r19, 0x03	; 3
     daa:	c2 9f       	mul	r28, r18
     dac:	c0 01       	movw	r24, r0
     dae:	c3 9f       	mul	r28, r19
     db0:	90 0d       	add	r25, r0
     db2:	d2 9f       	mul	r29, r18
     db4:	90 0d       	add	r25, r0
     db6:	11 24       	eor	r1, r1
     db8:	af 01       	movw	r20, r30
     dba:	48 1b       	sub	r20, r24
     dbc:	59 0b       	sbc	r21, r25
	if (t & 0x8000) d4 = 11;
     dbe:	ff 23       	and	r31, r31
     dc0:	14 f4       	brge	.+4      	; 0xdc6 <convertTempToDigit+0x52>
     dc2:	cb e0       	ldi	r28, 0x0B	; 11
     dc4:	d0 e0       	ldi	r29, 0x00	; 0
	d3 = temp/100;
     dc6:	9a 01       	movw	r18, r20
     dc8:	36 95       	lsr	r19
     dca:	27 95       	ror	r18
     dcc:	36 95       	lsr	r19
     dce:	27 95       	ror	r18
     dd0:	ab e7       	ldi	r26, 0x7B	; 123
     dd2:	b4 e1       	ldi	r27, 0x14	; 20
     dd4:	0e 94 36 09 	call	0x126c	; 0x126c <__umulhisi3>
     dd8:	8c 01       	movw	r16, r24
     dda:	16 95       	lsr	r17
     ddc:	07 95       	ror	r16
	temp = temp - d3*100;
     dde:	24 e6       	ldi	r18, 0x64	; 100
     de0:	20 9f       	mul	r18, r16
     de2:	c0 01       	movw	r24, r0
     de4:	21 9f       	mul	r18, r17
     de6:	90 0d       	add	r25, r0
     de8:	11 24       	eor	r1, r1
     dea:	48 1b       	sub	r20, r24
     dec:	59 0b       	sbc	r21, r25
	d2 = temp/10;
     dee:	9a 01       	movw	r18, r20
     df0:	ad ec       	ldi	r26, 0xCD	; 205
     df2:	bc ec       	ldi	r27, 0xCC	; 204
     df4:	0e 94 36 09 	call	0x126c	; 0x126c <__umulhisi3>
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
	d1 = temp - d2*10;
     e04:	bc 01       	movw	r22, r24
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	9c 01       	movw	r18, r24
     e0c:	22 0f       	add	r18, r18
     e0e:	33 1f       	adc	r19, r19
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	26 0f       	add	r18, r22
     e1a:	37 1f       	adc	r19, r23
     e1c:	42 1b       	sub	r20, r18
     e1e:	53 0b       	sbc	r21, r19
	switch (mode){
     e20:	22 e0       	ldi	r18, 0x02	; 2
     e22:	f2 16       	cp	r15, r18
     e24:	39 f0       	breq	.+14     	; 0xe34 <convertTempToDigit+0xc0>
     e26:	23 e0       	ldi	r18, 0x03	; 3
     e28:	f2 16       	cp	r15, r18
     e2a:	91 f0       	breq	.+36     	; 0xe50 <convertTempToDigit+0xdc>
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	f2 12       	cpse	r15, r18
     e30:	16 c0       	rjmp	.+44     	; 0xe5e <convertTempToDigit+0xea>
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <convertTempToDigit+0xc6>
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
     e34:	cd e0       	ldi	r28, 0x0D	; 13
     e36:	d0 e0       	ldi	r29, 0x00	; 0
     e38:	12 c0       	rjmp	.+36     	; 0xe5e <convertTempToDigit+0xea>
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
     e3a:	01 15       	cp	r16, r1
     e3c:	11 05       	cpc	r17, r1
     e3e:	19 f4       	brne	.+6      	; 0xe46 <convertTempToDigit+0xd2>
     e40:	20 97       	sbiw	r28, 0x00	; 0
     e42:	49 f0       	breq	.+18     	; 0xe56 <convertTempToDigit+0xe2>
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <convertTempToDigit+0xea>
			if (d4 == 0) d4 = CLEAR;
     e46:	20 97       	sbiw	r28, 0x00	; 0
     e48:	51 f4       	brne	.+20     	; 0xe5e <convertTempToDigit+0xea>
     e4a:	ca e0       	ldi	r28, 0x0A	; 10
     e4c:	d0 e0       	ldi	r29, 0x00	; 0
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <convertTempToDigit+0xea>
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
			break;
		case MODE_LOW:
			d4 = DEFIS_DOWN;
     e50:	ce e0       	ldi	r28, 0x0E	; 14
     e52:	d0 e0       	ldi	r29, 0x00	; 0
			break;
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <convertTempToDigit+0xea>
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
     e56:	ca e0       	ldi	r28, 0x0A	; 10
     e58:	d0 e0       	ldi	r29, 0x00	; 0
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
     e5a:	0a e0       	ldi	r16, 0x0A	; 10
     e5c:	10 e0       	ldi	r17, 0x00	; 0
			d4 = DEFIS_DOWN;
			break;
		default:
			break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e5e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e60:	f8 94       	cli
		temperature[0] = (uint8_t)d4;
     e62:	e7 e4       	ldi	r30, 0x47	; 71
     e64:	f1 e0       	ldi	r31, 0x01	; 1
     e66:	c0 83       	st	Z, r28
		temperature[1] = (uint8_t)d3;
     e68:	01 83       	std	Z+1, r16	; 0x01
		temperature[2] = (uint8_t)d2;
     e6a:	82 83       	std	Z+2, r24	; 0x02
		temperature[3] = (uint8_t)d1;
     e6c:	43 83       	std	Z+3, r20	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e6e:	9f bf       	out	0x3f, r25	; 63
	}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	08 95       	ret

00000e7c <main>:

int main(void)
{
	uint8_t nSensors, i;
		
	uart_init((UART_BAUD_SELECT((BAUD),F_CPU)));
     e7c:	87 e6       	ldi	r24, 0x67	; 103
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 b8 08 	call	0x1170	; 0x1170 <uart_init>
		
	#ifndef OW_ONE_BUS
		ow_set_bus(&PIND,&PORTD,&DDRD,PORTD7);
     e84:	27 e0       	ldi	r18, 0x07	; 7
     e86:	4a e2       	ldi	r20, 0x2A	; 42
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	6b e2       	ldi	r22, 0x2B	; 43
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	89 e2       	ldi	r24, 0x29	; 41
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 b9 03 	call	0x772	; 0x772 <ow_set_bus>
	#endif
		
	sei();
     e96:	78 94       	sei
		
	uart_puts_P( NEWLINESTR "DS18X20 1-Wire-Reader Demo by Martin Thomas" NEWLINESTR );
     e98:	8a eb       	ldi	r24, 0xBA	; 186
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
	uart_puts_P(            "-------------------------------------------" );
     ea0:	8e e8       	ldi	r24, 0x8E	; 142
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
		
	nSensors = search_sensors();
     ea8:	0e 94 96 04 	call	0x92c	; 0x92c <search_sensors>
     eac:	f8 2e       	mov	r15, r24
	if (nSensors == 0){
     eae:	81 11       	cpse	r24, r1
     eb0:	f1 c0       	rjmp	.+482    	; 0x1094 <main+0x218>
		err = ERROR_NO_SENSOR_START;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <err>
	}
	uart_put_int( (int)nSensors );
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 07 09 	call	0x120e	; 0x120e <uart_put_int>
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
     ec0:	8e e6       	ldi	r24, 0x6E	; 110
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     ec8:	5b c0       	rjmp	.+182    	; 0xf80 <main+0x104>
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
			uart_puts_P("# in Bus :");
     eca:	83 e6       	ldi	r24, 0x63	; 99
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
			uart_put_int( (int)i + 1);
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 07 09 	call	0x120e	; 0x120e <uart_put_int>
			uart_puts_P(" : ");
     ed8:	8f e5       	ldi	r24, 0x5F	; 95
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
     ee0:	68 e0       	ldi	r22, 0x08	; 8
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	c6 01       	movw	r24, r12
     ee6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DS18X20_show_id_uart>
			uart_puts_P( NEWLINESTR );
     eea:	8c e5       	ldi	r24, 0x5C	; 92
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     ef2:	0f 5f       	subi	r16, 0xFF	; 255
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	28 e0       	ldi	r18, 0x08	; 8
     ef8:	c2 0e       	add	r12, r18
     efa:	d1 1c       	adc	r13, r1
	}
	uart_put_int( (int)nSensors );
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
     efc:	0c 17       	cp	r16, r28
     efe:	1d 07       	cpc	r17, r29
     f00:	21 f7       	brne	.-56     	; 0xeca <main+0x4e>
     f02:	dc c0       	rjmp	.+440    	; 0x10bc <main+0x240>
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
		uart_puts_P( "Sensor# " );
     f04:	83 e5       	ldi	r24, 0x53	; 83
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
		uart_put_int( (int)i+1 );
     f0c:	c8 01       	movw	r24, r16
     f0e:	0e 94 07 09 	call	0x120e	; 0x120e <uart_put_int>
		uart_puts_P( " is a " );
     f12:	8c e4       	ldi	r24, 0x4C	; 76
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     f1a:	dc 2e       	mov	r13, r28
     f1c:	ed 2e       	mov	r14, r29
		if ( gSensorIDs[i][0] == DS18S20_FAMILY_CODE ) {
     f1e:	28 81       	ld	r18, Y
     f20:	20 31       	cpi	r18, 0x10	; 16
     f22:	29 f4       	brne	.+10     	; 0xf2e <main+0xb2>
			uart_puts_P( "DS18S20/DS1820" );
     f24:	8d e3       	ldi	r24, 0x3D	; 61
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     f2c:	0b c0       	rjmp	.+22     	; 0xf44 <main+0xc8>
		} else if ( gSensorIDs[i][0] == DS1822_FAMILY_CODE ) {
     f2e:	22 32       	cpi	r18, 0x22	; 34
     f30:	29 f4       	brne	.+10     	; 0xf3c <main+0xc0>
			uart_puts_P( "DS1822" );
     f32:	86 e3       	ldi	r24, 0x36	; 54
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <main+0xc8>
		}
		else {
			uart_puts_P( "DS18B20" );
     f3c:	8e e2       	ldi	r24, 0x2E	; 46
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
		}
		uart_puts_P( " which is " );
     f44:	83 e2       	ldi	r24, 0x23	; 35
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
		if ( DS18X20_get_power_status( &gSensorIDs[i][0] ) == DS18X20_POWER_PARASITE ) {
     f4c:	8d 2d       	mov	r24, r13
     f4e:	9e 2d       	mov	r25, r14
     f50:	0e 94 a7 02 	call	0x54e	; 0x54e <DS18X20_get_power_status>
     f54:	81 11       	cpse	r24, r1
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <main+0xe6>
			uart_puts_P( "parasite" );
     f58:	8a e1       	ldi	r24, 0x1A	; 26
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <main+0xee>
			} else {
			uart_puts_P( "externally" );
     f62:	8f e0       	ldi	r24, 0x0F	; 15
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
		}
		uart_puts_P( " powered" NEWLINESTR );
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
     f72:	0f 5f       	subi	r16, 0xFF	; 255
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	28 96       	adiw	r28, 0x08	; 8
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	80 0f       	add	r24, r16
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
     f7c:	8f 15       	cp	r24, r15
     f7e:	10 f2       	brcs	.-124    	; 0xf04 <main+0x88>
// 		if ( nSensors > 0 ) {
// 			eeprom_test();
// 		}
// 	#endif	
				
	initDisplay();
     f80:	0e 94 a8 05 	call	0xb50	; 0xb50 <initDisplay>
	initTimer0();
     f84:	0e 94 cc 05 	call	0xb98	; 0xb98 <initTimer0>
	initTimer1();
     f88:	0e 94 b2 05 	call	0xb64	; 0xb64 <initTimer1>
	initButton();
     f8c:	0e 94 a1 05 	call	0xb42	; 0xb42 <initButton>
	mode = MODE_NORMAL;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	93 ed       	ldi	r25, 0xD3	; 211
     f9a:	20 e3       	ldi	r18, 0x30	; 48
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	90 40       	sbci	r25, 0x00	; 0
     fa0:	20 40       	sbci	r18, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <main+0x120>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0x12a>
     fa6:	00 00       	nop
	_delay_ms(1000);
	initWDT();
     fa8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <initWDT>
		
    while (1) {
		handleError(err);	
		getButtonState(BUTTON1);	
		if (buttonStateON[BUTTON1]){
     fac:	c6 e3       	ldi	r28, 0x36	; 54
     fae:	d1 e0       	ldi	r29, 0x01	; 1
			buttonStateON[BUTTON1] = 0;
			mode += 1;
			if (mode == 4) mode = MODE_NORMAL;
     fb0:	11 e0       	ldi	r17, 0x01	; 1
// 				uart_puts_P( NEWLINESTR );
// 				uart_put_temp( decicelsius );
// 				uart_puts_P( NEWLINESTR );
			}
			if (decicelsius > ALARM_HEAT){
				err = ERROR_TEMP_OVERHEAT;
     fb2:	03 e0       	ldi	r16, 0x03	; 3
	mode = MODE_NORMAL;
	_delay_ms(1000);
	initWDT();
		
    while (1) {
		handleError(err);	
     fb4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <err>
     fb8:	0e 94 77 05 	call	0xaee	; 0xaee <handleError>
		getButtonState(BUTTON1);	
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <getButtonState>
		if (buttonStateON[BUTTON1]){
     fc2:	88 81       	ld	r24, Y
     fc4:	88 23       	and	r24, r24
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <main+0x164>
			buttonStateON[BUTTON1] = 0;
     fc8:	18 82       	st	Y, r1
			mode += 1;
     fca:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <mode>
			if (mode == 4) mode = MODE_NORMAL;
     fd4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	11 f4       	brne	.+4      	; 0xfe0 <main+0x164>
     fdc:	10 93 43 01 	sts	0x0143, r17	; 0x800143 <mode>
		}
		
		switch (mode){
     fe0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	09 f4       	brne	.+2      	; 0xfea <main+0x16e>
     fe8:	45 c0       	rjmp	.+138    	; 0x1074 <main+0x1f8>
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	09 f4       	brne	.+2      	; 0xff0 <main+0x174>
     fee:	4a c0       	rjmp	.+148    	; 0x1084 <main+0x208>
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	01 f7       	brne	.-64     	; 0xfb4 <main+0x138>
		case MODE_NORMAL:
			if (millis() - milliseconds_since > 999){
     ff4:	0e 94 49 05 	call	0xa92	; 0xa92 <millis>
     ff8:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <milliseconds_since>
     ffc:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <milliseconds_since+0x1>
    1000:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <milliseconds_since+0x2>
    1004:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <milliseconds_since+0x3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	8c 19       	sub	r24, r12
    100e:	9d 09       	sbc	r25, r13
    1010:	ae 09       	sbc	r26, r14
    1012:	bf 09       	sbc	r27, r15
    1014:	88 3e       	cpi	r24, 0xE8	; 232
    1016:	93 40       	sbci	r25, 0x03	; 3
    1018:	a1 05       	cpc	r26, r1
    101a:	b1 05       	cpc	r27, r1
    101c:	a8 f0       	brcs	.+42     	; 0x1048 <main+0x1cc>
				milliseconds_since = millis();
    101e:	0e 94 49 05 	call	0xa92	; 0xa92 <millis>
    1022:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <milliseconds_since>
    1026:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <milliseconds_since+0x1>
    102a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <milliseconds_since+0x2>
    102e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <milliseconds_since+0x3>
				readTempForOnlyDS18b20();
    1032:	0e 94 15 05 	call	0xa2a	; 0xa2a <readTempForOnlyDS18b20>
				convertTempToDigit(decicelsius, mode);
    1036:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode>
    103a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <decicelsius>
    103e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <decicelsius+0x1>
    1042:	0e 94 ba 06 	call	0xd74	; 0xd74 <convertTempToDigit>
				wdt_reset();
    1046:	a8 95       	wdr
// 				uart_puts_P( NEWLINESTR );
// 				uart_put_temp( decicelsius );
// 				uart_puts_P( NEWLINESTR );
			}
			if (decicelsius > ALARM_HEAT){
    1048:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <decicelsius>
    104c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <decicelsius+0x1>
    1050:	8d 32       	cpi	r24, 0x2D	; 45
    1052:	21 e0       	ldi	r18, 0x01	; 1
    1054:	92 07       	cpc	r25, r18
    1056:	14 f0       	brlt	.+4      	; 0x105c <main+0x1e0>
				err = ERROR_TEMP_OVERHEAT;
    1058:	00 93 2b 01 	sts	0x012B, r16	; 0x80012b <err>
			}
			if (decicelsius < limitLow){ //heat on
    105c:	8a 3f       	cpi	r24, 0xFA	; 250
    105e:	91 05       	cpc	r25, r1
    1060:	14 f4       	brge	.+4      	; 0x1066 <main+0x1ea>
				heatStatus = HEAT_ON;
    1062:	10 93 42 01 	sts	0x0142, r17	; 0x800142 <heatStatus>
			}
			if (decicelsius > limitHigh){ //cool on
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	91 40       	sbci	r25, 0x01	; 1
    106a:	0c f4       	brge	.+2      	; 0x106e <main+0x1f2>
    106c:	a3 cf       	rjmp	.-186    	; 0xfb4 <main+0x138>
				heatStatus = HEAT_OFF;
    106e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <heatStatus>
    1072:	a0 cf       	rjmp	.-192    	; 0xfb4 <main+0x138>
			if (decicelsius > limitLow && decicelsius < limitHigh){ //cool on
				
			}
			break;		
		case MODE_HIGH:
			convertTempToDigit(limitHigh, mode);
    1074:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode>
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 ba 06 	call	0xd74	; 0xd74 <convertTempToDigit>
			wdt_reset();
    1080:	a8 95       	wdr
			break;		
    1082:	98 cf       	rjmp	.-208    	; 0xfb4 <main+0x138>
		case MODE_LOW:
			convertTempToDigit(limitLow, mode);
    1084:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode>
    1088:	8a ef       	ldi	r24, 0xFA	; 250
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 ba 06 	call	0xd74	; 0xd74 <convertTempToDigit>
			wdt_reset();
    1090:	a8 95       	wdr
			break;	
    1092:	90 cf       	rjmp	.-224    	; 0xfb4 <main+0x138>
		
	nSensors = search_sensors();
	if (nSensors == 0){
		err = ERROR_NO_SENSOR_START;
	}
	uart_put_int( (int)nSensors );
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 07 09 	call	0x120e	; 0x120e <uart_put_int>
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
    109a:	8e e6       	ldi	r24, 0x6E	; 110
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <uart_puts_p>
    10a2:	0f 2e       	mov	r0, r31
    10a4:	f7 e9       	ldi	r31, 0x97	; 151
    10a6:	cf 2e       	mov	r12, r31
    10a8:	f1 e0       	ldi	r31, 0x01	; 1
    10aa:	df 2e       	mov	r13, r31
    10ac:	f0 2d       	mov	r31, r0
    10ae:	cf ef       	ldi	r28, 0xFF	; 255
    10b0:	cf 0d       	add	r28, r15
    10b2:	d0 e0       	ldi	r29, 0x00	; 0
    10b4:	22 96       	adiw	r28, 0x02	; 2
    10b6:	01 e0       	ldi	r16, 0x01	; 1
    10b8:	10 e0       	ldi	r17, 0x00	; 0
    10ba:	07 cf       	rjmp	.-498    	; 0xeca <main+0x4e>
    10bc:	c7 e9       	ldi	r28, 0x97	; 151
    10be:	d1 e0       	ldi	r29, 0x01	; 1
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
    10c0:	01 e0       	ldi	r16, 0x01	; 1
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	1f cf       	rjmp	.-450    	; 0xf04 <main+0x88>

000010c6 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	2f 93       	push	r18
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    10da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    10de:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    10e2:	88 71       	andi	r24, 0x18	; 24
    10e4:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <UART_RxHead>
    10e8:	ef 5f       	subi	r30, 0xFF	; 255
    10ea:	ef 71       	andi	r30, 0x1F	; 31
    10ec:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <UART_RxTail>
    10f0:	e9 17       	cp	r30, r25
    10f2:	39 f0       	breq	.+14     	; 0x1102 <__vector_18+0x3c>
    10f4:	e0 93 4d 01 	sts	0x014D, r30	; 0x80014d <UART_RxHead>
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	e0 5b       	subi	r30, 0xB0	; 176
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	20 83       	st	Z, r18
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <__vector_18+0x3e>
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <UART_LastRxError>
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <__vector_19>:
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
    112e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <UART_TxHead>
    1132:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <UART_TxTail>
    1136:	98 17       	cp	r25, r24
    1138:	69 f0       	breq	.+26     	; 0x1154 <__vector_19+0x38>
    113a:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <UART_TxTail>
    113e:	ef 5f       	subi	r30, 0xFF	; 255
    1140:	ef 71       	andi	r30, 0x1F	; 31
    1142:	e0 93 4e 01 	sts	0x014E, r30	; 0x80014e <UART_TxTail>
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	e0 59       	subi	r30, 0x90	; 144
    114a:	fe 4f       	sbci	r31, 0xFE	; 254
    114c:	80 81       	ld	r24, Z
    114e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1152:	05 c0       	rjmp	.+10     	; 0x115e <__vector_19+0x42>
    1154:	e1 ec       	ldi	r30, 0xC1	; 193
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 7d       	andi	r24, 0xDF	; 223
    115c:	80 83       	st	Z, r24
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <uart_init>:
    1170:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_TxHead>
    1174:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <UART_TxTail>
    1178:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <UART_RxHead>
    117c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <UART_RxTail>
    1180:	99 23       	and	r25, r25
    1182:	24 f4       	brge	.+8      	; 0x118c <uart_init+0x1c>
    1184:	22 e0       	ldi	r18, 0x02	; 2
    1186:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    118a:	9f 77       	andi	r25, 0x7F	; 127
    118c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1190:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1194:	88 e9       	ldi	r24, 0x98	; 152
    1196:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    119a:	86 e0       	ldi	r24, 0x06	; 6
    119c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    11a0:	08 95       	ret

000011a2 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    11a2:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <UART_TxHead>
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ) {
    11aa:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <UART_TxTail>
    11ae:	29 17       	cp	r18, r25
    11b0:	e1 f3       	breq	.-8      	; 0x11aa <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    11b2:	e2 2f       	mov	r30, r18
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	e0 59       	subi	r30, 0x90	; 144
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    11bc:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    11c0:	e1 ec       	ldi	r30, 0xC1	; 193
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	80 62       	ori	r24, 0x20	; 32
    11c8:	80 83       	st	Z, r24
    11ca:	08 95       	ret

000011cc <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	ec 01       	movw	r28, r24
    while ( *s ) {
    11d2:	88 81       	ld	r24, Y
    11d4:	88 23       	and	r24, r24
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <uart_puts+0x18>
    11d8:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
    11da:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while ( *s ) {
    11de:	89 91       	ld	r24, Y+
    11e0:	81 11       	cpse	r24, r1
    11e2:	fb cf       	rjmp	.-10     	; 0x11da <uart_puts+0xe>
        uart_putc(*s++);
    }

}/* uart_puts */
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
    11ee:	ec 01       	movw	r28, r24
    11f0:	21 96       	adiw	r28, 0x01	; 1
    11f2:	fc 01       	movw	r30, r24
    11f4:	84 91       	lpm	r24, Z
    11f6:	88 23       	and	r24, r24
    11f8:	39 f0       	breq	.+14     	; 0x1208 <uart_puts_p+0x1e>
        uart_putc(c);
    11fa:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
    11fe:	fe 01       	movw	r30, r28
    1200:	84 91       	lpm	r24, Z
    1202:	21 96       	adiw	r28, 0x01	; 1
    1204:	81 11       	cpse	r24, r1
    1206:	f9 cf       	rjmp	.-14     	; 0x11fa <uart_puts_p+0x10>
        uart_putc(c);
    }

}/* uart_puts_p */
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <uart_put_int>:
**************************************************************************/
void uart_put_ulongint( const unsigned long int val )
{
	char buffer[15];
	uart_puts( utoa( val, buffer, 10 ) );
} /* uart_puti */
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	2a 97       	sbiw	r28, 0x0a	; 10
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	4a e0       	ldi	r20, 0x0A	; 10
    1224:	be 01       	movw	r22, r28
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	0e 94 45 09 	call	0x128a	; 0x128a <__itoa_ncheck>
    122e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <uart_puts>
    1232:	2a 96       	adiw	r28, 0x0a	; 10
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <uart_puthex_nibble>:
Input:    byte value
Returns:  none
**************************************************************************/
void uart_puthex_nibble(const unsigned char b)
{
	unsigned char  c = b & 0x0f;
    1244:	8f 70       	andi	r24, 0x0F	; 15
	if ( c > 9 ) { 
    1246:	8a 30       	cpi	r24, 0x0A	; 10
    1248:	10 f0       	brcs	.+4      	; 0x124e <uart_puthex_nibble+0xa>
		c += 'A'-10; 
    124a:	89 5c       	subi	r24, 0xC9	; 201
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <uart_puthex_nibble+0xc>
	}
	else {
		c += '0';
    124e:	80 5d       	subi	r24, 0xD0	; 208
	}
	uart_putc(c);
    1250:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <uart_putc>
    1254:	08 95       	ret

00001256 <uart_puthex_byte>:
Purpose:  transmit upper and lower nibble as ASCII-hex to UART
Input:    byte value
Returns:  none
**************************************************************************/
void uart_puthex_byte( const unsigned char  b )
{
    1256:	cf 93       	push	r28
    1258:	c8 2f       	mov	r28, r24
	uart_puthex_nibble( b >> 4 );
    125a:	82 95       	swap	r24
    125c:	8f 70       	andi	r24, 0x0F	; 15
    125e:	0e 94 22 09 	call	0x1244	; 0x1244 <uart_puthex_nibble>
	uart_puthex_nibble( b );
    1262:	8c 2f       	mov	r24, r28
    1264:	0e 94 22 09 	call	0x1244	; 0x1244 <uart_puthex_nibble>
} /* uart_puthex_byte */
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <__umulhisi3>:
    126c:	a2 9f       	mul	r26, r18
    126e:	b0 01       	movw	r22, r0
    1270:	b3 9f       	mul	r27, r19
    1272:	c0 01       	movw	r24, r0
    1274:	a3 9f       	mul	r26, r19
    1276:	70 0d       	add	r23, r0
    1278:	81 1d       	adc	r24, r1
    127a:	11 24       	eor	r1, r1
    127c:	91 1d       	adc	r25, r1
    127e:	b2 9f       	mul	r27, r18
    1280:	70 0d       	add	r23, r0
    1282:	81 1d       	adc	r24, r1
    1284:	11 24       	eor	r1, r1
    1286:	91 1d       	adc	r25, r1
    1288:	08 95       	ret

0000128a <__itoa_ncheck>:
    128a:	bb 27       	eor	r27, r27
    128c:	4a 30       	cpi	r20, 0x0A	; 10
    128e:	31 f4       	brne	.+12     	; 0x129c <__itoa_ncheck+0x12>
    1290:	99 23       	and	r25, r25
    1292:	22 f4       	brpl	.+8      	; 0x129c <__itoa_ncheck+0x12>
    1294:	bd e2       	ldi	r27, 0x2D	; 45
    1296:	90 95       	com	r25
    1298:	81 95       	neg	r24
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__utoa_common>

000012a0 <__utoa_ncheck>:
    12a0:	bb 27       	eor	r27, r27

000012a2 <__utoa_common>:
    12a2:	fb 01       	movw	r30, r22
    12a4:	55 27       	eor	r21, r21
    12a6:	aa 27       	eor	r26, r26
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	aa 1f       	adc	r26, r26
    12ae:	a4 17       	cp	r26, r20
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <__utoa_common+0x14>
    12b2:	a4 1b       	sub	r26, r20
    12b4:	83 95       	inc	r24
    12b6:	50 51       	subi	r21, 0x10	; 16
    12b8:	b9 f7       	brne	.-18     	; 0x12a8 <__utoa_common+0x6>
    12ba:	a0 5d       	subi	r26, 0xD0	; 208
    12bc:	aa 33       	cpi	r26, 0x3A	; 58
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <__utoa_common+0x20>
    12c0:	a9 5d       	subi	r26, 0xD9	; 217
    12c2:	a1 93       	st	Z+, r26
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	79 f7       	brne	.-34     	; 0x12a6 <__utoa_common+0x4>
    12c8:	b1 11       	cpse	r27, r1
    12ca:	b1 93       	st	Z+, r27
    12cc:	11 92       	st	Z+, r1
    12ce:	cb 01       	movw	r24, r22
    12d0:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <strrev>

000012d4 <strrev>:
    12d4:	dc 01       	movw	r26, r24
    12d6:	fc 01       	movw	r30, r24
    12d8:	67 2f       	mov	r22, r23
    12da:	71 91       	ld	r23, Z+
    12dc:	77 23       	and	r23, r23
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <strrev+0x4>
    12e0:	32 97       	sbiw	r30, 0x02	; 2
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <strrev+0x18>
    12e4:	7c 91       	ld	r23, X
    12e6:	6d 93       	st	X+, r22
    12e8:	70 83       	st	Z, r23
    12ea:	62 91       	ld	r22, -Z
    12ec:	ae 17       	cp	r26, r30
    12ee:	bf 07       	cpc	r27, r31
    12f0:	c8 f3       	brcs	.-14     	; 0x12e4 <strrev+0x10>
    12f2:	08 95       	ret

000012f4 <_exit>:
    12f4:	f8 94       	cli

000012f6 <__stop_program>:
    12f6:	ff cf       	rjmp	.-2      	; 0x12f6 <__stop_program>
