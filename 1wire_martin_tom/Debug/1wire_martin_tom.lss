
1wire_martin_tom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000142c  000014c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000142c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000075  0080012a  0080012a  000014ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d79  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001269  00000000  00000000  0000556d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e0b  00000000  00000000  000067d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008cc  00000000  00000000  000085e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bbc  00000000  00000000  00008eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000359d  00000000  00000000  00009a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000d009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
       4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      2c:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_11>
      30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      38:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_14>
      3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      48:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__vector_18>
      4c:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_19>
      50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	44 53       	subi	r20, 0x34	; 52
      6a:	31 38       	cpi	r19, 0x81	; 129
      6c:	58 32       	cpi	r21, 0x28	; 40
      6e:	30 5f       	subi	r19, 0xF0	; 240
      70:	73 74       	andi	r23, 0x43	; 67
      72:	61 72       	andi	r22, 0x21	; 33
      74:	74 5f       	subi	r23, 0xF4	; 244
      76:	6d 65       	ori	r22, 0x5D	; 93
      78:	61 73       	andi	r22, 0x31	; 49
      7a:	3a 20       	and	r3, r10
      7c:	53 68       	ori	r21, 0x83	; 131
      7e:	6f 72       	andi	r22, 0x2F	; 47
      80:	74 20       	and	r7, r4
      82:	43 69       	ori	r20, 0x93	; 147
      84:	72 63       	ori	r23, 0x32	; 50
      86:	75 69       	ori	r23, 0x95	; 149
      88:	74 21       	and	r23, r4
      8a:	0d 00       	.word	0x000d	; ????

0000008c <__c.2320>:
      8c:	20 43 52 43 20 4f 2e 4b 2e 20 00                     CRC O.K. .

00000097 <__c.2318>:
      97:	20 43 52 43 20 46 41 49 4c 20 00                     CRC FAIL .

000000a2 <__c.2313>:
      a2:	28 20 3f 20 29 00                                   ( ? ).

000000a8 <__c.2311>:
      a8:	28 32 32 29 00                                      (22).

000000ad <__c.2309>:
      ad:	28 31 38 42 29 00                                   (18B).

000000b3 <__c.2307>:
      b3:	28 31 38 53 29 00                                   (18S).

000000b9 <__c.2305>:
      b9:	20 00                                                .

000000bb <__c.2303>:
      bb:	53 4e 3a 20 00                                      SN: .

000000c0 <__c.2301>:
      c0:	43 52 43 3a 00                                      CRC:.

000000c5 <__c.2299>:
      c5:	46 43 3a 00                                         FC:.

000000c9 <__c.2509>:
      c9:	20 b0 43 00                                          .C.

000000cd <__c.2507>:
      cd:	20 64 65 63 69 b0 43 2c 20 00                        deci.C, .

000000d7 <__c.2496>:
      d7:	42 75 73 20 45 72 72 6f 72 0d 0a 00                 Bus Error...

000000e3 <__c.2493>:
      e3:	4e 6f 20 53 65 6e 73 6f 72 20 66 6f 75 6e 64 0d     No Sensor found.
      f3:	0a 00                                               ..

000000f5 <__c.2491>:
      f5:	0d 0a 53 63 61 6e 6e 69 6e 67 20 42 75 73 20 66     ..Scanning Bus f
     105:	6f 72 20 44 53 31 38 58 32 30 0d 0a 00              or DS18X20...

00000112 <__c.2456>:
     112:	0d 0a 00                                            ...

00000115 <__c.2454>:
     115:	0d 0a 00                                            ...

00000118 <__c.2448>:
     118:	20 70 6f 77 65 72 65 64 0d 0a 00                     powered...

00000123 <__c.2446>:
     123:	65 78 74 65 72 6e 61 6c 6c 79 00                    externally.

0000012e <__c.2444>:
     12e:	70 61 72 61 73 69 74 65 00                          parasite.

00000137 <__c.2442>:
     137:	20 77 68 69 63 68 20 69 73 20 00                     which is .

00000142 <__c.2440>:
     142:	44 53 31 38 42 32 30 00                             DS18B20.

0000014a <__c.2438>:
     14a:	44 53 31 38 32 32 00                                DS1822.

00000151 <__c.2436>:
     151:	44 53 31 38 53 32 30 2f 44 53 31 38 32 30 00        DS18S20/DS1820.

00000160 <__c.2434>:
     160:	20 69 73 20 61 20 00                                 is a .

00000167 <__c.2432>:
     167:	53 65 6e 73 6f 72 23 20 00                          Sensor# .

00000170 <__c.2427>:
     170:	0d 0a 00                                            ...

00000173 <__c.2425>:
     173:	20 3a 20 00                                          : .

00000177 <__c.2423>:
     177:	23 20 69 6e 20 42 75 73 20 3a 00                    # in Bus :.

00000182 <__c.2421>:
     182:	20 44 53 31 38 58 32 30 20 53 65 6e 73 6f 72 28      DS18X20 Sensor(
     192:	73 29 20 61 76 61 69 6c 61 62 6c 65 3a 0d 0a 00     s) available:...

000001a2 <__c.2419>:
     1a2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1b2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1c2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 -----------.

000001ce <__c.2417>:
     1ce:	0d 0a 44 53 31 38 58 32 30 20 31 2d 57 69 72 65     ..DS18X20 1-Wire
     1de:	2d 52 65 61 64 65 72 20 44 65 6d 6f 20 62 79 20     -Reader Demo by 
     1ee:	4d 61 72 74 69 6e 20 54 68 6f 6d 61 73 0d 0a 00     Martin Thomas...

000001fe <__ctors_end>:
     1fe:	11 24       	eor	r1, r1
     200:	1f be       	out	0x3f, r1	; 63
     202:	cf ef       	ldi	r28, 0xFF	; 255
     204:	d8 e0       	ldi	r29, 0x08	; 8
     206:	de bf       	out	0x3e, r29	; 62
     208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
     20a:	11 e0       	ldi	r17, 0x01	; 1
     20c:	a0 e0       	ldi	r26, 0x00	; 0
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	ec e2       	ldi	r30, 0x2C	; 44
     212:	f4 e1       	ldi	r31, 0x14	; 20
     214:	02 c0       	rjmp	.+4      	; 0x21a <__do_copy_data+0x10>
     216:	05 90       	lpm	r0, Z+
     218:	0d 92       	st	X+, r0
     21a:	aa 32       	cpi	r26, 0x2A	; 42
     21c:	b1 07       	cpc	r27, r17
     21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0xc>

00000220 <__do_clear_bss>:
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	aa e2       	ldi	r26, 0x2A	; 42
     224:	b1 e0       	ldi	r27, 0x01	; 1
     226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
     228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
     22a:	af 39       	cpi	r26, 0x9F	; 159
     22c:	b2 07       	cpc	r27, r18
     22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
     230:	0e 94 a3 07 	call	0xf46	; 0xf46 <main>
     234:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <_exit>

00000238 <__bad_interrupt>:
     238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     23c:	61 15       	cp	r22, r1
     23e:	71 05       	cpc	r23, r1
     240:	a9 f0       	breq	.+42     	; 0x26c <crc8+0x30>
     242:	fc 01       	movw	r30, r24
     244:	68 0f       	add	r22, r24
     246:	79 1f       	adc	r23, r25
     248:	80 e0       	ldi	r24, 0x00	; 0
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
     24a:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
     24c:	21 91       	ld	r18, Z+
     24e:	98 e0       	ldi	r25, 0x08	; 8
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
     250:	38 2f       	mov	r19, r24
     252:	32 27       	eor	r19, r18
     254:	30 ff       	sbrs	r19, 0
     256:	0c c0       	rjmp	.+24     	; 0x270 <crc8+0x34>
				crc = crc ^ CRC8POLY;
     258:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
     25a:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
     25c:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
     25e:	26 95       	lsr	r18
     260:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
     262:	b1 f7       	brne	.-20     	; 0x250 <crc8+0x14>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     264:	e6 17       	cp	r30, r22
     266:	f7 07       	cpc	r31, r23
     268:	89 f7       	brne	.-30     	; 0x24c <crc8+0x10>
     26a:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
     26c:	80 e0       	ldi	r24, 0x00	; 0
			bit_counter--;
		
		} while (bit_counter > 0);
	}
	
	return crc;
     26e:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
     270:	86 95       	lsr	r24
     272:	f5 cf       	rjmp	.-22     	; 0x25e <crc8+0x22>

00000274 <DS18X20_raw_to_decicelsius>:
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
	if ( ret == DS18X20_OK ) {
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
	}
	return ret;
}
     274:	fb 01       	movw	r30, r22
     276:	41 81       	ldd	r20, Z+1	; 0x01
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	54 2f       	mov	r21, r20
     27c:	44 27       	eor	r20, r20
     27e:	90 81       	ld	r25, Z
     280:	49 2b       	or	r20, r25
     282:	9a 01       	movw	r18, r20
     284:	80 31       	cpi	r24, 0x10	; 16
     286:	91 f4       	brne	.+36     	; 0x2ac <DS18X20_raw_to_decicelsius+0x38>
     288:	4e 7f       	andi	r20, 0xFE	; 254
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	44 0f       	add	r20, r20
     290:	55 1f       	adc	r21, r21
     292:	44 0f       	add	r20, r20
     294:	55 1f       	adc	r21, r21
     296:	96 81       	ldd	r25, Z+6	; 0x06
     298:	2c e0       	ldi	r18, 0x0C	; 12
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	29 1b       	sub	r18, r25
     29e:	31 09       	sbc	r19, r1
     2a0:	24 0f       	add	r18, r20
     2a2:	35 1f       	adc	r19, r21
     2a4:	33 23       	and	r19, r19
     2a6:	0c f0       	brlt	.+2      	; 0x2aa <DS18X20_raw_to_decicelsius+0x36>
     2a8:	5a c0       	rjmp	.+180    	; 0x35e <DS18X20_raw_to_decicelsius+0xea>
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DS18X20_raw_to_decicelsius+0x3c>
     2ac:	55 23       	and	r21, r21
     2ae:	2c f4       	brge	.+10     	; 0x2ba <DS18X20_raw_to_decicelsius+0x46>
     2b0:	31 95       	neg	r19
     2b2:	21 95       	neg	r18
     2b4:	31 09       	sbc	r19, r1
     2b6:	a1 e0       	ldi	r26, 0x01	; 1
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <DS18X20_raw_to_decicelsius+0x48>
     2ba:	a0 e0       	ldi	r26, 0x00	; 0
     2bc:	88 32       	cpi	r24, 0x28	; 40
     2be:	11 f0       	breq	.+4      	; 0x2c4 <DS18X20_raw_to_decicelsius+0x50>
     2c0:	82 32       	cpi	r24, 0x22	; 34
     2c2:	69 f4       	brne	.+26     	; 0x2de <DS18X20_raw_to_decicelsius+0x6a>
     2c4:	84 81       	ldd	r24, Z+4	; 0x04
     2c6:	80 76       	andi	r24, 0x60	; 96
     2c8:	80 32       	cpi	r24, 0x20	; 32
     2ca:	31 f0       	breq	.+12     	; 0x2d8 <DS18X20_raw_to_decicelsius+0x64>
     2cc:	80 34       	cpi	r24, 0x40	; 64
     2ce:	31 f0       	breq	.+12     	; 0x2dc <DS18X20_raw_to_decicelsius+0x68>
     2d0:	81 11       	cpse	r24, r1
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <DS18X20_raw_to_decicelsius+0x6a>
     2d4:	28 7f       	andi	r18, 0xF8	; 248
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <DS18X20_raw_to_decicelsius+0x6a>
     2d8:	2c 7f       	andi	r18, 0xFC	; 252
     2da:	01 c0       	rjmp	.+2      	; 0x2de <DS18X20_raw_to_decicelsius+0x6a>
     2dc:	2e 7f       	andi	r18, 0xFE	; 254
     2de:	a9 01       	movw	r20, r18
     2e0:	52 95       	swap	r21
     2e2:	42 95       	swap	r20
     2e4:	4f 70       	andi	r20, 0x0F	; 15
     2e6:	45 27       	eor	r20, r21
     2e8:	5f 70       	andi	r21, 0x0F	; 15
     2ea:	45 27       	eor	r20, r21
     2ec:	ba 01       	movw	r22, r20
     2ee:	66 0f       	add	r22, r22
     2f0:	77 1f       	adc	r23, r23
     2f2:	44 0f       	add	r20, r20
     2f4:	55 1f       	adc	r21, r21
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	44 0f       	add	r20, r20
     2fc:	55 1f       	adc	r21, r21
     2fe:	64 0f       	add	r22, r20
     300:	75 1f       	adc	r23, r21
     302:	2f 70       	andi	r18, 0x0F	; 15
     304:	33 27       	eor	r19, r19
     306:	c9 01       	movw	r24, r18
     308:	96 95       	lsr	r25
     30a:	98 2f       	mov	r25, r24
     30c:	88 27       	eor	r24, r24
     30e:	97 95       	ror	r25
     310:	87 95       	ror	r24
     312:	32 2f       	mov	r19, r18
     314:	22 27       	eor	r18, r18
     316:	33 0f       	add	r19, r19
     318:	82 0f       	add	r24, r18
     31a:	93 1f       	adc	r25, r19
     31c:	a1 11       	cpse	r26, r1
     31e:	14 c0       	rjmp	.+40     	; 0x348 <DS18X20_raw_to_decicelsius+0xd4>
     320:	9e 5f       	subi	r25, 0xFE	; 254
     322:	89 2f       	mov	r24, r25
     324:	99 27       	eor	r25, r25
     326:	86 95       	lsr	r24
     328:	86 95       	lsr	r24
     32a:	9c 01       	movw	r18, r24
     32c:	26 0f       	add	r18, r22
     32e:	37 1f       	adc	r19, r23
     330:	c9 01       	movw	r24, r18
     332:	8a 5d       	subi	r24, 0xDA	; 218
     334:	9d 4f       	sbci	r25, 0xFD	; 253
     336:	89 30       	cpi	r24, 0x09	; 9
     338:	97 40       	sbci	r25, 0x07	; 7
     33a:	18 f4       	brcc	.+6      	; 0x342 <DS18X20_raw_to_decicelsius+0xce>
     33c:	82 2f       	mov	r24, r18
     33e:	93 2f       	mov	r25, r19
     340:	08 95       	ret
     342:	80 ed       	ldi	r24, 0xD0	; 208
     344:	97 e0       	ldi	r25, 0x07	; 7
     346:	08 95       	ret
     348:	89 2f       	mov	r24, r25
     34a:	99 27       	eor	r25, r25
     34c:	86 95       	lsr	r24
     34e:	86 95       	lsr	r24
     350:	9c 01       	movw	r18, r24
     352:	26 0f       	add	r18, r22
     354:	37 1f       	adc	r19, r23
     356:	31 95       	neg	r19
     358:	21 95       	neg	r18
     35a:	31 09       	sbc	r19, r1
     35c:	e9 cf       	rjmp	.-46     	; 0x330 <DS18X20_raw_to_decicelsius+0xbc>
     35e:	f9 01       	movw	r30, r18
     360:	f2 95       	swap	r31
     362:	e2 95       	swap	r30
     364:	ef 70       	andi	r30, 0x0F	; 15
     366:	ef 27       	eor	r30, r31
     368:	ff 70       	andi	r31, 0x0F	; 15
     36a:	ef 27       	eor	r30, r31
     36c:	bf 01       	movw	r22, r30
     36e:	66 0f       	add	r22, r22
     370:	77 1f       	adc	r23, r23
     372:	ee 0f       	add	r30, r30
     374:	ff 1f       	adc	r31, r31
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	6e 0f       	add	r22, r30
     380:	7f 1f       	adc	r23, r31
     382:	a9 01       	movw	r20, r18
     384:	4f 70       	andi	r20, 0x0F	; 15
     386:	55 27       	eor	r21, r21
     388:	ca 01       	movw	r24, r20
     38a:	96 95       	lsr	r25
     38c:	98 2f       	mov	r25, r24
     38e:	88 27       	eor	r24, r24
     390:	97 95       	ror	r25
     392:	87 95       	ror	r24
     394:	54 2f       	mov	r21, r20
     396:	44 27       	eor	r20, r20
     398:	55 0f       	add	r21, r21
     39a:	84 0f       	add	r24, r20
     39c:	95 1f       	adc	r25, r21
     39e:	c0 cf       	rjmp	.-128    	; 0x320 <DS18X20_raw_to_decicelsius+0xac>

000003a0 <read_scratchpad>:
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	7b 01       	movw	r14, r22
     3ae:	04 2f       	mov	r16, r20
     3b0:	bc 01       	movw	r22, r24
     3b2:	8e eb       	ldi	r24, 0xBE	; 190
     3b4:	0e 94 0a 05 	call	0xa14	; 0xa14 <ow_command>
     3b8:	00 23       	and	r16, r16
     3ba:	69 f0       	breq	.+26     	; 0x3d6 <read_scratchpad+0x36>
     3bc:	e7 01       	movw	r28, r14
     3be:	01 50       	subi	r16, 0x01	; 1
     3c0:	10 e0       	ldi	r17, 0x00	; 0
     3c2:	0f 5f       	subi	r16, 0xFF	; 255
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
     3c6:	0e 0d       	add	r16, r14
     3c8:	1f 1d       	adc	r17, r15
     3ca:	0e 94 ac 04 	call	0x958	; 0x958 <ow_byte_rd>
     3ce:	89 93       	st	Y+, r24
     3d0:	c0 17       	cp	r28, r16
     3d2:	d1 07       	cpc	r29, r17
     3d4:	d1 f7       	brne	.-12     	; 0x3ca <read_scratchpad+0x2a>
     3d6:	69 e0       	ldi	r22, 0x09	; 9
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	c7 01       	movw	r24, r14
     3dc:	0e 94 1e 01 	call	0x23c	; 0x23c <crc8>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	08 95       	ret

000003f2 <DS18X20_show_id_uart>:
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	5c 01       	movw	r10, r24
     408:	7b 01       	movw	r14, r22
     40a:	61 15       	cp	r22, r1
     40c:	71 05       	cpc	r23, r1
     40e:	09 f4       	brne	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	4e c0       	rjmp	.+156    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     412:	8c 01       	movw	r16, r24
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	6b 01       	movw	r12, r22
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	c8 1a       	sub	r12, r24
     41e:	d1 08       	sbc	r13, r1
     420:	20 97       	sbiw	r28, 0x00	; 0
     422:	89 f4       	brne	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     424:	85 ec       	ldi	r24, 0xC5	; 197
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     42c:	f8 01       	movw	r30, r16
     42e:	80 81       	ld	r24, Z
     430:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_puthex_byte>
     434:	89 eb       	ldi	r24, 0xB9	; 185
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     43c:	f5 01       	movw	r30, r10
     43e:	80 81       	ld	r24, Z
     440:	80 31       	cpi	r24, 0x10	; 16
     442:	e1 f4       	brne	.+56     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     444:	16 c0       	rjmp	.+44     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     446:	cc 16       	cp	r12, r28
     448:	dd 06       	cpc	r13, r29
     44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44c:	4a c0       	rjmp	.+148    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     44e:	80 ec       	ldi	r24, 0xC0	; 192
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     456:	45 c0       	rjmp	.+138    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     458:	8b eb       	ldi	r24, 0xBB	; 187
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     460:	f8 01       	movw	r30, r16
     462:	80 81       	ld	r24, Z
     464:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_puthex_byte>
     468:	89 eb       	ldi	r24, 0xB9	; 185
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     470:	17 c0       	rjmp	.+46     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     472:	83 eb       	ldi	r24, 0xB3	; 179
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     47a:	12 c0       	rjmp	.+36     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     47c:	88 32       	cpi	r24, 0x28	; 40
     47e:	29 f4       	brne	.+10     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     480:	8d ea       	ldi	r24, 0xAD	; 173
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     488:	0b c0       	rjmp	.+22     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     48a:	82 32       	cpi	r24, 0x22	; 34
     48c:	29 f4       	brne	.+10     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     48e:	88 ea       	ldi	r24, 0xA8	; 168
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     498:	82 ea       	ldi	r24, 0xA2	; 162
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     4a0:	21 96       	adiw	r28, 0x01	; 1
     4a2:	0f 5f       	subi	r16, 0xFF	; 255
     4a4:	1f 4f       	sbci	r17, 0xFF	; 255
     4a6:	ec 16       	cp	r14, r28
     4a8:	fd 06       	cpc	r15, r29
     4aa:	09 f0       	breq	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	b9 cf       	rjmp	.-142    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     4ae:	68 e0       	ldi	r22, 0x08	; 8
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	c5 01       	movw	r24, r10
     4b4:	0e 94 1e 01 	call	0x23c	; 0x23c <crc8>
     4b8:	88 23       	and	r24, r24
     4ba:	29 f0       	breq	.+10     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4bc:	87 e9       	ldi	r24, 0x97	; 151
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     4c4:	12 c0       	rjmp	.+36     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4c6:	8c e8       	ldi	r24, 0x8C	; 140
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4d0:	f8 01       	movw	r30, r16
     4d2:	80 81       	ld	r24, Z
     4d4:	0e 94 9d 09 	call	0x133a	; 0x133a <uart_puthex_byte>
     4d8:	89 eb       	ldi	r24, 0xB9	; 185
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     4e0:	df cf       	rjmp	.-66     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4e2:	c1 30       	cpi	r28, 0x01	; 1
     4e4:	d1 05       	cpc	r29, r1
     4e6:	a1 f7       	brne	.-24     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4e8:	b7 cf       	rjmp	.-146    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	08 95       	ret

00000500 <DS18X20_find_sensor>:
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
     50a:	8b 01       	movw	r16, r22
     50c:	b8 01       	movw	r22, r16
     50e:	88 81       	ld	r24, Y
     510:	0e 94 b0 04 	call	0x960	; 0x960 <ow_rom_search>
     514:	88 83       	st	Y, r24
     516:	81 50       	subi	r24, 0x01	; 1
     518:	8d 3f       	cpi	r24, 0xFD	; 253
     51a:	50 f4       	brcc	.+20     	; 0x530 <DS18X20_find_sensor+0x30>
     51c:	f8 01       	movw	r30, r16
     51e:	80 81       	ld	r24, Z
     520:	88 32       	cpi	r24, 0x28	; 40
     522:	41 f0       	breq	.+16     	; 0x534 <DS18X20_find_sensor+0x34>
     524:	80 31       	cpi	r24, 0x10	; 16
     526:	41 f0       	breq	.+16     	; 0x538 <DS18X20_find_sensor+0x38>
     528:	82 32       	cpi	r24, 0x22	; 34
     52a:	81 f7       	brne	.-32     	; 0x50c <DS18X20_find_sensor+0xc>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	05 c0       	rjmp	.+10     	; 0x53a <DS18X20_find_sensor+0x3a>
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	03 c0       	rjmp	.+6      	; 0x53a <DS18X20_find_sensor+0x3a>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	01 c0       	rjmp	.+2      	; 0x53a <DS18X20_find_sensor+0x3a>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <DS18X20_get_power_status>:
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	0e 94 ef 03 	call	0x7de	; 0x7de <ow_reset>
     54e:	be 01       	movw	r22, r28
     550:	84 eb       	ldi	r24, 0xB4	; 180
     552:	0e 94 0a 05 	call	0xa14	; 0xa14 <ow_command>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 4b 04 	call	0x896	; 0x896 <ow_bit_io>
     55c:	c8 2f       	mov	r28, r24
     55e:	0e 94 ef 03 	call	0x7de	; 0x7de <ow_reset>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	c1 11       	cpse	r28, r1
     566:	01 c0       	rjmp	.+2      	; 0x56a <DS18X20_get_power_status+0x26>
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <DS18X20_start_meas>:
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	18 2f       	mov	r17, r24
     578:	eb 01       	movw	r28, r22
     57a:	0e 94 ef 03 	call	0x7de	; 0x7de <ow_reset>
     57e:	0e 94 8d 03 	call	0x71a	; 0x71a <ow_input_pin_state>
     582:	88 23       	and	r24, r24
     584:	71 f0       	breq	.+28     	; 0x5a2 <DS18X20_start_meas+0x32>
     586:	11 30       	cpi	r17, 0x01	; 1
     588:	31 f0       	breq	.+12     	; 0x596 <DS18X20_start_meas+0x26>
     58a:	be 01       	movw	r22, r28
     58c:	84 e4       	ldi	r24, 0x44	; 68
     58e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <ow_command_with_parasite_enable>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0b c0       	rjmp	.+22     	; 0x5ac <DS18X20_start_meas+0x3c>
     596:	be 01       	movw	r22, r28
     598:	84 e4       	ldi	r24, 0x44	; 68
     59a:	0e 94 0a 05 	call	0xa14	; 0xa14 <ow_command>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	05 c0       	rjmp	.+10     	; 0x5ac <DS18X20_start_meas+0x3c>
     5a2:	88 e6       	ldi	r24, 0x68	; 104
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	08 95       	ret

000005b4 <DS18X20_format_from_decicelsius>:
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	27 97       	sbiw	r28, 0x07	; 7
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	9c 01       	movw	r18, r24
     5d2:	7b 01       	movw	r14, r22
     5d4:	47 30       	cpi	r20, 0x07	; 7
     5d6:	08 f4       	brcc	.+2      	; 0x5da <DS18X20_format_from_decicelsius+0x26>
     5d8:	5e c0       	rjmp	.+188    	; 0x696 <DS18X20_format_from_decicelsius+0xe2>
     5da:	89 51       	subi	r24, 0x19	; 25
     5dc:	9c 4f       	sbci	r25, 0xFC	; 252
     5de:	87 3f       	cpi	r24, 0xF7	; 247
     5e0:	9a 42       	sbci	r25, 0x2A	; 42
     5e2:	08 f0       	brcs	.+2      	; 0x5e6 <DS18X20_format_from_decicelsius+0x32>
     5e4:	5a c0       	rjmp	.+180    	; 0x69a <DS18X20_format_from_decicelsius+0xe6>
     5e6:	33 23       	and	r19, r19
     5e8:	2c f4       	brge	.+10     	; 0x5f4 <DS18X20_format_from_decicelsius+0x40>
     5ea:	31 95       	neg	r19
     5ec:	21 95       	neg	r18
     5ee:	31 09       	sbc	r19, r1
     5f0:	01 e0       	ldi	r16, 0x01	; 1
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <DS18X20_format_from_decicelsius+0x42>
     5f4:	00 e0       	ldi	r16, 0x00	; 0
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	6a e0       	ldi	r22, 0x0A	; 10
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	c9 01       	movw	r24, r18
     5fe:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	91 0f       	add	r25, r17
     606:	e1 e0       	ldi	r30, 0x01	; 1
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	ec 0f       	add	r30, r28
     60c:	fd 1f       	adc	r31, r29
     60e:	e1 0f       	add	r30, r17
     610:	f1 1d       	adc	r31, r1
     612:	17 fd       	sbrc	r17, 7
     614:	fa 95       	dec	r31
     616:	80 5d       	subi	r24, 0xD0	; 208
     618:	80 83       	st	Z, r24
     61a:	26 2f       	mov	r18, r22
     61c:	37 2f       	mov	r19, r23
     61e:	19 2f       	mov	r17, r25
     620:	12 16       	cp	r1, r18
     622:	13 06       	cpc	r1, r19
     624:	4c f3       	brlt	.-46     	; 0x5f8 <DS18X20_format_from_decicelsius+0x44>
     626:	00 23       	and	r16, r16
     628:	59 f0       	breq	.+22     	; 0x640 <DS18X20_format_from_decicelsius+0x8c>
     62a:	8d e2       	ldi	r24, 0x2D	; 45
     62c:	fe 01       	movw	r30, r28
     62e:	e9 0f       	add	r30, r25
     630:	f1 1d       	adc	r31, r1
     632:	97 fd       	sbrc	r25, 7
     634:	fa 95       	dec	r31
     636:	81 83       	std	Z+1, r24	; 0x01
     638:	99 23       	and	r25, r25
     63a:	64 f4       	brge	.+24     	; 0x654 <DS18X20_format_from_decicelsius+0xa0>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	25 c0       	rjmp	.+74     	; 0x68a <DS18X20_format_from_decicelsius+0xd6>
     640:	8b e2       	ldi	r24, 0x2B	; 43
     642:	fe 01       	movw	r30, r28
     644:	e9 0f       	add	r30, r25
     646:	f1 1d       	adc	r31, r1
     648:	97 fd       	sbrc	r25, 7
     64a:	fa 95       	dec	r31
     64c:	81 83       	std	Z+1, r24	; 0x01
     64e:	f4 cf       	rjmp	.-24     	; 0x638 <DS18X20_format_from_decicelsius+0x84>
     650:	82 2f       	mov	r24, r18
     652:	02 c0       	rjmp	.+4      	; 0x658 <DS18X20_format_from_decicelsius+0xa4>
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	4e e2       	ldi	r20, 0x2E	; 46
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	28 0f       	add	r18, r24
     65c:	39 2f       	mov	r19, r25
     65e:	91 50       	subi	r25, 0x01	; 1
     660:	e1 e0       	ldi	r30, 0x01	; 1
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ec 0f       	add	r30, r28
     666:	fd 1f       	adc	r31, r29
     668:	e3 0f       	add	r30, r19
     66a:	f1 1d       	adc	r31, r1
     66c:	30 81       	ld	r19, Z
     66e:	f7 01       	movw	r30, r14
     670:	e8 0f       	add	r30, r24
     672:	f1 1d       	adc	r31, r1
     674:	30 83       	st	Z, r19
     676:	91 11       	cpse	r25, r1
     678:	06 c0       	rjmp	.+12     	; 0x686 <DS18X20_format_from_decicelsius+0xd2>
     67a:	8e 5f       	subi	r24, 0xFE	; 254
     67c:	f7 01       	movw	r30, r14
     67e:	e2 0f       	add	r30, r18
     680:	f1 1d       	adc	r31, r1
     682:	40 83       	st	Z, r20
     684:	e9 cf       	rjmp	.-46     	; 0x658 <DS18X20_format_from_decicelsius+0xa4>
     686:	99 23       	and	r25, r25
     688:	1c f7       	brge	.-58     	; 0x650 <DS18X20_format_from_decicelsius+0x9c>
     68a:	f7 01       	movw	r30, r14
     68c:	e2 0f       	add	r30, r18
     68e:	f1 1d       	adc	r31, r1
     690:	10 82       	st	Z, r1
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	03 c0       	rjmp	.+6      	; 0x69c <DS18X20_format_from_decicelsius+0xe8>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	01 c0       	rjmp	.+2      	; 0x69c <DS18X20_format_from_decicelsius+0xe8>
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	27 96       	adiw	r28, 0x07	; 7
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	08 95       	ret

000006b6 <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	29 97       	sbiw	r28, 0x09	; 9
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	08 2f       	mov	r16, r24
     6d4:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     6d6:	49 e0       	ldi	r20, 0x09	; 9
     6d8:	be 01       	movw	r22, r28
     6da:	6f 5f       	subi	r22, 0xFF	; 255
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <read_scratchpad>
     6e6:	18 2f       	mov	r17, r24
	if ( ret == DS18X20_OK ) {
     6e8:	81 11       	cpse	r24, r1
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <DS18X20_read_decicelsius_single+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
     6ec:	be 01       	movw	r22, r28
     6ee:	6f 5f       	subi	r22, 0xFF	; 255
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	80 2f       	mov	r24, r16
     6f4:	0e 94 3a 01 	call	0x274	; 0x274 <DS18X20_raw_to_decicelsius>
     6f8:	f7 01       	movw	r30, r14
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	80 83       	st	Z, r24
	}
	return ret;
}
     6fe:	81 2f       	mov	r24, r17
     700:	29 96       	adiw	r28, 0x09	; 9
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	08 95       	ret

0000071a <ow_input_pin_state>:

void ow_parasite_disable(void)
{
	OW_DIR_IN();
#if (!OW_USE_INTERNAL_PULLUP)
	OW_OUT_LOW();
     71a:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     71e:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     722:	90 81       	ld	r25, Z
     724:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     728:	89 23       	and	r24, r25
     72a:	08 95       	ret

0000072c <ow_parasite_enable>:
     72c:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <OW_OUT>
     730:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <OW_OUT+0x1>
     734:	90 81       	ld	r25, Z
     736:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     73a:	89 2b       	or	r24, r25
     73c:	80 83       	st	Z, r24
     73e:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     742:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     746:	90 81       	ld	r25, Z
     748:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     74c:	89 2b       	or	r24, r25
     74e:	80 83       	st	Z, r24
     750:	08 95       	ret

00000752 <ow_bit_io_intern>:
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	c8 2f       	mov	r28, r24
     758:	df b7       	in	r29, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     760:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     764:	90 81       	ld	r25, Z
     766:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     76a:	89 2b       	or	r24, r25
     76c:	80 83       	st	Z, r24
     76e:	8a e0       	ldi	r24, 0x0A	; 10
     770:	8a 95       	dec	r24
     772:	f1 f7       	brne	.-4      	; 0x770 <ow_bit_io_intern+0x1e>
     774:	00 c0       	rjmp	.+0      	; 0x776 <ow_bit_io_intern+0x24>
     776:	cc 23       	and	r28, r28
     778:	51 f0       	breq	.+20     	; 0x78e <ow_bit_io_intern+0x3c>
     77a:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     77e:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     782:	90 81       	ld	r25, Z
     784:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     788:	80 95       	com	r24
     78a:	89 23       	and	r24, r25
     78c:	80 83       	st	Z, r24
     78e:	85 e4       	ldi	r24, 0x45	; 69
     790:	8a 95       	dec	r24
     792:	f1 f7       	brne	.-4      	; 0x790 <ow_bit_io_intern+0x3e>
     794:	00 00       	nop
     796:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     79a:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     79e:	90 81       	ld	r25, Z
     7a0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     7a4:	89 23       	and	r24, r25
     7a6:	09 f4       	brne	.+2      	; 0x7aa <ow_bit_io_intern+0x58>
     7a8:	c0 e0       	ldi	r28, 0x00	; 0
     7aa:	85 ee       	ldi	r24, 0xE5	; 229
     7ac:	8a 95       	dec	r24
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <ow_bit_io_intern+0x5a>
     7b0:	00 00       	nop
     7b2:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     7b6:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     7ba:	90 81       	ld	r25, Z
     7bc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     7c0:	80 95       	com	r24
     7c2:	89 23       	and	r24, r25
     7c4:	80 83       	st	Z, r24
     7c6:	61 11       	cpse	r22, r1
     7c8:	0e 94 96 03 	call	0x72c	; 0x72c <ow_parasite_enable>
     7cc:	df bf       	out	0x3f, r29	; 63
     7ce:	85 e3       	ldi	r24, 0x35	; 53
     7d0:	8a 95       	dec	r24
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <ow_bit_io_intern+0x7e>
     7d4:	00 00       	nop
     7d6:	8c 2f       	mov	r24, r28
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     7de:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <OW_OUT>
     7e2:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <OW_OUT+0x1>
     7e6:	90 81       	ld	r25, Z
     7e8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     7ec:	80 95       	com	r24
     7ee:	89 23       	and	r24, r25
     7f0:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     7f2:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     7f6:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     7fa:	90 81       	ld	r25, Z
     7fc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     800:	89 2b       	or	r24, r25
     802:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     804:	8f e7       	ldi	r24, 0x7F	; 127
     806:	97 e0       	ldi	r25, 0x07	; 7
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <ow_reset+0x2a>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <ow_reset+0x30>
     80e:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     810:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     812:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     814:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_DDR>
     818:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_DDR+0x1>
     81c:	90 81       	ld	r25, Z
     81e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
     822:	80 95       	com	r24
     824:	89 23       	and	r24, r25
     826:	80 83       	st	Z, r24
     828:	ef ef       	ldi	r30, 0xFF	; 255
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <ow_reset+0x4e>
     830:	00 c0       	rjmp	.+0      	; 0x832 <ow_reset+0x54>
     832:	00 00       	nop
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     834:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     838:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     83c:	90 81       	ld	r25, Z
     83e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <OW_PIN_MASK>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     842:	2f bf       	out	0x3f, r18	; 63
     844:	ef e7       	ldi	r30, 0x7F	; 127
     846:	f6 e0       	ldi	r31, 0x06	; 6
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <ow_reset+0x6a>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <ow_reset+0x70>
     84e:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     850:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <OW_IN>
     854:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <OW_IN+0x1>
     858:	30 81       	ld	r19, Z
     85a:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <OW_PIN_MASK>
     85e:	23 23       	and	r18, r19
     860:	11 f0       	breq	.+4      	; 0x866 <ow_reset+0x88>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     862:	89 23       	and	r24, r25
     864:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     866:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err; //err=0 -sensor got job
}
     868:	08 95       	ret

0000086a <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
     86a:	50 93 96 01 	sts	0x0196, r21	; 0x800196 <OW_DDR+0x1>
     86e:	40 93 95 01 	sts	0x0195, r20	; 0x800195 <OW_DDR>
	OW_OUT=out;
     872:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <OW_OUT+0x1>
     876:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <OW_OUT>
	OW_IN=in;
     87a:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <OW_IN+0x1>
     87e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <OW_IN>
	OW_PIN_MASK = (1 << pin);
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	01 c0       	rjmp	.+2      	; 0x888 <ow_set_bus+0x1e>
     886:	88 0f       	add	r24, r24
     888:	2a 95       	dec	r18
     88a:	ea f7       	brpl	.-6      	; 0x886 <ow_set_bus+0x1c>
     88c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <OW_PIN_MASK>
	ow_reset();
     890:	0e 94 ef 03 	call	0x7de	; 0x7de <ow_reset>
     894:	08 95       	ret

00000896 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	81 70       	andi	r24, 0x01	; 1
     89a:	0e 94 a9 03 	call	0x752	; 0x752 <ow_bit_io_intern>
}
     89e:	08 95       	ret

000008a0 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	c8 2f       	mov	r28, r24
     8a6:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     8a8:	8c 2f       	mov	r24, r28
     8aa:	81 70       	andi	r24, 0x01	; 1
     8ac:	0e 94 4b 04 	call	0x896	; 0x896 <ow_bit_io>
		b >>= 1;
     8b0:	c6 95       	lsr	r28
		if( j ) {
     8b2:	81 11       	cpse	r24, r1
			b |= 0x80;
     8b4:	c0 68       	ori	r28, 0x80	; 128
     8b6:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     8b8:	b9 f7       	brne	.-18     	; 0x8a8 <ow_byte_wr+0x8>
	
	return b;
}
     8ba:	8c 2f       	mov	r24, r28
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     8c8:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     8ca:	d1 30       	cpi	r29, 0x01	; 1
     8cc:	49 f0       	breq	.+18     	; 0x8e0 <ow_byte_wr_with_parasite_enable+0x1e>
			j = ow_bit_io_intern( b & 1, 0 );
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	8c 2f       	mov	r24, r28
     8d2:	81 70       	andi	r24, 0x01	; 1
     8d4:	0e 94 a9 03 	call	0x752	; 0x752 <ow_bit_io_intern>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
		}
		b >>= 1;
     8d8:	c6 95       	lsr	r28
		if( j ) {
     8da:	81 11       	cpse	r24, r1
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <ow_byte_wr_with_parasite_enable+0x2e>
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <ow_byte_wr_with_parasite_enable+0x30>
	
	do {
		if ( i != 1 ) {
			j = ow_bit_io_intern( b & 1, 0 );
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	8c 2f       	mov	r24, r28
     8e4:	81 70       	andi	r24, 0x01	; 1
     8e6:	0e 94 a9 03 	call	0x752	; 0x752 <ow_bit_io_intern>
		}
		b >>= 1;
     8ea:	c6 95       	lsr	r28
		if( j ) {
     8ec:	88 23       	and	r24, r24
     8ee:	19 f0       	breq	.+6      	; 0x8f6 <ow_byte_wr_with_parasite_enable+0x34>
			b |= 0x80;
     8f0:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     8f2:	d1 50       	subi	r29, 0x01	; 1
     8f4:	51 f7       	brne	.-44     	; 0x8ca <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     8f6:	8c 2f       	mov	r24, r28
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	e8 2e       	mov	r14, r24
     90c:	eb 01       	movw	r28, r22
     90e:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     910:	0e 94 ef 03 	call	0x7de	; 0x7de <ow_reset>

	if( id ) {
     914:	20 97       	sbiw	r28, 0x00	; 0
     916:	69 f0       	breq	.+26     	; 0x932 <__stack+0x33>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     918:	85 e5       	ldi	r24, 0x55	; 85
     91a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ow_byte_wr>
     91e:	8e 01       	movw	r16, r28
     920:	08 5f       	subi	r16, 0xF8	; 248
     922:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     924:	89 91       	ld	r24, Y+
     926:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ow_byte_wr>
			id++;
		} while( --i );
     92a:	c0 17       	cp	r28, r16
     92c:	d1 07       	cpc	r29, r17
     92e:	d1 f7       	brne	.-12     	; 0x924 <__stack+0x25>
     930:	03 c0       	rjmp	.+6      	; 0x938 <__stack+0x39>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     932:	8c ec       	ldi	r24, 0xCC	; 204
     934:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     938:	ff 20       	and	r15, r15
     93a:	21 f0       	breq	.+8      	; 0x944 <__stack+0x45>
		ow_byte_wr_with_parasite_enable( command );
     93c:	8e 2d       	mov	r24, r14
     93e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ow_byte_wr_with_parasite_enable>
     942:	03 c0       	rjmp	.+6      	; 0x94a <__stack+0x4b>
	} else {
		ow_byte_wr( command );
     944:	8e 2d       	mov	r24, r14
     946:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ow_byte_wr>
	}
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	08 95       	ret

00000958 <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ow_byte_wr>
}
     95e:	08 95       	ret

00000960 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	d8 2e       	mov	r13, r24
     970:	8b 01       	movw	r16, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     972:	0e 94 ef 03 	call	0x7de	; 0x7de <ow_reset>
     976:	81 11       	cpse	r24, r1
     978:	2b c0       	rjmp	.+86     	; 0x9d0 <ow_rom_search+0x70>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     97a:	80 ef       	ldi	r24, 0xF0	; 240
     97c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     980:	e1 2c       	mov	r14, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     982:	c0 e4       	ldi	r28, 0x40	; 64
     984:	0f 2e       	mov	r0, r31
     986:	f8 ef       	ldi	r31, 0xF8	; 248
     988:	ff 2e       	mov	r15, r31
     98a:	f0 2d       	mov	r31, r0
     98c:	fc 0e       	add	r15, r28
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 4b 04 	call	0x896	; 0x896 <ow_bit_io>
     994:	d8 2f       	mov	r29, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 4b 04 	call	0x896	; 0x896 <ow_bit_io>
     99c:	88 23       	and	r24, r24
     99e:	19 f0       	breq	.+6      	; 0x9a6 <ow_rom_search+0x46>
				if( b ) {               // 0b11
     9a0:	dd 23       	and	r29, r29
     9a2:	d1 f0       	breq	.+52     	; 0x9d8 <ow_rom_search+0x78>
     9a4:	17 c0       	rjmp	.+46     	; 0x9d4 <ow_rom_search+0x74>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     9a6:	d1 11       	cpse	r29, r1
     9a8:	24 c0       	rjmp	.+72     	; 0x9f2 <ow_rom_search+0x92>
					if( diff > i || ((*id & 1) && diff != i) ) {
     9aa:	cd 15       	cp	r28, r13
     9ac:	e8 f0       	brcs	.+58     	; 0x9e8 <ow_rom_search+0x88>
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 81       	ld	r24, Z
     9b2:	80 ff       	sbrs	r24, 0
     9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <ow_rom_search+0x78>
     9b6:	cd 11       	cpse	r28, r13
     9b8:	1a c0       	rjmp	.+52     	; 0x9ee <ow_rom_search+0x8e>
     9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <ow_rom_search+0x78>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     9bc:	c1 50       	subi	r28, 0x01	; 1
			
		} while( --j );
     9be:	fc 12       	cpse	r15, r28
     9c0:	e6 cf       	rjmp	.-52     	; 0x98e <ow_rom_search+0x2e>
		
		id++;                           // next byte
     9c2:	0f 5f       	subi	r16, 0xFF	; 255
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     9c6:	cf 2d       	mov	r28, r15
			
		} while( --j );
		
		id++;                           // next byte
	
	} while( i );
     9c8:	f1 10       	cpse	r15, r1
     9ca:	dc cf       	rjmp	.-72     	; 0x984 <ow_rom_search+0x24>
     9cc:	8e 2d       	mov	r24, r14
     9ce:	1a c0       	rjmp	.+52     	; 0xa04 <ow_rom_search+0xa4>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	18 c0       	rjmp	.+48     	; 0xa04 <ow_rom_search+0xa4>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     9d4:	8e ef       	ldi	r24, 0xFE	; 254
     9d6:	16 c0       	rjmp	.+44     	; 0xa04 <ow_rom_search+0xa4>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 4b 04 	call	0x896	; 0x896 <ow_bit_io>
			*id >>= 1;
     9de:	f8 01       	movw	r30, r16
     9e0:	90 81       	ld	r25, Z
     9e2:	96 95       	lsr	r25
     9e4:	90 83       	st	Z, r25
     9e6:	ea cf       	rjmp	.-44     	; 0x9bc <ow_rom_search+0x5c>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     9e8:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     9ea:	d1 e0       	ldi	r29, 0x01	; 1
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <ow_rom_search+0x92>
						next_diff = i;  // next pass 0
     9ee:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     9f0:	d1 e0       	ldi	r29, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     9f2:	8d 2f       	mov	r24, r29
     9f4:	0e 94 4b 04 	call	0x896	; 0x896 <ow_bit_io>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
     9f8:	f8 01       	movw	r30, r16
     9fa:	90 81       	ld	r25, Z
     9fc:	96 95       	lsr	r25
     9fe:	90 68       	ori	r25, 0x80	; 128
     a00:	90 83       	st	Z, r25
     a02:	dc cf       	rjmp	.-72     	; 0x9bc <ow_rom_search+0x5c>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	08 95       	ret

00000a14 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	0e 94 7f 04 	call	0x8fe	; 0x8fe <ow_command_intern>
     a1a:	08 95       	ret

00000a1c <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <ow_command_intern>
     a22:	08 95       	ret

00000a24 <search_sensors>:
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5)); //input
	PORTC |= (1 << PORTC4) | (1 << PORTC5); //pull up
}

void initGenerator(){
	DDRC |= (1 << PORTC4); //output
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	29 97       	sbiw	r28, 0x09	; 9
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	85 ef       	ldi	r24, 0xF5	; 245
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     a40:	0e 94 ef 03 	call	0x7de	; 0x7de <ow_reset>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	89 87       	std	Y+9, r24	; 0x09
     a48:	be 01       	movw	r22, r28
     a4a:	6f 5f       	subi	r22, 0xFF	; 255
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	ce 01       	movw	r24, r28
     a50:	09 96       	adiw	r24, 0x09	; 9
     a52:	0e 94 80 02 	call	0x500	; 0x500 <DS18X20_find_sensor>
     a56:	89 85       	ldd	r24, Y+9	; 0x09
     a58:	8f 3f       	cpi	r24, 0xFF	; 255
     a5a:	31 f4       	brne	.+12     	; 0xa68 <search_sensors+0x44>
     a5c:	83 ee       	ldi	r24, 0xE3	; 227
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	15 c0       	rjmp	.+42     	; 0xa92 <search_sensors+0x6e>
     a68:	8e 3f       	cpi	r24, 0xFE	; 254
     a6a:	31 f4       	brne	.+12     	; 0xa78 <search_sensors+0x54>
     a6c:	87 ed       	ldi	r24, 0xD7	; 215
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0d c0       	rjmp	.+26     	; 0xa92 <search_sensors+0x6e>
     a78:	fe 01       	movw	r30, r28
     a7a:	31 96       	adiw	r30, 0x01	; 1
     a7c:	a7 e9       	ldi	r26, 0x97	; 151
     a7e:	b1 e0       	ldi	r27, 0x01	; 1
     a80:	9e 01       	movw	r18, r28
     a82:	27 5f       	subi	r18, 0xF7	; 247
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	81 91       	ld	r24, Z+
     a88:	8d 93       	st	X+, r24
     a8a:	2e 17       	cp	r18, r30
     a8c:	3f 07       	cpc	r19, r31
     a8e:	d9 f7       	brne	.-10     	; 0xa86 <search_sensors+0x62>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	29 96       	adiw	r28, 0x09	; 9
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <uart_put_temp>:
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	2a 97       	sbiw	r28, 0x0a	; 10
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	8c 01       	movw	r16, r24
     abe:	0e 94 79 09 	call	0x12f2	; 0x12f2 <uart_put_int>
     ac2:	8d ec       	ldi	r24, 0xCD	; 205
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     aca:	4a e0       	ldi	r20, 0x0A	; 10
     acc:	be 01       	movw	r22, r28
     ace:	6f 5f       	subi	r22, 0xFF	; 255
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <DS18X20_format_from_decicelsius>
     ad8:	ce 01       	movw	r24, r28
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <uart_puts>
     ae0:	89 ec       	ldi	r24, 0xC9	; 201
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     ae8:	2a 96       	adiw	r28, 0x0a	; 10
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <readTempForOnlyDS18b20>:
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	0e 94 b8 02 	call	0x570	; 0x570 <DS18X20_start_meas>
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	8e e9       	ldi	r24, 0x9E	; 158
     b0c:	94 e2       	ldi	r25, 0x24	; 36
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	80 40       	sbci	r24, 0x00	; 0
     b12:	90 40       	sbci	r25, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <readTempForOnlyDS18b20+0x10>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <readTempForOnlyDS18b20+0x1a>
     b18:	00 00       	nop
     b1a:	64 e4       	ldi	r22, 0x44	; 68
     b1c:	71 e0       	ldi	r23, 0x01	; 1
     b1e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <gSensorIDs>
     b22:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DS18X20_read_decicelsius_single>
     b26:	08 95       	ret

00000b28 <__vector_11>:
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
     b36:	af 93       	push	r26
     b38:	bf 93       	push	r27
     b3a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timer1_millis>
     b3e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timer1_millis+0x1>
     b42:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <timer1_millis+0x2>
     b46:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <timer1_millis+0x3>
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	a1 1d       	adc	r26, r1
     b4e:	b1 1d       	adc	r27, r1
     b50:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timer1_millis>
     b54:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timer1_millis+0x1>
     b58:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <timer1_millis+0x2>
     b5c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <timer1_millis+0x3>
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <handleError>:
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	fc 01       	movw	r30, r24
     b80:	20 81       	ld	r18, Z
     b82:	22 23       	and	r18, r18
     b84:	79 f1       	breq	.+94     	; 0xbe4 <handleError+0x72>
     b86:	8c 01       	movw	r16, r24
     b88:	c7 e4       	ldi	r28, 0x47	; 71
     b8a:	d1 e0       	ldi	r29, 0x01	; 1
     b8c:	0f 2e       	mov	r0, r31
     b8e:	ff e0       	ldi	r31, 0x0F	; 15
     b90:	ef 2e       	mov	r14, r31
     b92:	f0 2d       	mov	r31, r0
     b94:	68 94       	set
     b96:	ff 24       	eor	r15, r15
     b98:	f4 f8       	bld	r15, 4
     b9a:	8f b7       	in	r24, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	e8 82       	st	Y, r14
     ba0:	f9 82       	std	Y+1, r15	; 0x01
     ba2:	fa 82       	std	Y+2, r15	; 0x02
     ba4:	f8 01       	movw	r30, r16
     ba6:	90 81       	ld	r25, Z
     ba8:	9b 83       	std	Y+3, r25	; 0x03
     baa:	8f bf       	out	0x3f, r24	; 63
     bac:	80 81       	ld	r24, Z
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	61 f4       	brne	.+24     	; 0xbca <handleError+0x58>
     bb2:	0e 94 7f 05 	call	0xafe	; 0xafe <readTempForOnlyDS18b20>
     bb6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <decicelsius>
     bba:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <decicelsius+0x1>
     bbe:	8c 32       	cpi	r24, 0x2C	; 44
     bc0:	91 40       	sbci	r25, 0x01	; 1
     bc2:	1c f4       	brge	.+6      	; 0xbca <handleError+0x58>
     bc4:	f8 01       	movw	r30, r16
     bc6:	10 82       	st	Z, r1
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <handleError+0x72>
     bca:	ff ef       	ldi	r31, 0xFF	; 255
     bcc:	23 ed       	ldi	r18, 0xD3	; 211
     bce:	80 e3       	ldi	r24, 0x30	; 48
     bd0:	f1 50       	subi	r31, 0x01	; 1
     bd2:	20 40       	sbci	r18, 0x00	; 0
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <handleError+0x5e>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <handleError+0x68>
     bda:	00 00       	nop
     bdc:	f8 01       	movw	r30, r16
     bde:	80 81       	ld	r24, Z
     be0:	81 11       	cpse	r24, r1
     be2:	db cf       	rjmp	.-74     	; 0xb9a <handleError+0x28>
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	08 95       	ret

00000bf2 <millis>:
     bf2:	f8 94       	cli
     bf4:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <timer1_millis>
     bf8:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <timer1_millis+0x1>
     bfc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timer1_millis+0x2>
     c00:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timer1_millis+0x3>
     c04:	78 94       	sei
     c06:	08 95       	ret

00000c08 <initButton>:
     c08:	87 b1       	in	r24, 0x07	; 7
     c0a:	8f 7c       	andi	r24, 0xCF	; 207
     c0c:	87 b9       	out	0x07, r24	; 7
     c0e:	88 b1       	in	r24, 0x08	; 8
     c10:	80 63       	ori	r24, 0x30	; 48
     c12:	88 b9       	out	0x08, r24	; 8
     c14:	08 95       	ret

00000c16 <initDisplay>:
}

void initDisplay(){
	DDRB |= 0b00111111;
     c16:	84 b1       	in	r24, 0x04	; 4
     c18:	8f 63       	ori	r24, 0x3F	; 63
     c1a:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b01100000;
     c1c:	8a b1       	in	r24, 0x0a	; 10
     c1e:	80 66       	ori	r24, 0x60	; 96
     c20:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0b00001111;
     c22:	87 b1       	in	r24, 0x07	; 7
     c24:	8f 60       	ori	r24, 0x0F	; 15
     c26:	87 b9       	out	0x07, r24	; 7
     c28:	08 95       	ret

00000c2a <initTimer1>:
}

void initTimer1(){
	TCNT1 = 0;
     c2a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c2e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1AH = (uint8_t)(CTC_MATCH_OVERFLOW >> 8);
     c32:	87 e0       	ldi	r24, 0x07	; 7
     c34:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
     c38:	80 ed       	ldi	r24, 0xD0	; 208
     c3a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0;
     c3e:	e0 e8       	ldi	r30, 0x80	; 128
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	10 82       	st	Z, r1
	TCCR1A |= (0 << WGM11) | (0 << WGM10); //mode CTC
     c44:	80 81       	ld	r24, Z
     c46:	80 83       	st	Z, r24
	TCCR1B |= (0 << WGM13) | (1 << WGM12) |(0 << CS12) | (1 << CS11) | (0 << CS10); //mode CTC, clk/8
     c48:	e1 e8       	ldi	r30, 0x81	; 129
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8a 60       	ori	r24, 0x0A	; 10
     c50:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
     c52:	ef e6       	ldi	r30, 0x6F	; 111
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	82 60       	ori	r24, 0x02	; 2
     c5a:	80 83       	st	Z, r24
     c5c:	08 95       	ret

00000c5e <initTimer0>:
}

void initTimer0(){
	TCNT0 = 0;
     c5e:	16 bc       	out	0x26, r1	; 38
	OCR0A = 250; //4ms
     c60:	8a ef       	ldi	r24, 0xFA	; 250
     c62:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0;
     c64:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01) | (0 << WGM00); //mode CTC
     c66:	84 b5       	in	r24, 0x24	; 36
     c68:	82 60       	ori	r24, 0x02	; 2
     c6a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0 << WGM02) |(1 << CS02) | (0 << CS01) | (0 << CS00); //mode CTC, clk/256
     c6c:	85 b5       	in	r24, 0x25	; 37
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A); //Output Compare A Match Interrupt Enable
     c72:	ee e6       	ldi	r30, 0x6E	; 110
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	82 60       	ori	r24, 0x02	; 2
     c7a:	80 83       	st	Z, r24
     c7c:	08 95       	ret

00000c7e <getButtonState>:
}

void getButtonState(uint8_t but){
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
	uint8_t state = PINC & buttonMask[but];
     c8c:	16 b1       	in	r17, 0x06	; 6
     c8e:	c8 2f       	mov	r28, r24
     c90:	d0 e0       	ldi	r29, 0x00	; 0
     c92:	fe 01       	movw	r30, r28
     c94:	e0 50       	subi	r30, 0x00	; 0
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	80 81       	ld	r24, Z
     c9a:	18 23       	and	r17, r24
	if (state ^ buttonDebounceState[but]){
     c9c:	fe 01       	movw	r30, r28
     c9e:	e0 5c       	subi	r30, 0xC0	; 192
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	80 81       	ld	r24, Z
     ca4:	18 17       	cp	r17, r24
     ca6:	89 f0       	breq	.+34     	; 0xcca <getButtonState+0x4c>
		buttonDebounceState[but] = state;
     ca8:	fe 01       	movw	r30, r28
     caa:	e0 5c       	subi	r30, 0xC0	; 192
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	10 83       	st	Z, r17
		lastDebounceTime[but] = millis();
     cb0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <millis>
     cb4:	fe 01       	movw	r30, r28
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e8 5c       	subi	r30, 0xC8	; 200
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	60 83       	st	Z, r22
     cc4:	71 83       	std	Z+1, r23	; 0x01
     cc6:	82 83       	std	Z+2, r24	; 0x02
     cc8:	93 83       	std	Z+3, r25	; 0x03
	}
	if ((millis() - lastDebounceTime[but] > 39)){
     cca:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <millis>
     cce:	fe 01       	movw	r30, r28
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	e8 5c       	subi	r30, 0xC8	; 200
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	c0 80       	ld	r12, Z
     cde:	d1 80       	ldd	r13, Z+1	; 0x01
     ce0:	e2 80       	ldd	r14, Z+2	; 0x02
     ce2:	f3 80       	ldd	r15, Z+3	; 0x03
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	8c 19       	sub	r24, r12
     cea:	9d 09       	sbc	r25, r13
     cec:	ae 09       	sbc	r26, r14
     cee:	bf 09       	sbc	r27, r15
     cf0:	88 97       	sbiw	r24, 0x28	; 40
     cf2:	a1 05       	cpc	r26, r1
     cf4:	b1 05       	cpc	r27, r1
     cf6:	c8 f0       	brcs	.+50     	; 0xd2a <getButtonState+0xac>
		if (state ^ buttonPrefState[but]){
     cf8:	fe 01       	movw	r30, r28
     cfa:	ee 5f       	subi	r30, 0xFE	; 254
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	80 81       	ld	r24, Z
     d00:	18 17       	cp	r17, r24
     d02:	99 f0       	breq	.+38     	; 0xd2a <getButtonState+0xac>
			buttonPrefState[but] = state;
     d04:	fe 01       	movw	r30, r28
     d06:	ee 5f       	subi	r30, 0xFE	; 254
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	10 83       	st	Z, r17
			buttonStateON[but] = (~state) & buttonMask[but];
     d0c:	10 95       	com	r17
     d0e:	fe 01       	movw	r30, r28
     d10:	e0 50       	subi	r30, 0x00	; 0
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	80 81       	ld	r24, Z
     d16:	fe 01       	movw	r30, r28
     d18:	ea 5c       	subi	r30, 0xCA	; 202
     d1a:	fe 4f       	sbci	r31, 0xFE	; 254
     d1c:	91 2f       	mov	r25, r17
     d1e:	98 23       	and	r25, r24
     d20:	90 83       	st	Z, r25
			buttonStateOFF[but] = (~state) ^ buttonMask[but];
     d22:	cc 5c       	subi	r28, 0xCC	; 204
     d24:	de 4f       	sbci	r29, 0xFE	; 254
     d26:	18 27       	eor	r17, r24
     d28:	18 83       	st	Y, r17
		}
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	08 95       	ret

00000d3a <setNumber>:

void setNumber(uint8_t num, uint8_t dig){
	if (num > MAXNUMBER-1 || dig>3) return;
     d3a:	81 31       	cpi	r24, 0x11	; 17
     d3c:	58 f5       	brcc	.+86     	; 0xd94 <setNumber+0x5a>
     d3e:	64 30       	cpi	r22, 0x04	; 4
     d40:	48 f5       	brcc	.+82     	; 0xd94 <setNumber+0x5a>
	uint8_t pb, pd;
	pb = number[num][0];
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fc 01       	movw	r30, r24
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	e8 5f       	subi	r30, 0xF8	; 248
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	20 81       	ld	r18, Z
	if (dig == 2) pb |= 0b00000001;
     d50:	62 30       	cpi	r22, 0x02	; 2
     d52:	09 f4       	brne	.+2      	; 0xd56 <setNumber+0x1c>
     d54:	21 60       	ori	r18, 0x01	; 1
	PORTB |= pb;
     d56:	35 b1       	in	r19, 0x05	; 5
     d58:	32 2b       	or	r19, r18
     d5a:	35 b9       	out	0x05, r19	; 5
	PORTB &= pb | 0b11000000;
     d5c:	35 b1       	in	r19, 0x05	; 5
     d5e:	20 6c       	ori	r18, 0xC0	; 192
     d60:	23 23       	and	r18, r19
     d62:	25 b9       	out	0x05, r18	; 5
	pd = number[num][1];
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	fc 01       	movw	r30, r24
     d6a:	e8 5f       	subi	r30, 0xF8	; 248
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	81 81       	ldd	r24, Z+1	; 0x01
	PORTD |= pd;
     d70:	9b b1       	in	r25, 0x0b	; 11
     d72:	98 2b       	or	r25, r24
     d74:	9b b9       	out	0x0b, r25	; 11
	PORTD &= pd | 0b10011111;
     d76:	9b b1       	in	r25, 0x0b	; 11
     d78:	8f 69       	ori	r24, 0x9F	; 159
     d7a:	89 23       	and	r24, r25
     d7c:	8b b9       	out	0x0b, r24	; 11
	PORTC &= 0b11110000;
     d7e:	88 b1       	in	r24, 0x08	; 8
     d80:	80 7f       	andi	r24, 0xF0	; 240
     d82:	88 b9       	out	0x08, r24	; 8
	PORTC |= digit[dig];
     d84:	98 b1       	in	r25, 0x08	; 8
     d86:	e6 2f       	mov	r30, r22
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ec 5f       	subi	r30, 0xFC	; 252
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	80 81       	ld	r24, Z
     d90:	89 2b       	or	r24, r25
     d92:	88 b9       	out	0x08, r24	; 8
     d94:	08 95       	ret

00000d96 <__vector_14>:

ISR (TIMER1_COMPA_vect){
	timer1_millis++;
}

ISR(TIMER0_COMPA_vect){
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	ef 93       	push	r30
     db6:	ff 93       	push	r31
	counterDigit &= 0b00000011;
     db8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counterDigit>
     dbc:	83 70       	andi	r24, 0x03	; 3
     dbe:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <counterDigit>
	temp += 1;
     dc2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	if (!counterDigit){
     dcc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counterDigit>
     dd0:	81 11       	cpse	r24, r1
     dd2:	13 c0       	rjmp	.+38     	; 0xdfa <__vector_14+0x64>
		if (heatStatus && mode == NORMAL){
     dd4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <heatStatus>
     dd8:	88 23       	and	r24, r24
     dda:	79 f0       	breq	.+30     	; 0xdfa <__vector_14+0x64>
     ddc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	59 f4       	brne	.+22     	; 0xdfa <__vector_14+0x64>
			if (temp & 0b10000000) temperature[0] = DEFIS_HEAT;
     de4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     de8:	88 23       	and	r24, r24
     dea:	24 f4       	brge	.+8      	; 0xdf4 <__vector_14+0x5e>
     dec:	8b e0       	ldi	r24, 0x0B	; 11
     dee:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <temperature>
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <__vector_14+0x64>
			else temperature[0] = CLEAR;
     df4:	8a e0       	ldi	r24, 0x0A	; 10
     df6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <temperature>
		}
	}
	setNumber(temperature[counterDigit], counterDigit);
     dfa:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <counterDigit>
     dfe:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <counterDigit>
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	e9 5b       	subi	r30, 0xB9	; 185
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	80 81       	ld	r24, Z
     e0a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <setNumber>
	counterDigit += 1;
     e0e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counterDigit>
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <counterDigit>
}
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <convertTempToDigit>:
	PORTD &= pd | 0b10011111;
	PORTC &= 0b11110000;
	PORTC |= digit[dig];
}

void convertTempToDigit(uint16_t t, uint8_t mode){
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	fc 01       	movw	r30, r24
     e46:	f6 2e       	mov	r15, r22
	uint16_t temp, d1, d2, d3, d4;
	temp = t;
	d4 = temp/1000;
     e48:	9c 01       	movw	r18, r24
     e4a:	36 95       	lsr	r19
     e4c:	27 95       	ror	r18
     e4e:	36 95       	lsr	r19
     e50:	27 95       	ror	r18
     e52:	36 95       	lsr	r19
     e54:	27 95       	ror	r18
     e56:	a5 ec       	ldi	r26, 0xC5	; 197
     e58:	b0 e2       	ldi	r27, 0x20	; 32
     e5a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__umulhisi3>
     e5e:	ec 01       	movw	r28, r24
     e60:	d2 95       	swap	r29
     e62:	c2 95       	swap	r28
     e64:	cf 70       	andi	r28, 0x0F	; 15
     e66:	cd 27       	eor	r28, r29
     e68:	df 70       	andi	r29, 0x0F	; 15
     e6a:	cd 27       	eor	r28, r29
	temp = temp - d4*1000;
     e6c:	28 ee       	ldi	r18, 0xE8	; 232
     e6e:	33 e0       	ldi	r19, 0x03	; 3
     e70:	c2 9f       	mul	r28, r18
     e72:	c0 01       	movw	r24, r0
     e74:	c3 9f       	mul	r28, r19
     e76:	90 0d       	add	r25, r0
     e78:	d2 9f       	mul	r29, r18
     e7a:	90 0d       	add	r25, r0
     e7c:	11 24       	eor	r1, r1
     e7e:	af 01       	movw	r20, r30
     e80:	48 1b       	sub	r20, r24
     e82:	59 0b       	sbc	r21, r25
	if (t & 0x8000) d4 = 11;
     e84:	ff 23       	and	r31, r31
     e86:	14 f4       	brge	.+4      	; 0xe8c <convertTempToDigit+0x52>
     e88:	cb e0       	ldi	r28, 0x0B	; 11
     e8a:	d0 e0       	ldi	r29, 0x00	; 0
	d3 = temp/100;
     e8c:	9a 01       	movw	r18, r20
     e8e:	36 95       	lsr	r19
     e90:	27 95       	ror	r18
     e92:	36 95       	lsr	r19
     e94:	27 95       	ror	r18
     e96:	ab e7       	ldi	r26, 0x7B	; 123
     e98:	b4 e1       	ldi	r27, 0x14	; 20
     e9a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__umulhisi3>
     e9e:	8c 01       	movw	r16, r24
     ea0:	16 95       	lsr	r17
     ea2:	07 95       	ror	r16
	temp = temp - d3*100;
     ea4:	24 e6       	ldi	r18, 0x64	; 100
     ea6:	20 9f       	mul	r18, r16
     ea8:	c0 01       	movw	r24, r0
     eaa:	21 9f       	mul	r18, r17
     eac:	90 0d       	add	r25, r0
     eae:	11 24       	eor	r1, r1
     eb0:	48 1b       	sub	r20, r24
     eb2:	59 0b       	sbc	r21, r25
	d2 = temp/10;
     eb4:	9a 01       	movw	r18, r20
     eb6:	ad ec       	ldi	r26, 0xCD	; 205
     eb8:	bc ec       	ldi	r27, 0xCC	; 204
     eba:	0e 94 bc 09 	call	0x1378	; 0x1378 <__umulhisi3>
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	96 95       	lsr	r25
     ec4:	87 95       	ror	r24
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
	d1 = temp - d2*10;
     eca:	bc 01       	movw	r22, r24
     ecc:	66 0f       	add	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	9c 01       	movw	r18, r24
     ed2:	22 0f       	add	r18, r18
     ed4:	33 1f       	adc	r19, r19
     ed6:	22 0f       	add	r18, r18
     ed8:	33 1f       	adc	r19, r19
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	26 0f       	add	r18, r22
     ee0:	37 1f       	adc	r19, r23
     ee2:	ba 01       	movw	r22, r20
     ee4:	62 1b       	sub	r22, r18
     ee6:	73 0b       	sbc	r23, r19
     ee8:	9b 01       	movw	r18, r22
	switch (mode){
     eea:	72 e0       	ldi	r23, 0x02	; 2
     eec:	f7 16       	cp	r15, r23
     eee:	39 f0       	breq	.+14     	; 0xefe <convertTempToDigit+0xc4>
     ef0:	43 e0       	ldi	r20, 0x03	; 3
     ef2:	f4 16       	cp	r15, r20
     ef4:	91 f0       	breq	.+36     	; 0xf1a <convertTempToDigit+0xe0>
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	f6 12       	cpse	r15, r22
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <convertTempToDigit+0xee>
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <convertTempToDigit+0xca>
		case NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
			break;
		case HIGH:
			d4 = DEFIS_UP;
     efe:	cd e0       	ldi	r28, 0x0D	; 13
     f00:	d0 e0       	ldi	r29, 0x00	; 0
     f02:	12 c0       	rjmp	.+36     	; 0xf28 <convertTempToDigit+0xee>
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
     f04:	01 15       	cp	r16, r1
     f06:	11 05       	cpc	r17, r1
     f08:	19 f4       	brne	.+6      	; 0xf10 <convertTempToDigit+0xd6>
     f0a:	20 97       	sbiw	r28, 0x00	; 0
     f0c:	49 f0       	breq	.+18     	; 0xf20 <convertTempToDigit+0xe6>
     f0e:	0c c0       	rjmp	.+24     	; 0xf28 <convertTempToDigit+0xee>
			if (d4 == 0) d4 = CLEAR;
     f10:	20 97       	sbiw	r28, 0x00	; 0
     f12:	51 f4       	brne	.+20     	; 0xf28 <convertTempToDigit+0xee>
     f14:	ca e0       	ldi	r28, 0x0A	; 10
     f16:	d0 e0       	ldi	r29, 0x00	; 0
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <convertTempToDigit+0xee>
			break;
		case HIGH:
			d4 = DEFIS_UP;
			break;
		case LOW:
			d4 = DEFIS_DOWN;
     f1a:	ce e0       	ldi	r28, 0x0E	; 14
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
			break;
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <convertTempToDigit+0xee>
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
     f20:	ca e0       	ldi	r28, 0x0A	; 10
     f22:	d0 e0       	ldi	r29, 0x00	; 0
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case NORMAL:
			if (d3 == 0 && d4 == 0) d3 = CLEAR;
     f24:	0a e0       	ldi	r16, 0x0A	; 10
     f26:	10 e0       	ldi	r17, 0x00	; 0
			d4 = DEFIS_DOWN;
			break;
		default:
			break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     f28:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f2a:	f8 94       	cli
		temperature[0] = (uint8_t)d4;
     f2c:	e7 e4       	ldi	r30, 0x47	; 71
     f2e:	f1 e0       	ldi	r31, 0x01	; 1
     f30:	c0 83       	st	Z, r28
		temperature[1] = (uint8_t)d3;
     f32:	01 83       	std	Z+1, r16	; 0x01
		temperature[2] = (uint8_t)d2;
     f34:	82 83       	std	Z+2, r24	; 0x02
		temperature[3] = (uint8_t)d1;
     f36:	23 83       	std	Z+3, r18	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f38:	9f bf       	out	0x3f, r25	; 63
	}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	08 95       	ret

00000f46 <main>:

int main(void)
{
	uint8_t nSensors, i;
		
	uart_init((UART_BAUD_SELECT((BAUD),F_CPU)));
     f46:	87 e6       	ldi	r24, 0x67	; 103
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 2a 09 	call	0x1254	; 0x1254 <uart_init>
		
	#ifndef OW_ONE_BUS
		ow_set_bus(&PIND,&PORTD,&DDRD,PORTD7);
     f4e:	27 e0       	ldi	r18, 0x07	; 7
     f50:	4a e2       	ldi	r20, 0x2A	; 42
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	6b e2       	ldi	r22, 0x2B	; 43
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	89 e2       	ldi	r24, 0x29	; 41
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 35 04 	call	0x86a	; 0x86a <ow_set_bus>
	#endif
		
	sei();
     f60:	78 94       	sei
		
	uart_puts_P( NEWLINESTR "DS18X20 1-Wire-Reader Demo by Martin Thomas" NEWLINESTR );
     f62:	8e ec       	ldi	r24, 0xCE	; 206
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
	uart_puts_P(            "-------------------------------------------" );
     f6a:	82 ea       	ldi	r24, 0xA2	; 162
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
		
	nSensors = search_sensors();
     f72:	0e 94 12 05 	call	0xa24	; 0xa24 <search_sensors>
     f76:	18 2f       	mov	r17, r24
	if (nSensors == 0){
     f78:	81 11       	cpse	r24, r1
     f7a:	fb c0       	rjmp	.+502    	; 0x1172 <main+0x22c>
		err = 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <err>
	}
	uart_put_int( (int)nSensors );
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 79 09 	call	0x12f2	; 0x12f2 <uart_put_int>
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
     f8a:	82 e8       	ldi	r24, 0x82	; 130
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     f92:	5c c0       	rjmp	.+184    	; 0x104c <main+0x106>
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
			uart_puts_P("# in Bus :");
     f94:	87 e7       	ldi	r24, 0x77	; 119
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
			uart_put_int( (int)i + 1);
     f9c:	c7 01       	movw	r24, r14
     f9e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <uart_put_int>
			uart_puts_P(" : ");
     fa2:	83 e7       	ldi	r24, 0x73	; 115
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
     faa:	68 e0       	ldi	r22, 0x08	; 8
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	c6 01       	movw	r24, r12
     fb0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DS18X20_show_id_uart>
			uart_puts_P( NEWLINESTR );
     fb4:	80 e7       	ldi	r24, 0x70	; 112
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
     fbe:	e2 1a       	sub	r14, r18
     fc0:	f2 0a       	sbc	r15, r18
     fc2:	88 e0       	ldi	r24, 0x08	; 8
     fc4:	c8 0e       	add	r12, r24
     fc6:	d1 1c       	adc	r13, r1
	}
	uart_put_int( (int)nSensors );
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
     fc8:	ce 15       	cp	r28, r14
     fca:	df 05       	cpc	r29, r15
     fcc:	19 f7       	brne	.-58     	; 0xf94 <main+0x4e>
     fce:	e6 c0       	rjmp	.+460    	; 0x119c <main+0x256>
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
		uart_puts_P( "Sensor# " );
     fd0:	87 e6       	ldi	r24, 0x67	; 103
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
		uart_put_int( (int)i+1 );
     fd8:	c7 01       	movw	r24, r14
     fda:	0e 94 79 09 	call	0x12f2	; 0x12f2 <uart_put_int>
		uart_puts_P( " is a " );
     fde:	80 e6       	ldi	r24, 0x60	; 96
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     fe6:	cc 2e       	mov	r12, r28
     fe8:	dd 2e       	mov	r13, r29
		if ( gSensorIDs[i][0] == DS18S20_FAMILY_CODE ) {
     fea:	88 81       	ld	r24, Y
     fec:	80 31       	cpi	r24, 0x10	; 16
     fee:	29 f4       	brne	.+10     	; 0xffa <main+0xb4>
			uart_puts_P( "DS18S20/DS1820" );
     ff0:	81 e5       	ldi	r24, 0x51	; 81
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
     ff8:	0b c0       	rjmp	.+22     	; 0x1010 <main+0xca>
		} else if ( gSensorIDs[i][0] == DS1822_FAMILY_CODE ) {
     ffa:	82 32       	cpi	r24, 0x22	; 34
     ffc:	29 f4       	brne	.+10     	; 0x1008 <main+0xc2>
			uart_puts_P( "DS1822" );
     ffe:	8a e4       	ldi	r24, 0x4A	; 74
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <main+0xca>
		}
		else {
			uart_puts_P( "DS18B20" );
    1008:	82 e4       	ldi	r24, 0x42	; 66
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
		}
		uart_puts_P( " which is " );
    1010:	87 e3       	ldi	r24, 0x37	; 55
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
		if ( DS18X20_get_power_status( &gSensorIDs[i][0] ) == DS18X20_POWER_PARASITE ) {
    1018:	8c 2d       	mov	r24, r12
    101a:	9d 2d       	mov	r25, r13
    101c:	0e 94 a2 02 	call	0x544	; 0x544 <DS18X20_get_power_status>
    1020:	81 11       	cpse	r24, r1
    1022:	05 c0       	rjmp	.+10     	; 0x102e <main+0xe8>
			uart_puts_P( "parasite" );
    1024:	8e e2       	ldi	r24, 0x2E	; 46
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <main+0xf0>
			} else {
			uart_puts_P( "externally" );
    102e:	83 e2       	ldi	r24, 0x23	; 35
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
		}
		uart_puts_P( " powered" NEWLINESTR );
    1036:	88 e1       	ldi	r24, 0x18	; 24
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
    103e:	0f 5f       	subi	r16, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	e9 1a       	sub	r14, r25
    1044:	f9 0a       	sbc	r15, r25
    1046:	28 96       	adiw	r28, 0x08	; 8
    1048:	10 13       	cpse	r17, r16
    104a:	c2 cf       	rjmp	.-124    	; 0xfd0 <main+0x8a>
// 		if ( nSensors > 0 ) {
// 			eeprom_test();
// 		}
// 	#endif	
				
	initDisplay();
    104c:	0e 94 0b 06 	call	0xc16	; 0xc16 <initDisplay>
	initTimer0();
    1050:	0e 94 2f 06 	call	0xc5e	; 0xc5e <initTimer0>
	initTimer1();
    1054:	0e 94 15 06 	call	0xc2a	; 0xc2a <initTimer1>
	initButton();
    1058:	0e 94 04 06 	call	0xc08	; 0xc08 <initButton>
	mode = NORMAL;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1062:	2f ef       	ldi	r18, 0xFF	; 255
    1064:	83 ed       	ldi	r24, 0xD3	; 211
    1066:	90 e3       	ldi	r25, 0x30	; 48
    1068:	21 50       	subi	r18, 0x01	; 1
    106a:	80 40       	sbci	r24, 0x00	; 0
    106c:	90 40       	sbci	r25, 0x00	; 0
    106e:	e1 f7       	brne	.-8      	; 0x1068 <main+0x122>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <main+0x12c>
    1072:	00 00       	nop
	_delay_ms(1000);
		
    while (1) {
		handleError(&err);	
		getButtonState(BUTTON1);	
		if (buttonStateON[BUTTON1]){
    1074:	c6 e3       	ldi	r28, 0x36	; 54
    1076:	d1 e0       	ldi	r29, 0x01	; 1
			buttonStateON[BUTTON1] = 0;
			mode += 1;
			if (mode == 4) mode = NORMAL;
    1078:	11 e0       	ldi	r17, 0x01	; 1
				uart_puts_P( NEWLINESTR );
				uart_put_temp( decicelsius );
				uart_puts_P( NEWLINESTR );
			}
			if (decicelsius > ALARM_HEAT){
				err = 2;
    107a:	02 e0       	ldi	r16, 0x02	; 2
	initButton();
	mode = NORMAL;
	_delay_ms(1000);
		
    while (1) {
		handleError(&err);	
    107c:	8b e2       	ldi	r24, 0x2B	; 43
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 b9 05 	call	0xb72	; 0xb72 <handleError>
		getButtonState(BUTTON1);	
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 3f 06 	call	0xc7e	; 0xc7e <getButtonState>
		if (buttonStateON[BUTTON1]){
    108a:	88 81       	ld	r24, Y
    108c:	88 23       	and	r24, r24
    108e:	61 f0       	breq	.+24     	; 0x10a8 <main+0x162>
			buttonStateON[BUTTON1] = 0;
    1090:	18 82       	st	Y, r1
			mode += 1;
    1092:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
    1096:	8f 5f       	subi	r24, 0xFF	; 255
    1098:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <mode>
			if (mode == 4) mode = NORMAL;
    109c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <main+0x162>
    10a4:	10 93 43 01 	sts	0x0143, r17	; 0x800143 <mode>
		}
		
		switch (mode){
    10a8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <mode>
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <main+0x16c>
    10b0:	52 c0       	rjmp	.+164    	; 0x1156 <main+0x210>
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <main+0x172>
    10b6:	56 c0       	rjmp	.+172    	; 0x1164 <main+0x21e>
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	01 f7       	brne	.-64     	; 0x107c <main+0x136>
		case NORMAL:
			if (millis() - milliseconds_since > 999){
    10bc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <millis>
    10c0:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <milliseconds_since>
    10c4:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <milliseconds_since+0x1>
    10c8:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <milliseconds_since+0x2>
    10cc:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <milliseconds_since+0x3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	8c 19       	sub	r24, r12
    10d6:	9d 09       	sbc	r25, r13
    10d8:	ae 09       	sbc	r26, r14
    10da:	bf 09       	sbc	r27, r15
    10dc:	88 3e       	cpi	r24, 0xE8	; 232
    10de:	93 40       	sbci	r25, 0x03	; 3
    10e0:	a1 05       	cpc	r26, r1
    10e2:	b1 05       	cpc	r27, r1
    10e4:	10 f1       	brcs	.+68     	; 0x112a <main+0x1e4>
				milliseconds_since = millis();
    10e6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <millis>
    10ea:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <milliseconds_since>
    10ee:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <milliseconds_since+0x1>
    10f2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <milliseconds_since+0x2>
    10f6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <milliseconds_since+0x3>
				readTempForOnlyDS18b20();
    10fa:	0e 94 7f 05 	call	0xafe	; 0xafe <readTempForOnlyDS18b20>
				convertTempToDigit(decicelsius, mode);
    10fe:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode>
    1102:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <decicelsius>
    1106:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <decicelsius+0x1>
    110a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <convertTempToDigit>
				uart_puts_P( NEWLINESTR );
    110e:	85 e1       	ldi	r24, 0x15	; 21
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
				uart_put_temp( decicelsius );
    1116:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <decicelsius>
    111a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <decicelsius+0x1>
    111e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <uart_put_temp>
				uart_puts_P( NEWLINESTR );
    1122:	82 e1       	ldi	r24, 0x12	; 18
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
			}
			if (decicelsius > ALARM_HEAT){
    112a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <decicelsius>
    112e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <decicelsius+0x1>
    1132:	8d 32       	cpi	r24, 0x2D	; 45
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	92 07       	cpc	r25, r18
    1138:	14 f0       	brlt	.+4      	; 0x113e <main+0x1f8>
				err = 2;
    113a:	00 93 2b 01 	sts	0x012B, r16	; 0x80012b <err>
			}
			if (decicelsius < limitLow){ //heat on
    113e:	8a 3f       	cpi	r24, 0xFA	; 250
    1140:	91 05       	cpc	r25, r1
    1142:	14 f4       	brge	.+4      	; 0x1148 <main+0x202>
				heatStatus = 1;
    1144:	10 93 42 01 	sts	0x0142, r17	; 0x800142 <heatStatus>
			}
			if (decicelsius > limitHigh){ //cool on
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	91 40       	sbci	r25, 0x01	; 1
    114c:	0c f4       	brge	.+2      	; 0x1150 <main+0x20a>
    114e:	96 cf       	rjmp	.-212    	; 0x107c <main+0x136>
				heatStatus = 0;
    1150:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <heatStatus>
    1154:	93 cf       	rjmp	.-218    	; 0x107c <main+0x136>
			if (decicelsius > limitLow && decicelsius < limitHigh){ //cool on
				
			}
			break;		
		case HIGH:
			convertTempToDigit(limitHigh, mode);
    1156:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode>
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <convertTempToDigit>
			break;		
    1162:	8c cf       	rjmp	.-232    	; 0x107c <main+0x136>
		case LOW:
			convertTempToDigit(limitLow, mode);
    1164:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <mode>
    1168:	8a ef       	ldi	r24, 0xFA	; 250
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <convertTempToDigit>
			break;	
    1170:	85 cf       	rjmp	.-246    	; 0x107c <main+0x136>
		
	nSensors = search_sensors();
	if (nSensors == 0){
		err = 1;
	}
	uart_put_int( (int)nSensors );
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 79 09 	call	0x12f2	; 0x12f2 <uart_put_int>
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
    1178:	82 e8       	ldi	r24, 0x82	; 130
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 67 09 	call	0x12ce	; 0x12ce <uart_puts_p>
    1180:	0f 2e       	mov	r0, r31
    1182:	f7 e9       	ldi	r31, 0x97	; 151
    1184:	cf 2e       	mov	r12, r31
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	df 2e       	mov	r13, r31
    118a:	f0 2d       	mov	r31, r0
    118c:	cf ef       	ldi	r28, 0xFF	; 255
    118e:	c1 0f       	add	r28, r17
    1190:	d0 e0       	ldi	r29, 0x00	; 0
    1192:	22 96       	adiw	r28, 0x02	; 2
    1194:	ee 24       	eor	r14, r14
    1196:	e3 94       	inc	r14
    1198:	f1 2c       	mov	r15, r1
    119a:	fc ce       	rjmp	.-520    	; 0xf94 <main+0x4e>
    119c:	c7 e9       	ldi	r28, 0x97	; 151
    119e:	d1 e0       	ldi	r29, 0x01	; 1
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
    11a0:	ee 24       	eor	r14, r14
    11a2:	e3 94       	inc	r14
    11a4:	f1 2c       	mov	r15, r1
    11a6:	00 e0       	ldi	r16, 0x00	; 0
    11a8:	13 cf       	rjmp	.-474    	; 0xfd0 <main+0x8a>

000011aa <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    11aa:	1f 92       	push	r1
    11ac:	0f 92       	push	r0
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	0f 92       	push	r0
    11b2:	11 24       	eor	r1, r1
    11b4:	2f 93       	push	r18
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    11c2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    11c6:	88 71       	andi	r24, 0x18	; 24
    11c8:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <UART_RxHead>
    11cc:	ef 5f       	subi	r30, 0xFF	; 255
    11ce:	ef 71       	andi	r30, 0x1F	; 31
    11d0:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <UART_RxTail>
    11d4:	e9 17       	cp	r30, r25
    11d6:	39 f0       	breq	.+14     	; 0x11e6 <__vector_18+0x3c>
    11d8:	e0 93 4d 01 	sts	0x014D, r30	; 0x80014d <UART_RxHead>
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	e0 5b       	subi	r30, 0xB0	; 176
    11e0:	fe 4f       	sbci	r31, 0xFE	; 254
    11e2:	20 83       	st	Z, r18
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <__vector_18+0x3e>
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <UART_LastRxError>
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	2f 91       	pop	r18
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__vector_19>:
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
    1212:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <UART_TxHead>
    1216:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <UART_TxTail>
    121a:	98 17       	cp	r25, r24
    121c:	69 f0       	breq	.+26     	; 0x1238 <__vector_19+0x38>
    121e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <UART_TxTail>
    1222:	ef 5f       	subi	r30, 0xFF	; 255
    1224:	ef 71       	andi	r30, 0x1F	; 31
    1226:	e0 93 4e 01 	sts	0x014E, r30	; 0x80014e <UART_TxTail>
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	e0 59       	subi	r30, 0x90	; 144
    122e:	fe 4f       	sbci	r31, 0xFE	; 254
    1230:	80 81       	ld	r24, Z
    1232:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <__vector_19+0x42>
    1238:	e1 ec       	ldi	r30, 0xC1	; 193
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	8f 7d       	andi	r24, 0xDF	; 223
    1240:	80 83       	st	Z, r24
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <uart_init>:
    1254:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_TxHead>
    1258:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <UART_TxTail>
    125c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <UART_RxHead>
    1260:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <UART_RxTail>
    1264:	99 23       	and	r25, r25
    1266:	24 f4       	brge	.+8      	; 0x1270 <uart_init+0x1c>
    1268:	22 e0       	ldi	r18, 0x02	; 2
    126a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    126e:	9f 77       	andi	r25, 0x7F	; 127
    1270:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1278:	88 e9       	ldi	r24, 0x98	; 152
    127a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    127e:	86 e0       	ldi	r24, 0x06	; 6
    1280:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1284:	08 95       	ret

00001286 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1286:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <UART_TxHead>
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ) {
    128e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <UART_TxTail>
    1292:	29 17       	cp	r18, r25
    1294:	e1 f3       	breq	.-8      	; 0x128e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1296:	e2 2f       	mov	r30, r18
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	e0 59       	subi	r30, 0x90	; 144
    129c:	fe 4f       	sbci	r31, 0xFE	; 254
    129e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    12a0:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    12a4:	e1 ec       	ldi	r30, 0xC1	; 193
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 62       	ori	r24, 0x20	; 32
    12ac:	80 83       	st	Z, r24
    12ae:	08 95       	ret

000012b0 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	ec 01       	movw	r28, r24
    while ( *s ) {
    12b6:	88 81       	ld	r24, Y
    12b8:	88 23       	and	r24, r24
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <uart_puts+0x18>
    12bc:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
    12be:	0e 94 43 09 	call	0x1286	; 0x1286 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while ( *s ) {
    12c2:	89 91       	ld	r24, Y+
    12c4:	81 11       	cpse	r24, r1
    12c6:	fb cf       	rjmp	.-10     	; 0x12be <uart_puts+0xe>
        uart_putc(*s++);
    }

}/* uart_puts */
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
    12d2:	ec 01       	movw	r28, r24
    12d4:	21 96       	adiw	r28, 0x01	; 1
    12d6:	fc 01       	movw	r30, r24
    12d8:	84 91       	lpm	r24, Z
    12da:	88 23       	and	r24, r24
    12dc:	39 f0       	breq	.+14     	; 0x12ec <uart_puts_p+0x1e>
        uart_putc(c);
    12de:	0e 94 43 09 	call	0x1286	; 0x1286 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
    12e2:	fe 01       	movw	r30, r28
    12e4:	84 91       	lpm	r24, Z
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	81 11       	cpse	r24, r1
    12ea:	f9 cf       	rjmp	.-14     	; 0x12de <uart_puts_p+0x10>
        uart_putc(c);
    }

}/* uart_puts_p */
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <uart_put_int>:
**************************************************************************/
void uart_put_ulongint( const unsigned long int val )
{
	char buffer[15];
	uart_puts( utoa( val, buffer, 10 ) );
} /* uart_puti */
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	2a 97       	sbiw	r28, 0x0a	; 10
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	4a e0       	ldi	r20, 0x0A	; 10
    1308:	be 01       	movw	r22, r28
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	0e 94 df 09 	call	0x13be	; 0x13be <__itoa_ncheck>
    1312:	0e 94 58 09 	call	0x12b0	; 0x12b0 <uart_puts>
    1316:	2a 96       	adiw	r28, 0x0a	; 10
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <uart_puthex_nibble>:
Input:    byte value
Returns:  none
**************************************************************************/
void uart_puthex_nibble(const unsigned char b)
{
	unsigned char  c = b & 0x0f;
    1328:	8f 70       	andi	r24, 0x0F	; 15
	if ( c > 9 ) { 
    132a:	8a 30       	cpi	r24, 0x0A	; 10
    132c:	10 f0       	brcs	.+4      	; 0x1332 <uart_puthex_nibble+0xa>
		c += 'A'-10; 
    132e:	89 5c       	subi	r24, 0xC9	; 201
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <uart_puthex_nibble+0xc>
	}
	else {
		c += '0';
    1332:	80 5d       	subi	r24, 0xD0	; 208
	}
	uart_putc(c);
    1334:	0e 94 43 09 	call	0x1286	; 0x1286 <uart_putc>
    1338:	08 95       	ret

0000133a <uart_puthex_byte>:
Purpose:  transmit upper and lower nibble as ASCII-hex to UART
Input:    byte value
Returns:  none
**************************************************************************/
void uart_puthex_byte( const unsigned char  b )
{
    133a:	cf 93       	push	r28
    133c:	c8 2f       	mov	r28, r24
	uart_puthex_nibble( b >> 4 );
    133e:	82 95       	swap	r24
    1340:	8f 70       	andi	r24, 0x0F	; 15
    1342:	0e 94 94 09 	call	0x1328	; 0x1328 <uart_puthex_nibble>
	uart_puthex_nibble( b );
    1346:	8c 2f       	mov	r24, r28
    1348:	0e 94 94 09 	call	0x1328	; 0x1328 <uart_puthex_nibble>
} /* uart_puthex_byte */
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <__divmodhi4>:
    1350:	97 fb       	bst	r25, 7
    1352:	07 2e       	mov	r0, r23
    1354:	16 f4       	brtc	.+4      	; 0x135a <__divmodhi4+0xa>
    1356:	00 94       	com	r0
    1358:	07 d0       	rcall	.+14     	; 0x1368 <__divmodhi4_neg1>
    135a:	77 fd       	sbrc	r23, 7
    135c:	09 d0       	rcall	.+18     	; 0x1370 <__divmodhi4_neg2>
    135e:	0e 94 cb 09 	call	0x1396	; 0x1396 <__udivmodhi4>
    1362:	07 fc       	sbrc	r0, 7
    1364:	05 d0       	rcall	.+10     	; 0x1370 <__divmodhi4_neg2>
    1366:	3e f4       	brtc	.+14     	; 0x1376 <__divmodhi4_exit>

00001368 <__divmodhi4_neg1>:
    1368:	90 95       	com	r25
    136a:	81 95       	neg	r24
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	08 95       	ret

00001370 <__divmodhi4_neg2>:
    1370:	70 95       	com	r23
    1372:	61 95       	neg	r22
    1374:	7f 4f       	sbci	r23, 0xFF	; 255

00001376 <__divmodhi4_exit>:
    1376:	08 95       	ret

00001378 <__umulhisi3>:
    1378:	a2 9f       	mul	r26, r18
    137a:	b0 01       	movw	r22, r0
    137c:	b3 9f       	mul	r27, r19
    137e:	c0 01       	movw	r24, r0
    1380:	a3 9f       	mul	r26, r19
    1382:	70 0d       	add	r23, r0
    1384:	81 1d       	adc	r24, r1
    1386:	11 24       	eor	r1, r1
    1388:	91 1d       	adc	r25, r1
    138a:	b2 9f       	mul	r27, r18
    138c:	70 0d       	add	r23, r0
    138e:	81 1d       	adc	r24, r1
    1390:	11 24       	eor	r1, r1
    1392:	91 1d       	adc	r25, r1
    1394:	08 95       	ret

00001396 <__udivmodhi4>:
    1396:	aa 1b       	sub	r26, r26
    1398:	bb 1b       	sub	r27, r27
    139a:	51 e1       	ldi	r21, 0x11	; 17
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <__udivmodhi4_ep>

0000139e <__udivmodhi4_loop>:
    139e:	aa 1f       	adc	r26, r26
    13a0:	bb 1f       	adc	r27, r27
    13a2:	a6 17       	cp	r26, r22
    13a4:	b7 07       	cpc	r27, r23
    13a6:	10 f0       	brcs	.+4      	; 0x13ac <__udivmodhi4_ep>
    13a8:	a6 1b       	sub	r26, r22
    13aa:	b7 0b       	sbc	r27, r23

000013ac <__udivmodhi4_ep>:
    13ac:	88 1f       	adc	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	5a 95       	dec	r21
    13b2:	a9 f7       	brne	.-22     	; 0x139e <__udivmodhi4_loop>
    13b4:	80 95       	com	r24
    13b6:	90 95       	com	r25
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	08 95       	ret

000013be <__itoa_ncheck>:
    13be:	bb 27       	eor	r27, r27
    13c0:	4a 30       	cpi	r20, 0x0A	; 10
    13c2:	31 f4       	brne	.+12     	; 0x13d0 <__itoa_ncheck+0x12>
    13c4:	99 23       	and	r25, r25
    13c6:	22 f4       	brpl	.+8      	; 0x13d0 <__itoa_ncheck+0x12>
    13c8:	bd e2       	ldi	r27, 0x2D	; 45
    13ca:	90 95       	com	r25
    13cc:	81 95       	neg	r24
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__utoa_common>

000013d4 <__utoa_ncheck>:
    13d4:	bb 27       	eor	r27, r27

000013d6 <__utoa_common>:
    13d6:	fb 01       	movw	r30, r22
    13d8:	55 27       	eor	r21, r21
    13da:	aa 27       	eor	r26, r26
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	aa 1f       	adc	r26, r26
    13e2:	a4 17       	cp	r26, r20
    13e4:	10 f0       	brcs	.+4      	; 0x13ea <__utoa_common+0x14>
    13e6:	a4 1b       	sub	r26, r20
    13e8:	83 95       	inc	r24
    13ea:	50 51       	subi	r21, 0x10	; 16
    13ec:	b9 f7       	brne	.-18     	; 0x13dc <__utoa_common+0x6>
    13ee:	a0 5d       	subi	r26, 0xD0	; 208
    13f0:	aa 33       	cpi	r26, 0x3A	; 58
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__utoa_common+0x20>
    13f4:	a9 5d       	subi	r26, 0xD9	; 217
    13f6:	a1 93       	st	Z+, r26
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	79 f7       	brne	.-34     	; 0x13da <__utoa_common+0x4>
    13fc:	b1 11       	cpse	r27, r1
    13fe:	b1 93       	st	Z+, r27
    1400:	11 92       	st	Z+, r1
    1402:	cb 01       	movw	r24, r22
    1404:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <strrev>

00001408 <strrev>:
    1408:	dc 01       	movw	r26, r24
    140a:	fc 01       	movw	r30, r24
    140c:	67 2f       	mov	r22, r23
    140e:	71 91       	ld	r23, Z+
    1410:	77 23       	and	r23, r23
    1412:	e1 f7       	brne	.-8      	; 0x140c <strrev+0x4>
    1414:	32 97       	sbiw	r30, 0x02	; 2
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <strrev+0x18>
    1418:	7c 91       	ld	r23, X
    141a:	6d 93       	st	X+, r22
    141c:	70 83       	st	Z, r23
    141e:	62 91       	ld	r22, -Z
    1420:	ae 17       	cp	r26, r30
    1422:	bf 07       	cpc	r27, r31
    1424:	c8 f3       	brcs	.-14     	; 0x1418 <strrev+0x10>
    1426:	08 95       	ret

00001428 <_exit>:
    1428:	f8 94       	cli

0000142a <__stop_program>:
    142a:	ff cf       	rjmp	.-2      	; 0x142a <__stop_program>
