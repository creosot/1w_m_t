
1wire_martin_tom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000013aa  0000143e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  0080012e  0080012e  0000146c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004138  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ab  00000000  00000000  000058bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fdc  00000000  00000000  00006c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  00008c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c05  00000000  00000000  00009554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003307  00000000  00000000  0000a159  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000d460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
       8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
       c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      18:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_6>
      1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      2c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_11>
      30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      38:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_14>
      3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      48:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__vector_18>
      4c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_19>
      50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      54:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      58:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      5c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      60:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
      64:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	44 53       	subi	r20, 0x34	; 52
      6a:	31 38       	cpi	r19, 0x81	; 129
      6c:	58 32       	cpi	r21, 0x28	; 40
      6e:	30 5f       	subi	r19, 0xF0	; 240
      70:	73 74       	andi	r23, 0x43	; 67
      72:	61 72       	andi	r22, 0x21	; 33
      74:	74 5f       	subi	r23, 0xF4	; 244
      76:	6d 65       	ori	r22, 0x5D	; 93
      78:	61 73       	andi	r22, 0x31	; 49
      7a:	3a 20       	and	r3, r10
      7c:	53 68       	ori	r21, 0x83	; 131
      7e:	6f 72       	andi	r22, 0x2F	; 47
      80:	74 20       	and	r7, r4
      82:	43 69       	ori	r20, 0x93	; 147
      84:	72 63       	ori	r23, 0x32	; 50
      86:	75 69       	ori	r23, 0x95	; 149
      88:	74 21       	and	r23, r4
      8a:	0d 00       	.word	0x000d	; ????

0000008c <__c.2201>:
      8c:	20 43 52 43 20 4f 2e 4b 2e 20 00                     CRC O.K. .

00000097 <__c.2199>:
      97:	20 43 52 43 20 46 41 49 4c 20 00                     CRC FAIL .

000000a2 <__c.2194>:
      a2:	28 20 3f 20 29 00                                   ( ? ).

000000a8 <__c.2192>:
      a8:	28 32 32 29 00                                      (22).

000000ad <__c.2190>:
      ad:	28 31 38 42 29 00                                   (18B).

000000b3 <__c.2188>:
      b3:	28 31 38 53 29 00                                   (18S).

000000b9 <__c.2186>:
      b9:	20 00                                                .

000000bb <__c.2184>:
      bb:	53 4e 3a 20 00                                      SN: .

000000c0 <__c.2182>:
      c0:	43 52 43 3a 00                                      CRC:.

000000c5 <__c.2180>:
      c5:	46 43 3a 00                                         FC:.

000000c9 <__c.2393>:
      c9:	42 75 73 20 45 72 72 6f 72 0d 0a 00                 Bus Error...

000000d5 <__c.2390>:
      d5:	4e 6f 20 53 65 6e 73 6f 72 20 66 6f 75 6e 64 0d     No Sensor found.
      e5:	0a 00                                               ..

000000e7 <__c.2388>:
      e7:	0d 0a 53 63 61 6e 6e 69 6e 67 20 42 75 73 20 66     ..Scanning Bus f
      f7:	6f 72 20 44 53 31 38 58 32 30 0d 0a 00              or DS18X20...

00000104 <__c.2353>:
     104:	0d 0a 00                                            ...

00000107 <__c.2351>:
     107:	0d 0a 00                                            ...

0000010a <__c.2349>:
     10a:	0d 0a 00                                            ...

0000010d <__c.2343>:
     10d:	20 70 6f 77 65 72 65 64 0d 0a 00                     powered...

00000118 <__c.2341>:
     118:	65 78 74 65 72 6e 61 6c 6c 79 00                    externally.

00000123 <__c.2339>:
     123:	70 61 72 61 73 69 74 65 00                          parasite.

0000012c <__c.2337>:
     12c:	20 77 68 69 63 68 20 69 73 20 00                     which is .

00000137 <__c.2335>:
     137:	44 53 31 38 42 32 30 00                             DS18B20.

0000013f <__c.2333>:
     13f:	44 53 31 38 32 32 00                                DS1822.

00000146 <__c.2331>:
     146:	44 53 31 38 53 32 30 2f 44 53 31 38 32 30 00        DS18S20/DS1820.

00000155 <__c.2329>:
     155:	20 69 73 20 61 20 00                                 is a .

0000015c <__c.2327>:
     15c:	53 65 6e 73 6f 72 23 20 00                          Sensor# .

00000165 <__c.2322>:
     165:	0d 0a 00                                            ...

00000168 <__c.2320>:
     168:	20 3a 20 00                                          : .

0000016c <__c.2318>:
     16c:	23 20 69 6e 20 42 75 73 20 3a 00                    # in Bus :.

00000177 <__c.2316>:
     177:	20 44 53 31 38 58 32 30 20 53 65 6e 73 6f 72 28      DS18X20 Sensor(
     187:	73 29 20 61 76 61 69 6c 61 62 6c 65 3a 0d 0a 00     s) available:...

00000197 <__c.2314>:
     197:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1a7:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1b7:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 -----------.

000001c3 <__c.2312>:
     1c3:	0d 0a 44 53 31 38 58 32 30 20 31 2d 57 69 72 65     ..DS18X20 1-Wire
     1d3:	2d 52 65 61 64 65 72 20 44 65 6d 6f 20 62 79 20     -Reader Demo by 
     1e3:	4d 61 72 74 69 6e 20 54 68 6f 6d 61 73 0d 0a 00     Martin Thomas...
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	d8 e0       	ldi	r29, 0x08	; 8
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61

00000200 <__do_copy_data>:
     200:	11 e0       	ldi	r17, 0x01	; 1
     202:	a0 e0       	ldi	r26, 0x00	; 0
     204:	b1 e0       	ldi	r27, 0x01	; 1
     206:	ea ea       	ldi	r30, 0xAA	; 170
     208:	f3 e1       	ldi	r31, 0x13	; 19
     20a:	02 c0       	rjmp	.+4      	; 0x210 <__do_copy_data+0x10>
     20c:	05 90       	lpm	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	ae 32       	cpi	r26, 0x2E	; 46
     212:	b1 07       	cpc	r27, r17
     214:	d9 f7       	brne	.-10     	; 0x20c <__do_copy_data+0xc>

00000216 <__do_clear_bss>:
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	ae e2       	ldi	r26, 0x2E	; 46
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	01 c0       	rjmp	.+2      	; 0x220 <.do_clear_bss_start>

0000021e <.do_clear_bss_loop>:
     21e:	1d 92       	st	X+, r1

00000220 <.do_clear_bss_start>:
     220:	a4 3a       	cpi	r26, 0xA4	; 164
     222:	b2 07       	cpc	r27, r18
     224:	e1 f7       	brne	.-8      	; 0x21e <.do_clear_bss_loop>
     226:	0e 94 54 07 	call	0xea8	; 0xea8 <main>
     22a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <_exit>

0000022e <__bad_interrupt>:
     22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000232 <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     232:	61 15       	cp	r22, r1
     234:	71 05       	cpc	r23, r1
     236:	b1 f0       	breq	.+44     	; 0x264 <crc8+0x32>
     238:	fc 01       	movw	r30, r24
     23a:	68 0f       	add	r22, r24
     23c:	79 1f       	adc	r23, r25
     23e:	80 e0       	ldi	r24, 0x00	; 0
	{
		b = data[loop_count];
     240:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
     242:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
     244:	21 91       	ld	r18, Z+
     246:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
     248:	32 2f       	mov	r19, r18
     24a:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
     24c:	30 ff       	sbrs	r19, 0
     24e:	0c c0       	rjmp	.+24     	; 0x268 <crc8+0x36>
				crc = crc ^ CRC8POLY;
     250:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
     252:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
     254:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
     256:	26 95       	lsr	r18
     258:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
     25a:	b1 f7       	brne	.-20     	; 0x248 <crc8+0x16>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     25c:	e6 17       	cp	r30, r22
     25e:	f7 07       	cpc	r31, r23
     260:	89 f7       	brne	.-30     	; 0x244 <crc8+0x12>
     262:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
     268:	86 95       	lsr	r24
     26a:	f5 cf       	rjmp	.-22     	; 0x256 <crc8+0x24>

0000026c <DS18X20_raw_to_decicelsius>:
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
	if ( ret == DS18X20_OK ) {
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
	}
	return ret;
}
     26c:	fb 01       	movw	r30, r22
     26e:	41 81       	ldd	r20, Z+1	; 0x01
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	54 2f       	mov	r21, r20
     274:	44 27       	eor	r20, r20
     276:	90 81       	ld	r25, Z
     278:	49 2b       	or	r20, r25
     27a:	9a 01       	movw	r18, r20
     27c:	80 31       	cpi	r24, 0x10	; 16
     27e:	91 f4       	brne	.+36     	; 0x2a4 <DS18X20_raw_to_decicelsius+0x38>
     280:	4e 7f       	andi	r20, 0xFE	; 254
     282:	44 0f       	add	r20, r20
     284:	55 1f       	adc	r21, r21
     286:	44 0f       	add	r20, r20
     288:	55 1f       	adc	r21, r21
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	96 81       	ldd	r25, Z+6	; 0x06
     290:	2c e0       	ldi	r18, 0x0C	; 12
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	29 1b       	sub	r18, r25
     296:	31 09       	sbc	r19, r1
     298:	24 0f       	add	r18, r20
     29a:	35 1f       	adc	r19, r21
     29c:	33 23       	and	r19, r19
     29e:	0c f0       	brlt	.+2      	; 0x2a2 <DS18X20_raw_to_decicelsius+0x36>
     2a0:	5b c0       	rjmp	.+182    	; 0x358 <DS18X20_raw_to_decicelsius+0xec>
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DS18X20_raw_to_decicelsius+0x3c>
     2a4:	55 23       	and	r21, r21
     2a6:	2c f4       	brge	.+10     	; 0x2b2 <DS18X20_raw_to_decicelsius+0x46>
     2a8:	31 95       	neg	r19
     2aa:	21 95       	neg	r18
     2ac:	31 09       	sbc	r19, r1
     2ae:	a1 e0       	ldi	r26, 0x01	; 1
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <DS18X20_raw_to_decicelsius+0x48>
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	88 32       	cpi	r24, 0x28	; 40
     2b6:	11 f0       	breq	.+4      	; 0x2bc <DS18X20_raw_to_decicelsius+0x50>
     2b8:	82 32       	cpi	r24, 0x22	; 34
     2ba:	69 f4       	brne	.+26     	; 0x2d6 <DS18X20_raw_to_decicelsius+0x6a>
     2bc:	84 81       	ldd	r24, Z+4	; 0x04
     2be:	80 76       	andi	r24, 0x60	; 96
     2c0:	80 32       	cpi	r24, 0x20	; 32
     2c2:	31 f0       	breq	.+12     	; 0x2d0 <DS18X20_raw_to_decicelsius+0x64>
     2c4:	80 34       	cpi	r24, 0x40	; 64
     2c6:	31 f0       	breq	.+12     	; 0x2d4 <DS18X20_raw_to_decicelsius+0x68>
     2c8:	81 11       	cpse	r24, r1
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <DS18X20_raw_to_decicelsius+0x6a>
     2cc:	28 7f       	andi	r18, 0xF8	; 248
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <DS18X20_raw_to_decicelsius+0x6a>
     2d0:	2c 7f       	andi	r18, 0xFC	; 252
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <DS18X20_raw_to_decicelsius+0x6a>
     2d4:	2e 7f       	andi	r18, 0xFE	; 254
     2d6:	a9 01       	movw	r20, r18
     2d8:	52 95       	swap	r21
     2da:	42 95       	swap	r20
     2dc:	4f 70       	andi	r20, 0x0F	; 15
     2de:	45 27       	eor	r20, r21
     2e0:	5f 70       	andi	r21, 0x0F	; 15
     2e2:	45 27       	eor	r20, r21
     2e4:	ba 01       	movw	r22, r20
     2e6:	66 0f       	add	r22, r22
     2e8:	77 1f       	adc	r23, r23
     2ea:	44 0f       	add	r20, r20
     2ec:	55 1f       	adc	r21, r21
     2ee:	44 0f       	add	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	44 0f       	add	r20, r20
     2f4:	55 1f       	adc	r21, r21
     2f6:	64 0f       	add	r22, r20
     2f8:	75 1f       	adc	r23, r21
     2fa:	2f 70       	andi	r18, 0x0F	; 15
     2fc:	33 27       	eor	r19, r19
     2fe:	c9 01       	movw	r24, r18
     300:	96 95       	lsr	r25
     302:	98 2f       	mov	r25, r24
     304:	88 27       	eor	r24, r24
     306:	97 95       	ror	r25
     308:	87 95       	ror	r24
     30a:	32 2f       	mov	r19, r18
     30c:	22 27       	eor	r18, r18
     30e:	33 0f       	add	r19, r19
     310:	82 0f       	add	r24, r18
     312:	93 1f       	adc	r25, r19
     314:	a1 11       	cpse	r26, r1
     316:	15 c0       	rjmp	.+42     	; 0x342 <DS18X20_raw_to_decicelsius+0xd6>
     318:	ac 01       	movw	r20, r24
     31a:	5e 5f       	subi	r21, 0xFE	; 254
     31c:	45 2f       	mov	r20, r21
     31e:	55 27       	eor	r21, r21
     320:	46 95       	lsr	r20
     322:	46 95       	lsr	r20
     324:	9b 01       	movw	r18, r22
     326:	24 0f       	add	r18, r20
     328:	35 1f       	adc	r19, r21
     32a:	c9 01       	movw	r24, r18
     32c:	8a 5d       	subi	r24, 0xDA	; 218
     32e:	9d 4f       	sbci	r25, 0xFD	; 253
     330:	89 30       	cpi	r24, 0x09	; 9
     332:	97 40       	sbci	r25, 0x07	; 7
     334:	18 f4       	brcc	.+6      	; 0x33c <DS18X20_raw_to_decicelsius+0xd0>
     336:	82 2f       	mov	r24, r18
     338:	93 2f       	mov	r25, r19
     33a:	08 95       	ret
     33c:	80 ed       	ldi	r24, 0xD0	; 208
     33e:	97 e0       	ldi	r25, 0x07	; 7
     340:	08 95       	ret
     342:	89 2f       	mov	r24, r25
     344:	99 27       	eor	r25, r25
     346:	86 95       	lsr	r24
     348:	86 95       	lsr	r24
     34a:	9b 01       	movw	r18, r22
     34c:	28 0f       	add	r18, r24
     34e:	39 1f       	adc	r19, r25
     350:	31 95       	neg	r19
     352:	21 95       	neg	r18
     354:	31 09       	sbc	r19, r1
     356:	e9 cf       	rjmp	.-46     	; 0x32a <DS18X20_raw_to_decicelsius+0xbe>
     358:	f9 01       	movw	r30, r18
     35a:	f2 95       	swap	r31
     35c:	e2 95       	swap	r30
     35e:	ef 70       	andi	r30, 0x0F	; 15
     360:	ef 27       	eor	r30, r31
     362:	ff 70       	andi	r31, 0x0F	; 15
     364:	ef 27       	eor	r30, r31
     366:	bf 01       	movw	r22, r30
     368:	66 0f       	add	r22, r22
     36a:	77 1f       	adc	r23, r23
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	6e 0f       	add	r22, r30
     37a:	7f 1f       	adc	r23, r31
     37c:	a9 01       	movw	r20, r18
     37e:	4f 70       	andi	r20, 0x0F	; 15
     380:	55 27       	eor	r21, r21
     382:	ca 01       	movw	r24, r20
     384:	96 95       	lsr	r25
     386:	98 2f       	mov	r25, r24
     388:	88 27       	eor	r24, r24
     38a:	97 95       	ror	r25
     38c:	87 95       	ror	r24
     38e:	54 2f       	mov	r21, r20
     390:	44 27       	eor	r20, r20
     392:	55 0f       	add	r21, r21
     394:	84 0f       	add	r24, r20
     396:	95 1f       	adc	r25, r21
     398:	bf cf       	rjmp	.-130    	; 0x318 <DS18X20_raw_to_decicelsius+0xac>

0000039a <read_scratchpad>:
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	7b 01       	movw	r14, r22
     3a8:	04 2f       	mov	r16, r20
     3aa:	bc 01       	movw	r22, r24
     3ac:	8e eb       	ldi	r24, 0xBE	; 190
     3ae:	0e 94 93 04 	call	0x926	; 0x926 <ow_command>
     3b2:	00 23       	and	r16, r16
     3b4:	69 f0       	breq	.+26     	; 0x3d0 <read_scratchpad+0x36>
     3b6:	e7 01       	movw	r28, r14
     3b8:	01 50       	subi	r16, 0x01	; 1
     3ba:	10 e0       	ldi	r17, 0x00	; 0
     3bc:	0f 5f       	subi	r16, 0xFF	; 255
     3be:	1f 4f       	sbci	r17, 0xFF	; 255
     3c0:	0e 0d       	add	r16, r14
     3c2:	1f 1d       	adc	r17, r15
     3c4:	0e 94 35 04 	call	0x86a	; 0x86a <ow_byte_rd>
     3c8:	89 93       	st	Y+, r24
     3ca:	c0 17       	cp	r28, r16
     3cc:	d1 07       	cpc	r29, r17
     3ce:	d1 f7       	brne	.-12     	; 0x3c4 <read_scratchpad+0x2a>
     3d0:	69 e0       	ldi	r22, 0x09	; 9
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	c7 01       	movw	r24, r14
     3d6:	0e 94 19 01 	call	0x232	; 0x232 <crc8>
     3da:	81 11       	cpse	r24, r1
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <DS18X20_show_id_uart>:
     3ec:	af 92       	push	r10
     3ee:	bf 92       	push	r11
     3f0:	cf 92       	push	r12
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	5c 01       	movw	r10, r24
     402:	7b 01       	movw	r14, r22
     404:	61 15       	cp	r22, r1
     406:	71 05       	cpc	r23, r1
     408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	5b c0       	rjmp	.+182    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     40c:	8c 01       	movw	r16, r24
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	d0 e0       	ldi	r29, 0x00	; 0
     412:	6b 01       	movw	r12, r22
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	c8 1a       	sub	r12, r24
     418:	d1 08       	sbc	r13, r1
     41a:	20 97       	sbiw	r28, 0x00	; 0
     41c:	69 f4       	brne	.+26     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     41e:	85 ec       	ldi	r24, 0xC5	; 197
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     426:	f8 01       	movw	r30, r16
     428:	80 81       	ld	r24, Z
     42a:	0e 94 65 09 	call	0x12ca	; 0x12ca <uart_puthex_byte>
     42e:	89 eb       	ldi	r24, 0xB9	; 185
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     436:	23 c0       	rjmp	.+70     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     438:	cc 16       	cp	r12, r28
     43a:	dd 06       	cpc	r13, r29
     43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	5b c0       	rjmp	.+182    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     440:	80 ec       	ldi	r24, 0xC0	; 192
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	cf 16       	cp	r12, r31
     44c:	d1 04       	cpc	r13, r1
     44e:	69 f4       	brne	.+26     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     450:	8b eb       	ldi	r24, 0xBB	; 187
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     458:	f8 01       	movw	r30, r16
     45a:	80 81       	ld	r24, Z
     45c:	0e 94 65 09 	call	0x12ca	; 0x12ca <uart_puthex_byte>
     460:	89 eb       	ldi	r24, 0xB9	; 185
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     468:	25 c0       	rjmp	.+74     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     46a:	f8 01       	movw	r30, r16
     46c:	80 81       	ld	r24, Z
     46e:	0e 94 65 09 	call	0x12ca	; 0x12ca <uart_puthex_byte>
     472:	89 eb       	ldi	r24, 0xB9	; 185
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     47a:	20 97       	sbiw	r28, 0x00	; 0
     47c:	d9 f4       	brne	.+54     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     47e:	f5 01       	movw	r30, r10
     480:	80 81       	ld	r24, Z
     482:	80 31       	cpi	r24, 0x10	; 16
     484:	29 f4       	brne	.+10     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     486:	83 eb       	ldi	r24, 0xB3	; 179
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     48e:	12 c0       	rjmp	.+36     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     490:	88 32       	cpi	r24, 0x28	; 40
     492:	29 f4       	brne	.+10     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     494:	8d ea       	ldi	r24, 0xAD	; 173
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     49e:	82 32       	cpi	r24, 0x22	; 34
     4a0:	29 f4       	brne	.+10     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4a2:	88 ea       	ldi	r24, 0xA8	; 168
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4ac:	82 ea       	ldi	r24, 0xA2	; 162
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     4b4:	21 96       	adiw	r28, 0x01	; 1
     4b6:	0f 5f       	subi	r16, 0xFF	; 255
     4b8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ba:	ce 15       	cp	r28, r14
     4bc:	df 05       	cpc	r29, r15
     4be:	09 f0       	breq	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c0:	ac cf       	rjmp	.-168    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     4c2:	68 e0       	ldi	r22, 0x08	; 8
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	c5 01       	movw	r24, r10
     4c8:	0e 94 19 01 	call	0x232	; 0x232 <crc8>
     4cc:	88 23       	and	r24, r24
     4ce:	29 f0       	breq	.+10     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d0:	87 e9       	ldi	r24, 0x97	; 151
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     4d8:	12 c0       	rjmp	.+36     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4da:	8c e8       	ldi	r24, 0x8C	; 140
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     4e2:	0d c0       	rjmp	.+26     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4e4:	f8 01       	movw	r30, r16
     4e6:	80 81       	ld	r24, Z
     4e8:	0e 94 65 09 	call	0x12ca	; 0x12ca <uart_puthex_byte>
     4ec:	89 eb       	ldi	r24, 0xB9	; 185
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     4f4:	df cf       	rjmp	.-66     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4f6:	c1 30       	cpi	r28, 0x01	; 1
     4f8:	d1 05       	cpc	r29, r1
     4fa:	a1 f7       	brne	.-24     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4fc:	a9 cf       	rjmp	.-174    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	08 95       	ret

00000514 <DS18X20_find_sensor>:
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	8b 01       	movw	r16, r22
     520:	b8 01       	movw	r22, r16
     522:	88 81       	ld	r24, Y
     524:	0e 94 39 04 	call	0x872	; 0x872 <ow_rom_search>
     528:	88 83       	st	Y, r24
     52a:	81 50       	subi	r24, 0x01	; 1
     52c:	8d 3f       	cpi	r24, 0xFD	; 253
     52e:	50 f4       	brcc	.+20     	; 0x544 <DS18X20_find_sensor+0x30>
     530:	f8 01       	movw	r30, r16
     532:	90 81       	ld	r25, Z
     534:	98 32       	cpi	r25, 0x28	; 40
     536:	41 f0       	breq	.+16     	; 0x548 <DS18X20_find_sensor+0x34>
     538:	90 31       	cpi	r25, 0x10	; 16
     53a:	41 f0       	breq	.+16     	; 0x54c <DS18X20_find_sensor+0x38>
     53c:	92 32       	cpi	r25, 0x22	; 34
     53e:	81 f7       	brne	.-32     	; 0x520 <DS18X20_find_sensor+0xc>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	05 c0       	rjmp	.+10     	; 0x54e <DS18X20_find_sensor+0x3a>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	03 c0       	rjmp	.+6      	; 0x54e <DS18X20_find_sensor+0x3a>
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	01 c0       	rjmp	.+2      	; 0x54e <DS18X20_find_sensor+0x3a>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	08 95       	ret

00000558 <DS18X20_get_power_status>:
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
     55e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ow_reset>
     562:	be 01       	movw	r22, r28
     564:	84 eb       	ldi	r24, 0xB4	; 180
     566:	0e 94 93 04 	call	0x926	; 0x926 <ow_command>
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_bit_io>
     570:	c8 2f       	mov	r28, r24
     572:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ow_reset>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	c1 11       	cpse	r28, r1
     57a:	01 c0       	rjmp	.+2      	; 0x57e <DS18X20_get_power_status+0x26>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <DS18X20_start_meas>:
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	18 2f       	mov	r17, r24
     58c:	eb 01       	movw	r28, r22
     58e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ow_reset>
     592:	0e 94 16 03 	call	0x62c	; 0x62c <ow_input_pin_state>
     596:	88 23       	and	r24, r24
     598:	71 f0       	breq	.+28     	; 0x5b6 <DS18X20_start_meas+0x32>
     59a:	11 30       	cpi	r17, 0x01	; 1
     59c:	31 f0       	breq	.+12     	; 0x5aa <DS18X20_start_meas+0x26>
     59e:	be 01       	movw	r22, r28
     5a0:	84 e4       	ldi	r24, 0x44	; 68
     5a2:	0e 94 97 04 	call	0x92e	; 0x92e <ow_command_with_parasite_enable>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0b c0       	rjmp	.+22     	; 0x5c0 <DS18X20_start_meas+0x3c>
     5aa:	be 01       	movw	r22, r28
     5ac:	84 e4       	ldi	r24, 0x44	; 68
     5ae:	0e 94 93 04 	call	0x926	; 0x926 <ow_command>
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <DS18X20_start_meas+0x3c>
     5b6:	88 e6       	ldi	r24, 0x68	; 104
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	08 95       	ret

000005c8 <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	29 97       	sbiw	r28, 0x09	; 9
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	08 2f       	mov	r16, r24
     5e6:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     5e8:	49 e0       	ldi	r20, 0x09	; 9
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 cd 01 	call	0x39a	; 0x39a <read_scratchpad>
     5f8:	18 2f       	mov	r17, r24
	if ( ret == DS18X20_OK ) {
     5fa:	81 11       	cpse	r24, r1
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <DS18X20_read_decicelsius_single+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	80 2f       	mov	r24, r16
     606:	0e 94 36 01 	call	0x26c	; 0x26c <DS18X20_raw_to_decicelsius>
     60a:	f7 01       	movw	r30, r14
     60c:	91 83       	std	Z+1, r25	; 0x01
     60e:	80 83       	st	Z, r24
	}
	return ret;
}
     610:	81 2f       	mov	r24, r17
     612:	29 96       	adiw	r28, 0x09	; 9
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	08 95       	ret

0000062c <ow_input_pin_state>:

void ow_parasite_disable(void)
{
	OW_DIR_IN();
#if (!OW_USE_INTERNAL_PULLUP)
	OW_OUT_LOW();
     62c:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <OW_IN>
     630:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <OW_IN+0x1>
     634:	90 81       	ld	r25, Z
     636:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
     63a:	89 23       	and	r24, r25
     63c:	08 95       	ret

0000063e <ow_parasite_enable>:
     63e:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_OUT>
     642:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_OUT+0x1>
     646:	90 81       	ld	r25, Z
     648:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
     64c:	89 2b       	or	r24, r25
     64e:	80 83       	st	Z, r24
     650:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <OW_DDR>
     654:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <OW_DDR+0x1>
     658:	90 81       	ld	r25, Z
     65a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
     65e:	89 2b       	or	r24, r25
     660:	80 83       	st	Z, r24
     662:	08 95       	ret

00000664 <ow_bit_io_intern>:
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	c8 2f       	mov	r28, r24
     66a:	df b7       	in	r29, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <OW_DDR>
     672:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <OW_DDR+0x1>
     676:	90 81       	ld	r25, Z
     678:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
     67c:	89 2b       	or	r24, r25
     67e:	80 83       	st	Z, r24
     680:	8a e0       	ldi	r24, 0x0A	; 10
     682:	8a 95       	dec	r24
     684:	f1 f7       	brne	.-4      	; 0x682 <ow_bit_io_intern+0x1e>
     686:	00 c0       	rjmp	.+0      	; 0x688 <ow_bit_io_intern+0x24>
     688:	cc 23       	and	r28, r28
     68a:	51 f0       	breq	.+20     	; 0x6a0 <ow_bit_io_intern+0x3c>
     68c:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <OW_DDR>
     690:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <OW_DDR+0x1>
     694:	20 81       	ld	r18, Z
     696:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <OW_PIN_MASK>
     69a:	90 95       	com	r25
     69c:	92 23       	and	r25, r18
     69e:	90 83       	st	Z, r25
     6a0:	85 e4       	ldi	r24, 0x45	; 69
     6a2:	8a 95       	dec	r24
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <ow_bit_io_intern+0x3e>
     6a6:	00 00       	nop
     6a8:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <OW_IN>
     6ac:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <OW_IN+0x1>
     6b0:	20 81       	ld	r18, Z
     6b2:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <OW_PIN_MASK>
     6b6:	92 23       	and	r25, r18
     6b8:	09 f4       	brne	.+2      	; 0x6bc <ow_bit_io_intern+0x58>
     6ba:	c0 e0       	ldi	r28, 0x00	; 0
     6bc:	85 ee       	ldi	r24, 0xE5	; 229
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <ow_bit_io_intern+0x5a>
     6c2:	00 00       	nop
     6c4:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <OW_DDR>
     6c8:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <OW_DDR+0x1>
     6cc:	20 81       	ld	r18, Z
     6ce:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <OW_PIN_MASK>
     6d2:	90 95       	com	r25
     6d4:	92 23       	and	r25, r18
     6d6:	90 83       	st	Z, r25
     6d8:	61 11       	cpse	r22, r1
     6da:	0e 94 1f 03 	call	0x63e	; 0x63e <ow_parasite_enable>
     6de:	df bf       	out	0x3f, r29	; 63
     6e0:	85 e3       	ldi	r24, 0x35	; 53
     6e2:	8a 95       	dec	r24
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <ow_bit_io_intern+0x7e>
     6e6:	00 00       	nop
     6e8:	8c 2f       	mov	r24, r28
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     6f0:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <OW_OUT>
     6f4:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <OW_OUT+0x1>
     6f8:	90 81       	ld	r25, Z
     6fa:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
     6fe:	80 95       	com	r24
     700:	89 23       	and	r24, r25
     702:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     704:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <OW_DDR>
     708:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <OW_DDR+0x1>
     70c:	90 81       	ld	r25, Z
     70e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
     712:	89 2b       	or	r24, r25
     714:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	8f e7       	ldi	r24, 0x7F	; 127
     718:	97 e0       	ldi	r25, 0x07	; 7
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <ow_reset+0x2a>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <ow_reset+0x30>
     720:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     722:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     724:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     726:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <OW_DDR>
     72a:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <OW_DDR+0x1>
     72e:	90 81       	ld	r25, Z
     730:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
     734:	80 95       	com	r24
     736:	89 23       	and	r24, r25
     738:	80 83       	st	Z, r24
     73a:	ef ef       	ldi	r30, 0xFF	; 255
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <ow_reset+0x4e>
     742:	00 c0       	rjmp	.+0      	; 0x744 <ow_reset+0x54>
     744:	00 00       	nop
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     746:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <OW_IN>
     74a:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <OW_IN+0x1>
     74e:	30 81       	ld	r19, Z
     750:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <OW_PIN_MASK>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     754:	2f bf       	out	0x3f, r18	; 63
     756:	ef e7       	ldi	r30, 0x7F	; 127
     758:	f6 e0       	ldi	r31, 0x06	; 6
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <ow_reset+0x6a>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <ow_reset+0x70>
     760:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     762:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <OW_IN>
     766:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <OW_IN+0x1>
     76a:	20 81       	ld	r18, Z
     76c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <OW_PIN_MASK>
     770:	92 23       	and	r25, r18
     772:	11 f0       	breq	.+4      	; 0x778 <ow_reset+0x88>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     774:	83 23       	and	r24, r19
     776:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     778:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err; //err=0 -sensor got job
}
     77a:	08 95       	ret

0000077c <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
     77c:	50 93 9b 01 	sts	0x019B, r21	; 0x80019b <OW_DDR+0x1>
     780:	40 93 9a 01 	sts	0x019A, r20	; 0x80019a <OW_DDR>
	OW_OUT=out;
     784:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <OW_OUT+0x1>
     788:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <OW_OUT>
	OW_IN=in;
     78c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <OW_IN+0x1>
     790:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <OW_IN>
	OW_PIN_MASK = (1 << pin);
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	01 c0       	rjmp	.+2      	; 0x79a <ow_set_bus+0x1e>
     798:	88 0f       	add	r24, r24
     79a:	2a 95       	dec	r18
     79c:	ea f7       	brpl	.-6      	; 0x798 <ow_set_bus+0x1c>
     79e:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <OW_PIN_MASK>
	ow_reset();
     7a2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ow_reset>
     7a6:	08 95       	ret

000007a8 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	81 70       	andi	r24, 0x01	; 1
     7ac:	0e 94 32 03 	call	0x664	; 0x664 <ow_bit_io_intern>
}
     7b0:	08 95       	ret

000007b2 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	c8 2f       	mov	r28, r24
     7b8:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     7ba:	8c 2f       	mov	r24, r28
     7bc:	81 70       	andi	r24, 0x01	; 1
     7be:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_bit_io>
		b >>= 1;
     7c2:	c6 95       	lsr	r28
		if( j ) {
     7c4:	81 11       	cpse	r24, r1
			b |= 0x80;
     7c6:	c0 68       	ori	r28, 0x80	; 128
     7c8:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     7ca:	b9 f7       	brne	.-18     	; 0x7ba <ow_byte_wr+0x8>
	
	return b;
}
     7cc:	8c 2f       	mov	r24, r28
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     7da:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     7dc:	d1 30       	cpi	r29, 0x01	; 1
     7de:	49 f0       	breq	.+18     	; 0x7f2 <ow_byte_wr_with_parasite_enable+0x1e>
			j = ow_bit_io_intern( b & 1, 0 );
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	8c 2f       	mov	r24, r28
     7e4:	81 70       	andi	r24, 0x01	; 1
     7e6:	0e 94 32 03 	call	0x664	; 0x664 <ow_bit_io_intern>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
		}
		b >>= 1;
     7ea:	c6 95       	lsr	r28
		if( j ) {
     7ec:	81 11       	cpse	r24, r1
     7ee:	09 c0       	rjmp	.+18     	; 0x802 <ow_byte_wr_with_parasite_enable+0x2e>
     7f0:	09 c0       	rjmp	.+18     	; 0x804 <ow_byte_wr_with_parasite_enable+0x30>
	
	do {
		if ( i != 1 ) {
			j = ow_bit_io_intern( b & 1, 0 );
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	8c 2f       	mov	r24, r28
     7f6:	81 70       	andi	r24, 0x01	; 1
     7f8:	0e 94 32 03 	call	0x664	; 0x664 <ow_bit_io_intern>
		}
		b >>= 1;
     7fc:	c6 95       	lsr	r28
		if( j ) {
     7fe:	88 23       	and	r24, r24
     800:	19 f0       	breq	.+6      	; 0x808 <ow_byte_wr_with_parasite_enable+0x34>
			b |= 0x80;
     802:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     804:	d1 50       	subi	r29, 0x01	; 1
     806:	51 f7       	brne	.-44     	; 0x7dc <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     808:	8c 2f       	mov	r24, r28
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	e8 2e       	mov	r14, r24
     81e:	eb 01       	movw	r28, r22
     820:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     822:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ow_reset>

	if( id ) {
     826:	20 97       	sbiw	r28, 0x00	; 0
     828:	69 f0       	breq	.+26     	; 0x844 <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     82a:	85 e5       	ldi	r24, 0x55	; 85
     82c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ow_byte_wr>
     830:	8e 01       	movw	r16, r28
     832:	08 5f       	subi	r16, 0xF8	; 248
     834:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     836:	89 91       	ld	r24, Y+
     838:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ow_byte_wr>
			id++;
		} while( --i );
     83c:	c0 17       	cp	r28, r16
     83e:	d1 07       	cpc	r29, r17
     840:	d1 f7       	brne	.-12     	; 0x836 <ow_command_intern+0x26>
     842:	03 c0       	rjmp	.+6      	; 0x84a <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     844:	8c ec       	ldi	r24, 0xCC	; 204
     846:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     84a:	ff 20       	and	r15, r15
     84c:	21 f0       	breq	.+8      	; 0x856 <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
     84e:	8e 2d       	mov	r24, r14
     850:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <ow_byte_wr_with_parasite_enable>
     854:	03 c0       	rjmp	.+6      	; 0x85c <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
     856:	8e 2d       	mov	r24, r14
     858:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ow_byte_wr>
	}
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	08 95       	ret

0000086a <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ow_byte_wr>
}
     870:	08 95       	ret

00000872 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	d8 2e       	mov	r13, r24
     882:	8b 01       	movw	r16, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     884:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ow_reset>
     888:	81 11       	cpse	r24, r1
     88a:	2b c0       	rjmp	.+86     	; 0x8e2 <ow_rom_search+0x70>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     88c:	80 ef       	ldi	r24, 0xF0	; 240
     88e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     892:	e1 2c       	mov	r14, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     894:	c0 e4       	ldi	r28, 0x40	; 64
     896:	0f 2e       	mov	r0, r31
     898:	f8 ef       	ldi	r31, 0xF8	; 248
     89a:	ff 2e       	mov	r15, r31
     89c:	f0 2d       	mov	r31, r0
     89e:	fc 0e       	add	r15, r28
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_bit_io>
     8a6:	d8 2f       	mov	r29, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_bit_io>
     8ae:	88 23       	and	r24, r24
     8b0:	19 f0       	breq	.+6      	; 0x8b8 <ow_rom_search+0x46>
				if( b ) {               // 0b11
     8b2:	dd 23       	and	r29, r29
     8b4:	d1 f0       	breq	.+52     	; 0x8ea <ow_rom_search+0x78>
     8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <ow_rom_search+0x74>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     8b8:	d1 11       	cpse	r29, r1
     8ba:	24 c0       	rjmp	.+72     	; 0x904 <__stack+0x5>
					if( diff > i || ((*id & 1) && diff != i) ) {
     8bc:	cd 15       	cp	r28, r13
     8be:	e8 f0       	brcs	.+58     	; 0x8fa <ow_rom_search+0x88>
     8c0:	f8 01       	movw	r30, r16
     8c2:	80 81       	ld	r24, Z
     8c4:	80 ff       	sbrs	r24, 0
     8c6:	11 c0       	rjmp	.+34     	; 0x8ea <ow_rom_search+0x78>
     8c8:	dc 12       	cpse	r13, r28
     8ca:	1a c0       	rjmp	.+52     	; 0x900 <__stack+0x1>
     8cc:	0e c0       	rjmp	.+28     	; 0x8ea <ow_rom_search+0x78>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     8ce:	c1 50       	subi	r28, 0x01	; 1
			
		} while( --j );
     8d0:	cf 11       	cpse	r28, r15
     8d2:	e6 cf       	rjmp	.-52     	; 0x8a0 <ow_rom_search+0x2e>
		
		id++;                           // next byte
     8d4:	0f 5f       	subi	r16, 0xFF	; 255
     8d6:	1f 4f       	sbci	r17, 0xFF	; 255
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     8d8:	cf 2d       	mov	r28, r15
			
		} while( --j );
		
		id++;                           // next byte
	
	} while( i );
     8da:	f1 10       	cpse	r15, r1
     8dc:	dc cf       	rjmp	.-72     	; 0x896 <ow_rom_search+0x24>
     8de:	8e 2d       	mov	r24, r14
     8e0:	1a c0       	rjmp	.+52     	; 0x916 <__stack+0x17>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	18 c0       	rjmp	.+48     	; 0x916 <__stack+0x17>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     8e6:	8e ef       	ldi	r24, 0xFE	; 254
     8e8:	16 c0       	rjmp	.+44     	; 0x916 <__stack+0x17>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_bit_io>
			*id >>= 1;
     8f0:	f8 01       	movw	r30, r16
     8f2:	90 81       	ld	r25, Z
     8f4:	96 95       	lsr	r25
     8f6:	90 83       	st	Z, r25
     8f8:	ea cf       	rjmp	.-44     	; 0x8ce <ow_rom_search+0x5c>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     8fa:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     8fc:	d1 e0       	ldi	r29, 0x01	; 1
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
						next_diff = i;  // next pass 0
     900:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     902:	d1 e0       	ldi	r29, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     904:	8d 2f       	mov	r24, r29
     906:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <ow_bit_io>
			*id >>= 1;
     90a:	f8 01       	movw	r30, r16
     90c:	90 81       	ld	r25, Z
     90e:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
     910:	90 68       	ori	r25, 0x80	; 128
     912:	90 83       	st	Z, r25
     914:	dc cf       	rjmp	.-72     	; 0x8ce <ow_rom_search+0x5c>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	08 95       	ret

00000926 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	0e 94 08 04 	call	0x810	; 0x810 <ow_command_intern>
     92c:	08 95       	ret

0000092e <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	0e 94 08 04 	call	0x810	; 0x810 <ow_command_intern>
     934:	08 95       	ret

00000936 <search_sensors>:
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5)); //input
	PORTC |= (1 << PORTC4) | (1 << PORTC5); //pull up
}

void initGenerator(){
	DDRC |= (1 << PORTC4); //output
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	29 97       	sbiw	r28, 0x09	; 9
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	87 ee       	ldi	r24, 0xE7	; 231
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     952:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ow_reset>
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	89 87       	std	Y+9, r24	; 0x09
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	09 96       	adiw	r24, 0x09	; 9
     964:	0e 94 8a 02 	call	0x514	; 0x514 <DS18X20_find_sensor>
     968:	89 85       	ldd	r24, Y+9	; 0x09
     96a:	8f 3f       	cpi	r24, 0xFF	; 255
     96c:	31 f4       	brne	.+12     	; 0x97a <search_sensors+0x44>
     96e:	85 ed       	ldi	r24, 0xD5	; 213
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	15 c0       	rjmp	.+42     	; 0x9a4 <search_sensors+0x6e>
     97a:	8e 3f       	cpi	r24, 0xFE	; 254
     97c:	31 f4       	brne	.+12     	; 0x98a <search_sensors+0x54>
     97e:	89 ec       	ldi	r24, 0xC9	; 201
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0d c0       	rjmp	.+26     	; 0x9a4 <search_sensors+0x6e>
     98a:	fe 01       	movw	r30, r28
     98c:	31 96       	adiw	r30, 0x01	; 1
     98e:	ac e9       	ldi	r26, 0x9C	; 156
     990:	b1 e0       	ldi	r27, 0x01	; 1
     992:	9e 01       	movw	r18, r28
     994:	27 5f       	subi	r18, 0xF7	; 247
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	81 91       	ld	r24, Z+
     99a:	8d 93       	st	X+, r24
     99c:	e2 17       	cp	r30, r18
     99e:	f3 07       	cpc	r31, r19
     9a0:	d9 f7       	brne	.-10     	; 0x998 <search_sensors+0x62>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	29 96       	adiw	r28, 0x09	; 9
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <__vector_11>:
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	8f 93       	push	r24
     9c2:	9f 93       	push	r25
     9c4:	af 93       	push	r26
     9c6:	bf 93       	push	r27
     9c8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timer1_millis>
     9cc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timer1_millis+0x1>
     9d0:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <timer1_millis+0x2>
     9d4:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <timer1_millis+0x3>
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	a1 1d       	adc	r26, r1
     9dc:	b1 1d       	adc	r27, r1
     9de:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timer1_millis>
     9e2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timer1_millis+0x1>
     9e6:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timer1_millis+0x2>
     9ea:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timer1_millis+0x3>
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_6>:
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	8f 93       	push	r24
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	a8 95       	wdr
     a12:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a16:	88 61       	ori	r24, 0x18	; 24
     a18:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a1c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <err>
     a28:	8f 91       	pop	r24
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <readTempForOnlyDS18b20>:
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ca e0       	ldi	r28, 0x0A	; 10
     a3e:	0c e9       	ldi	r16, 0x9C	; 156
     a40:	11 e0       	ldi	r17, 0x01	; 1
     a42:	a8 95       	wdr
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	0e 94 c2 02 	call	0x584	; 0x584 <DS18X20_start_meas>
     a4e:	d8 2f       	mov	r29, r24
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	8e e9       	ldi	r24, 0x9E	; 158
     a54:	94 e2       	ldi	r25, 0x24	; 36
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <readTempForOnlyDS18b20+0x22>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <readTempForOnlyDS18b20+0x2c>
     a60:	00 00       	nop
     a62:	69 e4       	ldi	r22, 0x49	; 73
     a64:	71 e0       	ldi	r23, 0x01	; 1
     a66:	f8 01       	movw	r30, r16
     a68:	80 81       	ld	r24, Z
     a6a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <DS18X20_read_decicelsius_single>
     a6e:	d1 11       	cpse	r29, r1
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <readTempForOnlyDS18b20+0x42>
     a72:	88 23       	and	r24, r24
     a74:	71 f0       	breq	.+28     	; 0xa92 <readTempForOnlyDS18b20+0x5e>
     a76:	ff ef       	ldi	r31, 0xFF	; 255
     a78:	23 ec       	ldi	r18, 0xC3	; 195
     a7a:	89 e0       	ldi	r24, 0x09	; 9
     a7c:	f1 50       	subi	r31, 0x01	; 1
     a7e:	20 40       	sbci	r18, 0x00	; 0
     a80:	80 40       	sbci	r24, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <readTempForOnlyDS18b20+0x48>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <readTempForOnlyDS18b20+0x52>
     a86:	00 00       	nop
     a88:	c1 50       	subi	r28, 0x01	; 1
     a8a:	d9 f6       	brne	.-74     	; 0xa42 <readTempForOnlyDS18b20+0xe>
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <err>
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <millis>:
     a9c:	f8 94       	cli
     a9e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <timer1_millis>
     aa2:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <timer1_millis+0x1>
     aa6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer1_millis+0x2>
     aaa:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer1_millis+0x3>
     aae:	78 94       	sei
     ab0:	08 95       	ret

00000ab2 <initWDT>:
     ab2:	98 e2       	ldi	r25, 0x28	; 40
     ab4:	88 e1       	ldi	r24, 0x18	; 24
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	a8 95       	wdr
     abc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ac6:	a8 95       	wdr
     ac8:	e0 e6       	ldi	r30, 0x60	; 96
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	80 64       	ori	r24, 0x40	; 64
     ad0:	80 83       	st	Z, r24
     ad2:	08 95       	ret

00000ad4 <disableWDT>:
     ad4:	a8 95       	wdr
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	a8 95       	wdr
     adc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ae0:	88 61       	ori	r24, 0x18	; 24
     ae2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ae6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	e0 e6       	ldi	r30, 0x60	; 96
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8f 7b       	andi	r24, 0xBF	; 191
     af4:	80 83       	st	Z, r24
     af6:	08 95       	ret

00000af8 <handleError>:
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	88 23       	and	r24, r24
     b04:	f9 f0       	breq	.+62     	; 0xb44 <handleError+0x4c>
     b06:	18 2f       	mov	r17, r24
     b08:	cc e4       	ldi	r28, 0x4C	; 76
     b0a:	d1 e0       	ldi	r29, 0x01	; 1
     b0c:	0f 2e       	mov	r0, r31
     b0e:	ff e0       	ldi	r31, 0x0F	; 15
     b10:	ff 2e       	mov	r15, r31
     b12:	f0 2d       	mov	r31, r0
     b14:	00 e1       	ldi	r16, 0x10	; 16
     b16:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <heatStatus>
     b1a:	0e 94 6a 05 	call	0xad4	; 0xad4 <disableWDT>
     b1e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <mode>
     b22:	8f b7       	in	r24, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	f8 82       	st	Y, r15
     b28:	09 83       	std	Y+1, r16	; 0x01
     b2a:	0a 83       	std	Y+2, r16	; 0x02
     b2c:	1b 83       	std	Y+3, r17	; 0x03
     b2e:	8f bf       	out	0x3f, r24	; 63
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	87 ea       	ldi	r24, 0xA7	; 167
     b34:	91 e6       	ldi	r25, 0x61	; 97
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <handleError+0x3e>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <handleError+0x48>
     b40:	00 00       	nop
     b42:	e9 cf       	rjmp	.-46     	; 0xb16 <handleError+0x1e>
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	08 95       	ret

00000b50 <initButton>:
     b50:	87 b1       	in	r24, 0x07	; 7
     b52:	8f 7c       	andi	r24, 0xCF	; 207
     b54:	87 b9       	out	0x07, r24	; 7
     b56:	88 b1       	in	r24, 0x08	; 8
     b58:	80 63       	ori	r24, 0x30	; 48
     b5a:	88 b9       	out	0x08, r24	; 8
     b5c:	08 95       	ret

00000b5e <initDisplay>:
}

void initDisplay(){
	DDRB |= 0b00111111;
     b5e:	84 b1       	in	r24, 0x04	; 4
     b60:	8f 63       	ori	r24, 0x3F	; 63
     b62:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b01100000;
     b64:	8a b1       	in	r24, 0x0a	; 10
     b66:	80 66       	ori	r24, 0x60	; 96
     b68:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0b00001111;
     b6a:	87 b1       	in	r24, 0x07	; 7
     b6c:	8f 60       	ori	r24, 0x0F	; 15
     b6e:	87 b9       	out	0x07, r24	; 7
     b70:	08 95       	ret

00000b72 <initTimer1>:
}

void initTimer1(){
	TCNT1 = 0;
     b72:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b76:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1AH = (uint8_t)(CTC_MATCH_OVERFLOW >> 8);
     b7a:	87 e0       	ldi	r24, 0x07	; 7
     b7c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
     b80:	80 ed       	ldi	r24, 0xD0	; 208
     b82:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0;
     b86:	e0 e8       	ldi	r30, 0x80	; 128
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	10 82       	st	Z, r1
	TCCR1A |= (0 << WGM11) | (0 << WGM10); //mode CTC
     b8c:	80 81       	ld	r24, Z
     b8e:	80 83       	st	Z, r24
	TCCR1B |= (0 << WGM13) | (1 << WGM12) |(0 << CS12) | (1 << CS11) | (0 << CS10); //mode CTC, clk/8
     b90:	e1 e8       	ldi	r30, 0x81	; 129
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8a 60       	ori	r24, 0x0A	; 10
     b98:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
     b9a:	ef e6       	ldi	r30, 0x6F	; 111
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	80 83       	st	Z, r24
     ba4:	08 95       	ret

00000ba6 <initTimer0>:
}

void initTimer0(){
	TCNT0 = 0;
     ba6:	16 bc       	out	0x26, r1	; 38
	OCR0A = 250; //4ms
     ba8:	8a ef       	ldi	r24, 0xFA	; 250
     baa:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0;
     bac:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01) | (0 << WGM00); //mode CTC
     bae:	84 b5       	in	r24, 0x24	; 36
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0 << WGM02) |(1 << CS02) | (0 << CS01) | (0 << CS00); //mode CTC, clk/256
     bb4:	85 b5       	in	r24, 0x25	; 37
     bb6:	84 60       	ori	r24, 0x04	; 4
     bb8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A); //Output Compare A Match Interrupt Enable
     bba:	ee e6       	ldi	r30, 0x6E	; 110
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	82 60       	ori	r24, 0x02	; 2
     bc2:	80 83       	st	Z, r24
     bc4:	08 95       	ret

00000bc6 <getButtonState>:
}

void getButtonState(uint8_t but){
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
	uint8_t state = PINC & buttonMask[but];
     bd4:	16 b1       	in	r17, 0x06	; 6
     bd6:	c8 2f       	mov	r28, r24
     bd8:	d0 e0       	ldi	r29, 0x00	; 0
     bda:	fe 01       	movw	r30, r28
     bdc:	e0 50       	subi	r30, 0x00	; 0
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	80 81       	ld	r24, Z
     be2:	18 23       	and	r17, r24
	if (state ^ buttonDebounceState[but]){
     be4:	fe 01       	movw	r30, r28
     be6:	ec 5b       	subi	r30, 0xBC	; 188
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	80 81       	ld	r24, Z
     bec:	81 17       	cp	r24, r17
     bee:	89 f0       	breq	.+34     	; 0xc12 <getButtonState+0x4c>
		buttonDebounceState[but] = state;
     bf0:	fe 01       	movw	r30, r28
     bf2:	ec 5b       	subi	r30, 0xBC	; 188
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	10 83       	st	Z, r17
		lastDebounceTime[but] = millis();
     bf8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
     bfc:	fe 01       	movw	r30, r28
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	e4 5c       	subi	r30, 0xC4	; 196
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	60 83       	st	Z, r22
     c0c:	71 83       	std	Z+1, r23	; 0x01
     c0e:	82 83       	std	Z+2, r24	; 0x02
     c10:	93 83       	std	Z+3, r25	; 0x03
	}
	if ((millis() - lastDebounceTime[but] > 39)){
     c12:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
     c16:	fe 01       	movw	r30, r28
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	e4 5c       	subi	r30, 0xC4	; 196
     c22:	fe 4f       	sbci	r31, 0xFE	; 254
     c24:	c0 80       	ld	r12, Z
     c26:	d1 80       	ldd	r13, Z+1	; 0x01
     c28:	e2 80       	ldd	r14, Z+2	; 0x02
     c2a:	f3 80       	ldd	r15, Z+3	; 0x03
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	8c 19       	sub	r24, r12
     c32:	9d 09       	sbc	r25, r13
     c34:	ae 09       	sbc	r26, r14
     c36:	bf 09       	sbc	r27, r15
     c38:	88 97       	sbiw	r24, 0x28	; 40
     c3a:	a1 05       	cpc	r26, r1
     c3c:	b1 05       	cpc	r27, r1
     c3e:	c8 f0       	brcs	.+50     	; 0xc72 <getButtonState+0xac>
		if (state ^ buttonPrefState[but]){
     c40:	fe 01       	movw	r30, r28
     c42:	ee 5f       	subi	r30, 0xFE	; 254
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	80 81       	ld	r24, Z
     c48:	81 17       	cp	r24, r17
     c4a:	99 f0       	breq	.+38     	; 0xc72 <getButtonState+0xac>
			buttonPrefState[but] = state;
     c4c:	fe 01       	movw	r30, r28
     c4e:	ee 5f       	subi	r30, 0xFE	; 254
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	10 83       	st	Z, r17
			buttonStateON[but] = (~state) & buttonMask[but];
     c54:	10 95       	com	r17
     c56:	fe 01       	movw	r30, r28
     c58:	e0 50       	subi	r30, 0x00	; 0
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	fe 01       	movw	r30, r28
     c60:	e6 5c       	subi	r30, 0xC6	; 198
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	91 2f       	mov	r25, r17
     c66:	98 23       	and	r25, r24
     c68:	90 83       	st	Z, r25
			buttonStateOFF[but] = (~state) ^ buttonMask[but];
     c6a:	c8 5c       	subi	r28, 0xC8	; 200
     c6c:	de 4f       	sbci	r29, 0xFE	; 254
     c6e:	18 27       	eor	r17, r24
     c70:	18 83       	st	Y, r17
		}
	}
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	08 95       	ret

00000c82 <setNumber>:

void setNumber(uint8_t num, uint8_t dig){
	if (num > MAXNUMBER-1 || dig>3) return;
     c82:	83 31       	cpi	r24, 0x13	; 19
     c84:	58 f5       	brcc	.+86     	; 0xcdc <setNumber+0x5a>
     c86:	64 30       	cpi	r22, 0x04	; 4
     c88:	48 f5       	brcc	.+82     	; 0xcdc <setNumber+0x5a>
	uint8_t pb, pd;
	pb = number[num][0];
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	fc 01       	movw	r30, r24
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	e8 5f       	subi	r30, 0xF8	; 248
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	20 81       	ld	r18, Z
	if (dig == 2) pb |= 0b00000001;
     c98:	62 30       	cpi	r22, 0x02	; 2
     c9a:	09 f4       	brne	.+2      	; 0xc9e <setNumber+0x1c>
     c9c:	21 60       	ori	r18, 0x01	; 1
	PORTB |= pb;
     c9e:	35 b1       	in	r19, 0x05	; 5
     ca0:	32 2b       	or	r19, r18
     ca2:	35 b9       	out	0x05, r19	; 5
	PORTB &= pb | 0b11000000;
     ca4:	35 b1       	in	r19, 0x05	; 5
     ca6:	20 6c       	ori	r18, 0xC0	; 192
     ca8:	23 23       	and	r18, r19
     caa:	25 b9       	out	0x05, r18	; 5
	pd = number[num][1];
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	fc 01       	movw	r30, r24
     cb2:	e8 5f       	subi	r30, 0xF8	; 248
     cb4:	fe 4f       	sbci	r31, 0xFE	; 254
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
	PORTD |= pd;
     cb8:	9b b1       	in	r25, 0x0b	; 11
     cba:	98 2b       	or	r25, r24
     cbc:	9b b9       	out	0x0b, r25	; 11
	PORTD &= pd | 0b10011111;
     cbe:	9b b1       	in	r25, 0x0b	; 11
     cc0:	8f 69       	ori	r24, 0x9F	; 159
     cc2:	89 23       	and	r24, r25
     cc4:	8b b9       	out	0x0b, r24	; 11
	PORTC &= 0b11110000;
     cc6:	88 b1       	in	r24, 0x08	; 8
     cc8:	80 7f       	andi	r24, 0xF0	; 240
     cca:	88 b9       	out	0x08, r24	; 8
	PORTC |= digit[dig];
     ccc:	98 b1       	in	r25, 0x08	; 8
     cce:	e6 2f       	mov	r30, r22
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	ec 5f       	subi	r30, 0xFC	; 252
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	80 81       	ld	r24, Z
     cd8:	89 2b       	or	r24, r25
     cda:	88 b9       	out	0x08, r24	; 8
     cdc:	08 95       	ret

00000cde <__vector_14>:
// 	}
// 	setNumber(temperature[counterDigit], counterDigit);
// 	counterDigit += 1;
// }

ISR(TIMER0_COMPA_vect){
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
	counterDigit &= 0b00000011;
     d00:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <counterDigit>
     d04:	83 70       	andi	r24, 0x03	; 3
     d06:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <counterDigit>
	temp += 1;
     d0a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	if (heatStatus == HEAT_ON){
     d14:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <heatStatus>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	a9 f4       	brne	.+42     	; 0xd46 <__vector_14+0x68>
		if (temp & 0b10000000){
     d1c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     d20:	88 23       	and	r24, r24
     d22:	34 f4       	brge	.+12     	; 0xd30 <__vector_14+0x52>
			setNumber(CLEAR, counterDigit);
     d24:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <counterDigit>
     d28:	8a e0       	ldi	r24, 0x0A	; 10
     d2a:	0e 94 41 06 	call	0xc82	; 0xc82 <setNumber>
     d2e:	15 c0       	rjmp	.+42     	; 0xd5a <__vector_14+0x7c>
		}
		else{
			setNumber(temperature[counterDigit], counterDigit);
     d30:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <counterDigit>
     d34:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <counterDigit>
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	e4 5b       	subi	r30, 0xB4	; 180
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	80 81       	ld	r24, Z
     d40:	0e 94 41 06 	call	0xc82	; 0xc82 <setNumber>
     d44:	0a c0       	rjmp	.+20     	; 0xd5a <__vector_14+0x7c>
		}
	}
	else{
		setNumber(temperature[counterDigit], counterDigit);
     d46:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <counterDigit>
     d4a:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <counterDigit>
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	e4 5b       	subi	r30, 0xB4	; 180
     d52:	fe 4f       	sbci	r31, 0xFE	; 254
     d54:	80 81       	ld	r24, Z
     d56:	0e 94 41 06 	call	0xc82	; 0xc82 <setNumber>
	}
	counterDigit += 1;
     d5a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <counterDigit>
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <counterDigit>
}
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti

00000d86 <convertTempToDigit>:
	PORTD &= pd | 0b10011111;
	PORTC &= 0b11110000;
	PORTC |= digit[dig];
}

void convertTempToDigit(uint16_t t, uint8_t mode){
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ac 01       	movw	r20, r24
     d90:	e6 2f       	mov	r30, r22
	uint16_t temp, d1, d2, d3, d4;
	if (t & 0x8000){
     d92:	99 23       	and	r25, r25
     d94:	3c f4       	brge	.+14     	; 0xda4 <convertTempToDigit+0x1e>
		 temp = ~t+1;
     d96:	51 95       	neg	r21
     d98:	41 95       	neg	r20
     d9a:	51 09       	sbc	r21, r1
		 minus = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <minus>
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <convertTempToDigit+0x22>
	} 
	else{
		temp = t;
		minus = 0;
     da4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <minus>
	}
	d4 = temp/1000;
     da8:	9a 01       	movw	r18, r20
     daa:	36 95       	lsr	r19
     dac:	27 95       	ror	r18
     dae:	36 95       	lsr	r19
     db0:	27 95       	ror	r18
     db2:	36 95       	lsr	r19
     db4:	27 95       	ror	r18
     db6:	a5 ec       	ldi	r26, 0xC5	; 197
     db8:	b0 e2       	ldi	r27, 0x20	; 32
     dba:	0e 94 8f 09 	call	0x131e	; 0x131e <__umulhisi3>
     dbe:	ec 01       	movw	r28, r24
     dc0:	d2 95       	swap	r29
     dc2:	c2 95       	swap	r28
     dc4:	cf 70       	andi	r28, 0x0F	; 15
     dc6:	cd 27       	eor	r28, r29
     dc8:	df 70       	andi	r29, 0x0F	; 15
     dca:	cd 27       	eor	r28, r29
	temp = temp - d4*1000;
     dcc:	28 ee       	ldi	r18, 0xE8	; 232
     dce:	33 e0       	ldi	r19, 0x03	; 3
     dd0:	c2 9f       	mul	r28, r18
     dd2:	c0 01       	movw	r24, r0
     dd4:	c3 9f       	mul	r28, r19
     dd6:	90 0d       	add	r25, r0
     dd8:	d2 9f       	mul	r29, r18
     dda:	90 0d       	add	r25, r0
     ddc:	11 24       	eor	r1, r1
     dde:	48 1b       	sub	r20, r24
     de0:	59 0b       	sbc	r21, r25
	d3 = temp/100;
     de2:	9a 01       	movw	r18, r20
     de4:	36 95       	lsr	r19
     de6:	27 95       	ror	r18
     de8:	36 95       	lsr	r19
     dea:	27 95       	ror	r18
     dec:	ab e7       	ldi	r26, 0x7B	; 123
     dee:	b4 e1       	ldi	r27, 0x14	; 20
     df0:	0e 94 8f 09 	call	0x131e	; 0x131e <__umulhisi3>
     df4:	8c 01       	movw	r16, r24
     df6:	16 95       	lsr	r17
     df8:	07 95       	ror	r16
	temp = temp - d3*100;
     dfa:	24 e6       	ldi	r18, 0x64	; 100
     dfc:	20 9f       	mul	r18, r16
     dfe:	c0 01       	movw	r24, r0
     e00:	21 9f       	mul	r18, r17
     e02:	90 0d       	add	r25, r0
     e04:	11 24       	eor	r1, r1
     e06:	48 1b       	sub	r20, r24
     e08:	59 0b       	sbc	r21, r25
	d2 = temp/10;
     e0a:	9a 01       	movw	r18, r20
     e0c:	ad ec       	ldi	r26, 0xCD	; 205
     e0e:	bc ec       	ldi	r27, 0xCC	; 204
     e10:	0e 94 8f 09 	call	0x131e	; 0x131e <__umulhisi3>
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	96 95       	lsr	r25
     e1e:	87 95       	ror	r24
	d1 = temp - d2*10;
     e20:	bc 01       	movw	r22, r24
     e22:	66 0f       	add	r22, r22
     e24:	77 1f       	adc	r23, r23
     e26:	9c 01       	movw	r18, r24
     e28:	22 0f       	add	r18, r18
     e2a:	33 1f       	adc	r19, r19
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	22 0f       	add	r18, r18
     e32:	33 1f       	adc	r19, r19
     e34:	26 0f       	add	r18, r22
     e36:	37 1f       	adc	r19, r23
     e38:	42 1b       	sub	r20, r18
     e3a:	53 0b       	sbc	r21, r19
	switch (mode){
     e3c:	e2 30       	cpi	r30, 0x02	; 2
     e3e:	29 f0       	breq	.+10     	; 0xe4a <convertTempToDigit+0xc4>
     e40:	e3 30       	cpi	r30, 0x03	; 3
     e42:	c1 f0       	breq	.+48     	; 0xe74 <convertTempToDigit+0xee>
     e44:	e1 30       	cpi	r30, 0x01	; 1
     e46:	c1 f4       	brne	.+48     	; 0xe78 <convertTempToDigit+0xf2>
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <convertTempToDigit+0xca>
			if (d4 == MINUS && d3 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
			if (minus) d4 = MINUS;
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
     e4a:	cd e0       	ldi	r28, 0x0D	; 13
     e4c:	d0 e0       	ldi	r29, 0x00	; 0
     e4e:	14 c0       	rjmp	.+40     	; 0xe78 <convertTempToDigit+0xf2>
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d4 == 0 && d3 == 0) d3 = CLEAR;
     e50:	20 97       	sbiw	r28, 0x00	; 0
     e52:	e1 f4       	brne	.+56     	; 0xe8c <convertTempToDigit+0x106>
     e54:	01 15       	cp	r16, r1
     e56:	11 05       	cpc	r17, r1
     e58:	e9 f0       	breq	.+58     	; 0xe94 <convertTempToDigit+0x10e>
     e5a:	1e c0       	rjmp	.+60     	; 0xe98 <convertTempToDigit+0x112>
			if (d4 == MINUS && d3 == 0) d3 = CLEAR;
     e5c:	01 15       	cp	r16, r1
     e5e:	11 05       	cpc	r17, r1
     e60:	11 f4       	brne	.+4      	; 0xe66 <convertTempToDigit+0xe0>
     e62:	0a e0       	ldi	r16, 0x0A	; 10
     e64:	10 e0       	ldi	r17, 0x00	; 0
			if (d4 == 0) d4 = CLEAR;
			if (minus) d4 = MINUS;
     e66:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <minus>
     e6a:	22 23       	and	r18, r18
     e6c:	29 f0       	breq	.+10     	; 0xe78 <convertTempToDigit+0xf2>
     e6e:	cc e0       	ldi	r28, 0x0C	; 12
     e70:	d0 e0       	ldi	r29, 0x00	; 0
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <convertTempToDigit+0xf2>
			break;
		case MODE_HIGH:
			d4 = DEFIS_UP;
			break;
		case MODE_LOW:
			d4 = DEFIS_DOWN;
     e74:	ce e0       	ldi	r28, 0x0E	; 14
     e76:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e78:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e7a:	f8 94       	cli
		temperature[0] = (uint8_t)d4;
     e7c:	ec e4       	ldi	r30, 0x4C	; 76
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
     e80:	c0 83       	st	Z, r28
		temperature[1] = (uint8_t)d3;
     e82:	01 83       	std	Z+1, r16	; 0x01
		temperature[2] = (uint8_t)d2;
     e84:	82 83       	std	Z+2, r24	; 0x02
		temperature[3] = (uint8_t)d1;
     e86:	43 83       	std	Z+3, r20	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e88:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <convertTempToDigit+0x118>
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d4 == 0 && d3 == 0) d3 = CLEAR;
			if (d4 == MINUS && d3 == 0) d3 = CLEAR;
     e8c:	cc 30       	cpi	r28, 0x0C	; 12
     e8e:	d1 05       	cpc	r29, r1
     e90:	29 f3       	breq	.-54     	; 0xe5c <convertTempToDigit+0xd6>
     e92:	e9 cf       	rjmp	.-46     	; 0xe66 <convertTempToDigit+0xe0>
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	switch (mode){
		case MODE_NORMAL:
			if (d4 == 0 && d3 == 0) d3 = CLEAR;
     e94:	0a e0       	ldi	r16, 0x0A	; 10
     e96:	10 e0       	ldi	r17, 0x00	; 0
			if (d4 == MINUS && d3 == 0) d3 = CLEAR;
			if (d4 == 0) d4 = CLEAR;
     e98:	ca e0       	ldi	r28, 0x0A	; 10
     e9a:	d0 e0       	ldi	r29, 0x00	; 0
     e9c:	e4 cf       	rjmp	.-56     	; 0xe66 <convertTempToDigit+0xe0>
		temperature[0] = (uint8_t)d4;
		temperature[1] = (uint8_t)d3;
		temperature[2] = (uint8_t)d2;
		temperature[3] = (uint8_t)d1;
	}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <main>:

int main(void)
{
	uint8_t nSensors, i;
		
	uart_init((UART_BAUD_SELECT((BAUD),F_CPU)));
     ea8:	87 e6       	ldi	r24, 0x67	; 103
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <uart_init>
		
	#ifndef OW_ONE_BUS
		ow_set_bus(&PIND,&PORTD,&DDRD,PORTD7);
     eb0:	27 e0       	ldi	r18, 0x07	; 7
     eb2:	4a e2       	ldi	r20, 0x2A	; 42
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	6b e2       	ldi	r22, 0x2B	; 43
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	89 e2       	ldi	r24, 0x29	; 41
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 be 03 	call	0x77c	; 0x77c <ow_set_bus>
	#endif
		
	sei();
     ec2:	78 94       	sei
		
	uart_puts_P( NEWLINESTR "DS18X20 1-Wire-Reader Demo by Martin Thomas" NEWLINESTR );
     ec4:	83 ec       	ldi	r24, 0xC3	; 195
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
	uart_puts_P(            "-------------------------------------------" );
     ecc:	87 e9       	ldi	r24, 0x97	; 151
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
		
	nSensors = search_sensors();
     ed4:	0e 94 9b 04 	call	0x936	; 0x936 <search_sensors>
     ed8:	f8 2e       	mov	r15, r24
	if (nSensors == 0){
     eda:	81 11       	cpse	r24, r1
     edc:	15 c1       	rjmp	.+554    	; 0x1108 <main+0x260>
		err = ERROR_NO_SENSOR_START;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <err>
	}
	uart_put_int( (int)nSensors );
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 41 09 	call	0x1282	; 0x1282 <uart_put_int>
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
     eec:	87 e7       	ldi	r24, 0x77	; 119
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     ef4:	5b c0       	rjmp	.+182    	; 0xfac <main+0x104>
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
			uart_puts_P("# in Bus :");
     ef6:	8c e6       	ldi	r24, 0x6C	; 108
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
			uart_put_int( (int)i + 1);
     efe:	c8 01       	movw	r24, r16
     f00:	0e 94 41 09 	call	0x1282	; 0x1282 <uart_put_int>
			uart_puts_P(" : ");
     f04:	88 e6       	ldi	r24, 0x68	; 104
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
     f0c:	68 e0       	ldi	r22, 0x08	; 8
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	c5 01       	movw	r24, r10
     f12:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DS18X20_show_id_uart>
			uart_puts_P( NEWLINESTR );
     f16:	85 e6       	ldi	r24, 0x65	; 101
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     f1e:	0f 5f       	subi	r16, 0xFF	; 255
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	28 e0       	ldi	r18, 0x08	; 8
     f24:	a2 0e       	add	r10, r18
     f26:	b1 1c       	adc	r11, r1
	}
	uart_put_int( (int)nSensors );
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
     f28:	0c 17       	cp	r16, r28
     f2a:	1d 07       	cpc	r17, r29
     f2c:	21 f7       	brne	.-56     	; 0xef6 <main+0x4e>
     f2e:	00 c1       	rjmp	.+512    	; 0x1130 <main+0x288>
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
		uart_puts_P( "Sensor# " );
     f30:	8c e5       	ldi	r24, 0x5C	; 92
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
		uart_put_int( (int)i+1 );
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 41 09 	call	0x1282	; 0x1282 <uart_put_int>
		uart_puts_P( " is a " );
     f3e:	85 e5       	ldi	r24, 0x55	; 85
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     f46:	bc 2e       	mov	r11, r28
     f48:	ed 2e       	mov	r14, r29
		if ( gSensorIDs[i][0] == DS18S20_FAMILY_CODE ) {
     f4a:	28 81       	ld	r18, Y
     f4c:	20 31       	cpi	r18, 0x10	; 16
     f4e:	29 f4       	brne	.+10     	; 0xf5a <main+0xb2>
			uart_puts_P( "DS18S20/DS1820" );
     f50:	86 e4       	ldi	r24, 0x46	; 70
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     f58:	0b c0       	rjmp	.+22     	; 0xf70 <main+0xc8>
		} else if ( gSensorIDs[i][0] == DS1822_FAMILY_CODE ) {
     f5a:	22 32       	cpi	r18, 0x22	; 34
     f5c:	29 f4       	brne	.+10     	; 0xf68 <main+0xc0>
			uart_puts_P( "DS1822" );
     f5e:	8f e3       	ldi	r24, 0x3F	; 63
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <main+0xc8>
		}
		else {
			uart_puts_P( "DS18B20" );
     f68:	87 e3       	ldi	r24, 0x37	; 55
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
		}
		uart_puts_P( " which is " );
     f70:	8c e2       	ldi	r24, 0x2C	; 44
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
		if ( DS18X20_get_power_status( &gSensorIDs[i][0] ) == DS18X20_POWER_PARASITE ) {
     f78:	8b 2d       	mov	r24, r11
     f7a:	9e 2d       	mov	r25, r14
     f7c:	0e 94 ac 02 	call	0x558	; 0x558 <DS18X20_get_power_status>
     f80:	81 11       	cpse	r24, r1
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <main+0xe6>
			uart_puts_P( "parasite" );
     f84:	83 e2       	ldi	r24, 0x23	; 35
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <main+0xee>
			} else {
			uart_puts_P( "externally" );
     f8e:	88 e1       	ldi	r24, 0x18	; 24
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
		}
		uart_puts_P( " powered" NEWLINESTR );
     f96:	8d e0       	ldi	r24, 0x0D	; 13
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
     f9e:	0f 5f       	subi	r16, 0xFF	; 255
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255
     fa2:	28 96       	adiw	r28, 0x08	; 8
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	80 0f       	add	r24, r16
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
     fa8:	8f 15       	cp	r24, r15
     faa:	10 f2       	brcs	.-124    	; 0xf30 <main+0x88>
// 		if ( nSensors > 0 ) {
// 			eeprom_test();
// 		}
// 	#endif	
				
	initDisplay();
     fac:	0e 94 af 05 	call	0xb5e	; 0xb5e <initDisplay>
	initTimer0();
     fb0:	0e 94 d3 05 	call	0xba6	; 0xba6 <initTimer0>
	initTimer1();
     fb4:	0e 94 b9 05 	call	0xb72	; 0xb72 <initTimer1>
	initButton();
     fb8:	0e 94 a8 05 	call	0xb50	; 0xb50 <initButton>
	mode = MODE_NORMAL;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	93 ed       	ldi	r25, 0xD3	; 211
     fc6:	e0 e3       	ldi	r30, 0x30	; 48
     fc8:	81 50       	subi	r24, 0x01	; 1
     fca:	90 40       	sbci	r25, 0x00	; 0
     fcc:	e0 40       	sbci	r30, 0x00	; 0
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <main+0x120>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <main+0x12a>
     fd2:	00 00       	nop
	_delay_ms(1000);
	initWDT();
     fd4:	0e 94 59 05 	call	0xab2	; 0xab2 <initWDT>
		
    while (1) {
		handleError(err);	
		getButtonState(BUTTON1);	
		if (buttonStateON[BUTTON1]){
     fd8:	ca e3       	ldi	r28, 0x3A	; 58
     fda:	d1 e0       	ldi	r29, 0x01	; 1
			buttonStateON[BUTTON1] = 0;
			mode += 1;
			if (mode == 4) mode = MODE_NORMAL;
     fdc:	ff 24       	eor	r15, r15
     fde:	f3 94       	inc	r15
 				uart_puts_P( NEWLINESTR );
// 				uart_put_temp( decicelsius );
// 				uart_puts_P( NEWLINESTR );
			}
			if (decicelsius > ALARM_HEAT){
				err = ERROR_TEMP_OVERHEAT;
     fe0:	0f 2e       	mov	r0, r31
     fe2:	f3 e0       	ldi	r31, 0x03	; 3
     fe4:	ef 2e       	mov	r14, r31
     fe6:	f0 2d       	mov	r31, r0
				readTempForOnlyDS18b20();
				convertTempToDigit(decicelsius, mode);
				wdt_reset();
				uart_putbin_byte(decicelsius >> 8);
				uart_puts_P( NEWLINESTR );
				uart_putbin_byte(decicelsius & 0x00FF);
     fe8:	09 e4       	ldi	r16, 0x49	; 73
     fea:	11 e0       	ldi	r17, 0x01	; 1
	mode = MODE_NORMAL;
	_delay_ms(1000);
	initWDT();
		
    while (1) {
		handleError(err);	
     fec:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <err>
     ff0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <handleError>
		getButtonState(BUTTON1);	
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <getButtonState>
		if (buttonStateON[BUTTON1]){
     ffa:	88 81       	ld	r24, Y
     ffc:	88 23       	and	r24, r24
     ffe:	61 f0       	breq	.+24     	; 0x1018 <main+0x170>
			buttonStateON[BUTTON1] = 0;
    1000:	18 82       	st	Y, r1
			mode += 1;
    1002:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <mode>
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <mode>
			if (mode == 4) mode = MODE_NORMAL;
    100c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <mode>
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	11 f4       	brne	.+4      	; 0x1018 <main+0x170>
    1014:	f0 92 48 01 	sts	0x0148, r15	; 0x800148 <mode>
		}
		
		switch (mode){
    1018:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <mode>
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	09 f4       	brne	.+2      	; 0x1022 <main+0x17a>
    1020:	5f c0       	rjmp	.+190    	; 0x10e0 <main+0x238>
    1022:	83 30       	cpi	r24, 0x03	; 3
    1024:	09 f4       	brne	.+2      	; 0x1028 <main+0x180>
    1026:	66 c0       	rjmp	.+204    	; 0x10f4 <main+0x24c>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	01 f7       	brne	.-64     	; 0xfec <main+0x144>
		case MODE_NORMAL:
			if (millis() - milliseconds_since > 999){
    102c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1030:	80 90 30 01 	lds	r8, 0x0130	; 0x800130 <milliseconds_since>
    1034:	90 90 31 01 	lds	r9, 0x0131	; 0x800131 <milliseconds_since+0x1>
    1038:	a0 90 32 01 	lds	r10, 0x0132	; 0x800132 <milliseconds_since+0x2>
    103c:	b0 90 33 01 	lds	r11, 0x0133	; 0x800133 <milliseconds_since+0x3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	88 19       	sub	r24, r8
    1046:	99 09       	sbc	r25, r9
    1048:	aa 09       	sbc	r26, r10
    104a:	bb 09       	sbc	r27, r11
    104c:	88 3e       	cpi	r24, 0xE8	; 232
    104e:	93 40       	sbci	r25, 0x03	; 3
    1050:	a1 05       	cpc	r26, r1
    1052:	b1 05       	cpc	r27, r1
    1054:	78 f1       	brcs	.+94     	; 0x10b4 <main+0x20c>
				milliseconds_since = millis();
    1056:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    105a:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <milliseconds_since>
    105e:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <milliseconds_since+0x1>
    1062:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <milliseconds_since+0x2>
    1066:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <milliseconds_since+0x3>
				readTempForOnlyDS18b20();
    106a:	0e 94 1a 05 	call	0xa34	; 0xa34 <readTempForOnlyDS18b20>
				convertTempToDigit(decicelsius, mode);
    106e:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <mode>
    1072:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <decicelsius>
    1076:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <decicelsius+0x1>
    107a:	0e 94 c3 06 	call	0xd86	; 0xd86 <convertTempToDigit>
				wdt_reset();
    107e:	a8 95       	wdr
				uart_putbin_byte(decicelsius >> 8);
    1080:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <decicelsius+0x1>
    1084:	0e 94 70 09 	call	0x12e0	; 0x12e0 <uart_putbin_byte>
				uart_puts_P( NEWLINESTR );
    1088:	8a e0       	ldi	r24, 0x0A	; 10
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
				uart_putbin_byte(decicelsius & 0x00FF);
    1090:	f8 01       	movw	r30, r16
    1092:	80 81       	ld	r24, Z
    1094:	0e 94 70 09 	call	0x12e0	; 0x12e0 <uart_putbin_byte>
				uart_puts_P( NEWLINESTR );
    1098:	87 e0       	ldi	r24, 0x07	; 7
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
 				uart_put_int(decicelsius);
    10a0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <decicelsius>
    10a4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <decicelsius+0x1>
    10a8:	0e 94 41 09 	call	0x1282	; 0x1282 <uart_put_int>
 				uart_puts_P( NEWLINESTR );
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
// 				uart_put_temp( decicelsius );
// 				uart_puts_P( NEWLINESTR );
			}
			if (decicelsius > ALARM_HEAT){
    10b4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <decicelsius>
    10b8:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <decicelsius+0x1>
    10bc:	8d 32       	cpi	r24, 0x2D	; 45
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	9f 07       	cpc	r25, r31
    10c2:	14 f0       	brlt	.+4      	; 0x10c8 <main+0x220>
				err = ERROR_TEMP_OVERHEAT;
    10c4:	e0 92 2f 01 	sts	0x012F, r14	; 0x80012f <err>
			}
			if (decicelsius < limitLow){ //heat on
    10c8:	82 33       	cpi	r24, 0x32	; 50
    10ca:	91 05       	cpc	r25, r1
    10cc:	14 f4       	brge	.+4      	; 0x10d2 <main+0x22a>
				heatStatus = HEAT_ON;
    10ce:	f0 92 47 01 	sts	0x0147, r15	; 0x800147 <heatStatus>
			}
			if (decicelsius > limitHigh){ //cool on
    10d2:	89 3c       	cpi	r24, 0xC9	; 201
    10d4:	91 05       	cpc	r25, r1
    10d6:	0c f4       	brge	.+2      	; 0x10da <main+0x232>
    10d8:	89 cf       	rjmp	.-238    	; 0xfec <main+0x144>
				heatStatus = HEAT_OFF;
    10da:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <heatStatus>
    10de:	86 cf       	rjmp	.-244    	; 0xfec <main+0x144>
			if (decicelsius > limitLow && decicelsius < limitHigh){ //cool on
				
			}
			break;		
		case MODE_HIGH:
			heatStatus = HEAT_OFF;
    10e0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <heatStatus>
			convertTempToDigit(limitHigh, mode);
    10e4:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <mode>
    10e8:	88 ec       	ldi	r24, 0xC8	; 200
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 c3 06 	call	0xd86	; 0xd86 <convertTempToDigit>
			wdt_reset();
    10f0:	a8 95       	wdr
			break;		
    10f2:	7c cf       	rjmp	.-264    	; 0xfec <main+0x144>
		case MODE_LOW:
			heatStatus = HEAT_OFF;
    10f4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <heatStatus>
			convertTempToDigit(limitLow, mode);
    10f8:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <mode>
    10fc:	82 e3       	ldi	r24, 0x32	; 50
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 c3 06 	call	0xd86	; 0xd86 <convertTempToDigit>
			wdt_reset();
    1104:	a8 95       	wdr
			break;	
    1106:	72 cf       	rjmp	.-284    	; 0xfec <main+0x144>
		
	nSensors = search_sensors();
	if (nSensors == 0){
		err = ERROR_NO_SENSOR_START;
	}
	uart_put_int( (int)nSensors );
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 41 09 	call	0x1282	; 0x1282 <uart_put_int>
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
    110e:	87 e7       	ldi	r24, 0x77	; 119
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 2f 09 	call	0x125e	; 0x125e <uart_puts_p>
    1116:	0f 2e       	mov	r0, r31
    1118:	fc e9       	ldi	r31, 0x9C	; 156
    111a:	af 2e       	mov	r10, r31
    111c:	f1 e0       	ldi	r31, 0x01	; 1
    111e:	bf 2e       	mov	r11, r31
    1120:	f0 2d       	mov	r31, r0
    1122:	cf ef       	ldi	r28, 0xFF	; 255
    1124:	cf 0d       	add	r28, r15
    1126:	d0 e0       	ldi	r29, 0x00	; 0
    1128:	22 96       	adiw	r28, 0x02	; 2
    112a:	01 e0       	ldi	r16, 0x01	; 1
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	e3 ce       	rjmp	.-570    	; 0xef6 <main+0x4e>
    1130:	cc e9       	ldi	r28, 0x9C	; 156
    1132:	d1 e0       	ldi	r29, 0x01	; 1
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
    1134:	01 e0       	ldi	r16, 0x01	; 1
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	fb ce       	rjmp	.-522    	; 0xf30 <main+0x88>

0000113a <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	2f 93       	push	r18
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
    114e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1152:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1156:	88 71       	andi	r24, 0x18	; 24
    1158:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <UART_RxHead>
    115c:	ef 5f       	subi	r30, 0xFF	; 255
    115e:	ef 71       	andi	r30, 0x1F	; 31
    1160:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <UART_RxTail>
    1164:	e9 17       	cp	r30, r25
    1166:	39 f0       	breq	.+14     	; 0x1176 <__vector_18+0x3c>
    1168:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <UART_RxHead>
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	eb 5a       	subi	r30, 0xAB	; 171
    1170:	fe 4f       	sbci	r31, 0xFE	; 254
    1172:	20 83       	st	Z, r18
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <__vector_18+0x3e>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <UART_LastRxError>
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	2f 91       	pop	r18
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <__vector_19>:
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    11a2:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <UART_TxHead>
    11a6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <UART_TxTail>
    11aa:	98 17       	cp	r25, r24
    11ac:	69 f0       	breq	.+26     	; 0x11c8 <__vector_19+0x38>
    11ae:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <UART_TxTail>
    11b2:	ef 5f       	subi	r30, 0xFF	; 255
    11b4:	ef 71       	andi	r30, 0x1F	; 31
    11b6:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <UART_TxTail>
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	eb 58       	subi	r30, 0x8B	; 139
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	80 81       	ld	r24, Z
    11c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <__vector_19+0x42>
    11c8:	e1 ec       	ldi	r30, 0xC1	; 193
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	8f 7d       	andi	r24, 0xDF	; 223
    11d0:	80 83       	st	Z, r24
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <uart_init>:
    11e4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <UART_TxHead>
    11e8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <UART_TxTail>
    11ec:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <UART_RxHead>
    11f0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <UART_RxTail>
    11f4:	99 23       	and	r25, r25
    11f6:	24 f4       	brge	.+8      	; 0x1200 <uart_init+0x1c>
    11f8:	22 e0       	ldi	r18, 0x02	; 2
    11fa:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    11fe:	9f 77       	andi	r25, 0x7F	; 127
    1200:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1208:	88 e9       	ldi	r24, 0x98	; 152
    120a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    120e:	86 e0       	ldi	r24, 0x06	; 6
    1210:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1214:	08 95       	ret

00001216 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1216:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <UART_TxHead>
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ) {
    121e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <UART_TxTail>
    1222:	29 17       	cp	r18, r25
    1224:	e1 f3       	breq	.-8      	; 0x121e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1226:	e2 2f       	mov	r30, r18
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	eb 58       	subi	r30, 0x8B	; 139
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1230:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1234:	e1 ec       	ldi	r30, 0xC1	; 193
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 62       	ori	r24, 0x20	; 32
    123c:	80 83       	st	Z, r24
    123e:	08 95       	ret

00001240 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
    while ( *s ) {
    1246:	88 81       	ld	r24, Y
    1248:	88 23       	and	r24, r24
    124a:	31 f0       	breq	.+12     	; 0x1258 <uart_puts+0x18>
    124c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
    124e:	0e 94 0b 09 	call	0x1216	; 0x1216 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while ( *s ) {
    1252:	89 91       	ld	r24, Y+
    1254:	81 11       	cpse	r24, r1
    1256:	fb cf       	rjmp	.-10     	; 0x124e <uart_puts+0xe>
        uart_putc(*s++);
    }

}/* uart_puts */
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
    1262:	ec 01       	movw	r28, r24
    1264:	21 96       	adiw	r28, 0x01	; 1
    1266:	fc 01       	movw	r30, r24
    1268:	84 91       	lpm	r24, Z
    126a:	88 23       	and	r24, r24
    126c:	39 f0       	breq	.+14     	; 0x127c <uart_puts_p+0x1e>
        uart_putc(c);
    126e:	0e 94 0b 09 	call	0x1216	; 0x1216 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
    1272:	fe 01       	movw	r30, r28
    1274:	84 91       	lpm	r24, Z
    1276:	21 96       	adiw	r28, 0x01	; 1
    1278:	81 11       	cpse	r24, r1
    127a:	f9 cf       	rjmp	.-14     	; 0x126e <uart_puts_p+0x10>
        uart_putc(c);
    }

}/* uart_puts_p */
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <uart_put_int>:
{
	uart_puthex_byte( (unsigned char)( l >> 24 ) );
	uart_puthex_byte( (unsigned char)( l >> 16 ) );
	uart_puthex_byte( (unsigned char)( l >> 8 ) );
	uart_puthex_byte( (unsigned char)( l ) );
} /* uart_puthex_byte */
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	2a 97       	sbiw	r28, 0x0a	; 10
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	4a e0       	ldi	r20, 0x0A	; 10
    1298:	be 01       	movw	r22, r28
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	0e 94 9e 09 	call	0x133c	; 0x133c <__itoa_ncheck>
    12a2:	0e 94 20 09 	call	0x1240	; 0x1240 <uart_puts>
    12a6:	2a 96       	adiw	r28, 0x0a	; 10
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <uart_puthex_nibble>:
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	8a 30       	cpi	r24, 0x0A	; 10
    12bc:	10 f0       	brcs	.+4      	; 0x12c2 <uart_puthex_nibble+0xa>
    12be:	89 5c       	subi	r24, 0xC9	; 201
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <uart_puthex_nibble+0xc>
    12c2:	80 5d       	subi	r24, 0xD0	; 208
    12c4:	0e 94 0b 09 	call	0x1216	; 0x1216 <uart_putc>
    12c8:	08 95       	ret

000012ca <uart_puthex_byte>:
    12ca:	cf 93       	push	r28
    12cc:	c8 2f       	mov	r28, r24
    12ce:	82 95       	swap	r24
    12d0:	8f 70       	andi	r24, 0x0F	; 15
    12d2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <uart_puthex_nibble>
    12d6:	8c 2f       	mov	r24, r28
    12d8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <uart_puthex_nibble>
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <uart_putbin_byte>:
Purpose:  transmit byte as ASCII-bin to UART
Input:    byte value
Returns:  none
**************************************************************************/
void uart_putbin_byte( const unsigned char b )
{
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	c7 e0       	ldi	r28, 0x07	; 7
    12ea:	d0 e0       	ldi	r29, 0x00	; 0
	signed char i;
	for ( i= 7;i >= 0;i-- ) {
		if ( b & ( 1 << i ) ) {
    12ec:	08 2f       	mov	r16, r24
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	98 01       	movw	r18, r16
    12f2:	0c 2e       	mov	r0, r28
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <uart_putbin_byte+0x1a>
    12f6:	35 95       	asr	r19
    12f8:	27 95       	ror	r18
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <uart_putbin_byte+0x16>
    12fe:	20 ff       	sbrs	r18, 0
    1300:	04 c0       	rjmp	.+8      	; 0x130a <uart_putbin_byte+0x2a>
			uart_putc( '1' );
    1302:	81 e3       	ldi	r24, 0x31	; 49
    1304:	0e 94 0b 09 	call	0x1216	; 0x1216 <uart_putc>
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <uart_putbin_byte+0x30>
		}
		else {
			uart_putc( '0' );
    130a:	80 e3       	ldi	r24, 0x30	; 48
    130c:	0e 94 0b 09 	call	0x1216	; 0x1216 <uart_putc>
    1310:	21 97       	sbiw	r28, 0x01	; 1
    1312:	70 f7       	brcc	.-36     	; 0x12f0 <uart_putbin_byte+0x10>
		}
	}
} /* uart_putbin_byte */
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <__umulhisi3>:
    131e:	a2 9f       	mul	r26, r18
    1320:	b0 01       	movw	r22, r0
    1322:	b3 9f       	mul	r27, r19
    1324:	c0 01       	movw	r24, r0
    1326:	a3 9f       	mul	r26, r19
    1328:	70 0d       	add	r23, r0
    132a:	81 1d       	adc	r24, r1
    132c:	11 24       	eor	r1, r1
    132e:	91 1d       	adc	r25, r1
    1330:	b2 9f       	mul	r27, r18
    1332:	70 0d       	add	r23, r0
    1334:	81 1d       	adc	r24, r1
    1336:	11 24       	eor	r1, r1
    1338:	91 1d       	adc	r25, r1
    133a:	08 95       	ret

0000133c <__itoa_ncheck>:
    133c:	bb 27       	eor	r27, r27
    133e:	4a 30       	cpi	r20, 0x0A	; 10
    1340:	31 f4       	brne	.+12     	; 0x134e <__itoa_ncheck+0x12>
    1342:	99 23       	and	r25, r25
    1344:	22 f4       	brpl	.+8      	; 0x134e <__itoa_ncheck+0x12>
    1346:	bd e2       	ldi	r27, 0x2D	; 45
    1348:	90 95       	com	r25
    134a:	81 95       	neg	r24
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__utoa_common>

00001352 <__utoa_ncheck>:
    1352:	bb 27       	eor	r27, r27

00001354 <__utoa_common>:
    1354:	fb 01       	movw	r30, r22
    1356:	55 27       	eor	r21, r21
    1358:	aa 27       	eor	r26, r26
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	aa 1f       	adc	r26, r26
    1360:	a4 17       	cp	r26, r20
    1362:	10 f0       	brcs	.+4      	; 0x1368 <__utoa_common+0x14>
    1364:	a4 1b       	sub	r26, r20
    1366:	83 95       	inc	r24
    1368:	50 51       	subi	r21, 0x10	; 16
    136a:	b9 f7       	brne	.-18     	; 0x135a <__utoa_common+0x6>
    136c:	a0 5d       	subi	r26, 0xD0	; 208
    136e:	aa 33       	cpi	r26, 0x3A	; 58
    1370:	08 f0       	brcs	.+2      	; 0x1374 <__utoa_common+0x20>
    1372:	a9 5d       	subi	r26, 0xD9	; 217
    1374:	a1 93       	st	Z+, r26
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	79 f7       	brne	.-34     	; 0x1358 <__utoa_common+0x4>
    137a:	b1 11       	cpse	r27, r1
    137c:	b1 93       	st	Z+, r27
    137e:	11 92       	st	Z+, r1
    1380:	cb 01       	movw	r24, r22
    1382:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <strrev>

00001386 <strrev>:
    1386:	dc 01       	movw	r26, r24
    1388:	fc 01       	movw	r30, r24
    138a:	67 2f       	mov	r22, r23
    138c:	71 91       	ld	r23, Z+
    138e:	77 23       	and	r23, r23
    1390:	e1 f7       	brne	.-8      	; 0x138a <strrev+0x4>
    1392:	32 97       	sbiw	r30, 0x02	; 2
    1394:	04 c0       	rjmp	.+8      	; 0x139e <strrev+0x18>
    1396:	7c 91       	ld	r23, X
    1398:	6d 93       	st	X+, r22
    139a:	70 83       	st	Z, r23
    139c:	62 91       	ld	r22, -Z
    139e:	ae 17       	cp	r26, r30
    13a0:	bf 07       	cpc	r27, r31
    13a2:	c8 f3       	brcs	.-14     	; 0x1396 <strrev+0x10>
    13a4:	08 95       	ret

000013a6 <_exit>:
    13a6:	f8 94       	cli

000013a8 <__stop_program>:
    13a8:	ff cf       	rjmp	.-2      	; 0x13a8 <__stop_program>
