
1wire_martin_tom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000014b4  00001548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  0080012a  0080012a  00001572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f57  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001368  00000000  00000000  000057cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ebe  00000000  00000000  00006b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a0  00000000  00000000  000089f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bac  00000000  00000000  00009294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003433  00000000  00000000  00009e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000d273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
       4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      2c:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_11>
      30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      38:	0c 94 6f 07 	jmp	0xede	; 0xede <__vector_14>
      3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      48:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_18>
      4c:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_19>
      50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	44 53       	subi	r20, 0x34	; 52
      6a:	31 38       	cpi	r19, 0x81	; 129
      6c:	58 32       	cpi	r21, 0x28	; 40
      6e:	30 5f       	subi	r19, 0xF0	; 240
      70:	73 74       	andi	r23, 0x43	; 67
      72:	61 72       	andi	r22, 0x21	; 33
      74:	74 5f       	subi	r23, 0xF4	; 244
      76:	6d 65       	ori	r22, 0x5D	; 93
      78:	61 73       	andi	r22, 0x31	; 49
      7a:	3a 20       	and	r3, r10
      7c:	53 68       	ori	r21, 0x83	; 131
      7e:	6f 72       	andi	r22, 0x2F	; 47
      80:	74 20       	and	r7, r4
      82:	43 69       	ori	r20, 0x93	; 147
      84:	72 63       	ori	r23, 0x32	; 50
      86:	75 69       	ori	r23, 0x95	; 149
      88:	74 21       	and	r23, r4
      8a:	0d 00       	.word	0x000d	; ????

0000008c <__c.2201>:
      8c:	20 43 52 43 20 4f 2e 4b 2e 20 00                     CRC O.K. .

00000097 <__c.2199>:
      97:	20 43 52 43 20 46 41 49 4c 20 00                     CRC FAIL .

000000a2 <__c.2194>:
      a2:	28 20 3f 20 29 00                                   ( ? ).

000000a8 <__c.2192>:
      a8:	28 32 32 29 00                                      (22).

000000ad <__c.2190>:
      ad:	28 31 38 42 29 00                                   (18B).

000000b3 <__c.2188>:
      b3:	28 31 38 53 29 00                                   (18S).

000000b9 <__c.2186>:
      b9:	20 00                                                .

000000bb <__c.2184>:
      bb:	53 4e 3a 20 00                                      SN: .

000000c0 <__c.2182>:
      c0:	43 52 43 3a 00                                      CRC:.

000000c5 <__c.2180>:
      c5:	46 43 3a 00                                         FC:.

000000c9 <__c.2387>:
      c9:	20 b0 43 00                                          .C.

000000cd <__c.2385>:
      cd:	20 64 65 63 69 b0 43 2c 20 00                        deci.C, .

000000d7 <__c.2374>:
      d7:	42 75 73 20 45 72 72 6f 72 0d 0a 00                 Bus Error...

000000e3 <__c.2371>:
      e3:	4e 6f 20 53 65 6e 73 6f 72 20 66 6f 75 6e 64 0d     No Sensor found.
      f3:	0a 00                                               ..

000000f5 <__c.2369>:
      f5:	0d 0a 53 63 61 6e 6e 69 6e 67 20 42 75 73 20 66     ..Scanning Bus f
     105:	6f 72 20 44 53 31 38 58 32 30 0d 0a 00              or DS18X20...

00000112 <__c.2341>:
     112:	0d 0a 00                                            ...

00000115 <__c.2339>:
     115:	0d 0a 00                                            ...

00000118 <__c.2325>:
     118:	20 70 6f 77 65 72 65 64 0d 0a 00                     powered...

00000123 <__c.2323>:
     123:	65 78 74 65 72 6e 61 6c 6c 79 00                    externally.

0000012e <__c.2321>:
     12e:	70 61 72 61 73 69 74 65 00                          parasite.

00000137 <__c.2319>:
     137:	20 77 68 69 63 68 20 69 73 20 00                     which is .

00000142 <__c.2317>:
     142:	44 53 31 38 42 32 30 00                             DS18B20.

0000014a <__c.2315>:
     14a:	44 53 31 38 32 32 00                                DS1822.

00000151 <__c.2313>:
     151:	44 53 31 38 53 32 30 2f 44 53 31 38 32 30 00        DS18S20/DS1820.

00000160 <__c.2311>:
     160:	20 69 73 20 61 20 00                                 is a .

00000167 <__c.2309>:
     167:	53 65 6e 73 6f 72 23 20 00                          Sensor# .

00000170 <__c.2304>:
     170:	0d 0a 00                                            ...

00000173 <__c.2302>:
     173:	20 3a 20 00                                          : .

00000177 <__c.2300>:
     177:	23 20 69 6e 20 42 75 73 20 3a 00                    # in Bus :.

00000182 <__c.2298>:
     182:	20 44 53 31 38 58 32 30 20 53 65 6e 73 6f 72 28      DS18X20 Sensor(
     192:	73 29 20 61 76 61 69 6c 61 62 6c 65 3a 0d 0a 00     s) available:...

000001a2 <__c.2296>:
     1a2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1b2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     1c2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 -----------.

000001ce <__c.2294>:
     1ce:	0d 0a 44 53 31 38 58 32 30 20 31 2d 57 69 72 65     ..DS18X20 1-Wire
     1de:	2d 52 65 61 64 65 72 20 44 65 6d 6f 20 62 79 20     -Reader Demo by 
     1ee:	4d 61 72 74 69 6e 20 54 68 6f 6d 61 73 0d 0a 00     Martin Thomas...

000001fe <__ctors_end>:
     1fe:	11 24       	eor	r1, r1
     200:	1f be       	out	0x3f, r1	; 63
     202:	cf ef       	ldi	r28, 0xFF	; 255
     204:	d8 e0       	ldi	r29, 0x08	; 8
     206:	de bf       	out	0x3e, r29	; 62
     208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
     20a:	11 e0       	ldi	r17, 0x01	; 1
     20c:	a0 e0       	ldi	r26, 0x00	; 0
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	e4 eb       	ldi	r30, 0xB4	; 180
     212:	f4 e1       	ldi	r31, 0x14	; 20
     214:	02 c0       	rjmp	.+4      	; 0x21a <__do_copy_data+0x10>
     216:	05 90       	lpm	r0, Z+
     218:	0d 92       	st	X+, r0
     21a:	aa 32       	cpi	r26, 0x2A	; 42
     21c:	b1 07       	cpc	r27, r17
     21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0xc>

00000220 <__do_clear_bss>:
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	aa e2       	ldi	r26, 0x2A	; 42
     224:	b1 e0       	ldi	r27, 0x01	; 1
     226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
     228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
     22a:	a0 3a       	cpi	r26, 0xA0	; 160
     22c:	b2 07       	cpc	r27, r18
     22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
     230:	0e 94 46 08 	call	0x108c	; 0x108c <main>
     234:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <_exit>

00000238 <__bad_interrupt>:
     238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     23c:	61 15       	cp	r22, r1
     23e:	71 05       	cpc	r23, r1
     240:	b1 f0       	breq	.+44     	; 0x26e <crc8+0x32>
     242:	fc 01       	movw	r30, r24
     244:	68 0f       	add	r22, r24
     246:	79 1f       	adc	r23, r25
     248:	80 e0       	ldi	r24, 0x00	; 0
	{
		b = data[loop_count];
     24a:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
     24c:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
     24e:	21 91       	ld	r18, Z+
     250:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
     252:	32 2f       	mov	r19, r18
     254:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
     256:	30 ff       	sbrs	r19, 0
     258:	0c c0       	rjmp	.+24     	; 0x272 <crc8+0x36>
				crc = crc ^ CRC8POLY;
     25a:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
     25c:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
     25e:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
     260:	26 95       	lsr	r18
     262:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
     264:	b1 f7       	brne	.-20     	; 0x252 <crc8+0x16>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     266:	e6 17       	cp	r30, r22
     268:	f7 07       	cpc	r31, r23
     26a:	89 f7       	brne	.-30     	; 0x24e <crc8+0x12>
     26c:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
     272:	86 95       	lsr	r24
     274:	f5 cf       	rjmp	.-22     	; 0x260 <crc8+0x24>

00000276 <DS18X20_raw_to_decicelsius>:
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
	if ( ret == DS18X20_OK ) {
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
	}
	return ret;
}
     276:	fb 01       	movw	r30, r22
     278:	41 81       	ldd	r20, Z+1	; 0x01
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	54 2f       	mov	r21, r20
     27e:	44 27       	eor	r20, r20
     280:	90 81       	ld	r25, Z
     282:	49 2b       	or	r20, r25
     284:	9a 01       	movw	r18, r20
     286:	80 31       	cpi	r24, 0x10	; 16
     288:	91 f4       	brne	.+36     	; 0x2ae <DS18X20_raw_to_decicelsius+0x38>
     28a:	4e 7f       	andi	r20, 0xFE	; 254
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	44 0f       	add	r20, r20
     292:	55 1f       	adc	r21, r21
     294:	44 0f       	add	r20, r20
     296:	55 1f       	adc	r21, r21
     298:	96 81       	ldd	r25, Z+6	; 0x06
     29a:	2c e0       	ldi	r18, 0x0C	; 12
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	29 1b       	sub	r18, r25
     2a0:	31 09       	sbc	r19, r1
     2a2:	24 0f       	add	r18, r20
     2a4:	35 1f       	adc	r19, r21
     2a6:	33 23       	and	r19, r19
     2a8:	0c f0       	brlt	.+2      	; 0x2ac <DS18X20_raw_to_decicelsius+0x36>
     2aa:	5b c0       	rjmp	.+182    	; 0x362 <DS18X20_raw_to_decicelsius+0xec>
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DS18X20_raw_to_decicelsius+0x3c>
     2ae:	55 23       	and	r21, r21
     2b0:	2c f4       	brge	.+10     	; 0x2bc <DS18X20_raw_to_decicelsius+0x46>
     2b2:	31 95       	neg	r19
     2b4:	21 95       	neg	r18
     2b6:	31 09       	sbc	r19, r1
     2b8:	a1 e0       	ldi	r26, 0x01	; 1
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <DS18X20_raw_to_decicelsius+0x48>
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	88 32       	cpi	r24, 0x28	; 40
     2c0:	11 f0       	breq	.+4      	; 0x2c6 <DS18X20_raw_to_decicelsius+0x50>
     2c2:	82 32       	cpi	r24, 0x22	; 34
     2c4:	69 f4       	brne	.+26     	; 0x2e0 <DS18X20_raw_to_decicelsius+0x6a>
     2c6:	84 81       	ldd	r24, Z+4	; 0x04
     2c8:	80 76       	andi	r24, 0x60	; 96
     2ca:	80 32       	cpi	r24, 0x20	; 32
     2cc:	31 f0       	breq	.+12     	; 0x2da <DS18X20_raw_to_decicelsius+0x64>
     2ce:	80 34       	cpi	r24, 0x40	; 64
     2d0:	31 f0       	breq	.+12     	; 0x2de <DS18X20_raw_to_decicelsius+0x68>
     2d2:	81 11       	cpse	r24, r1
     2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <DS18X20_raw_to_decicelsius+0x6a>
     2d6:	28 7f       	andi	r18, 0xF8	; 248
     2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <DS18X20_raw_to_decicelsius+0x6a>
     2da:	2c 7f       	andi	r18, 0xFC	; 252
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <DS18X20_raw_to_decicelsius+0x6a>
     2de:	2e 7f       	andi	r18, 0xFE	; 254
     2e0:	a9 01       	movw	r20, r18
     2e2:	52 95       	swap	r21
     2e4:	42 95       	swap	r20
     2e6:	4f 70       	andi	r20, 0x0F	; 15
     2e8:	45 27       	eor	r20, r21
     2ea:	5f 70       	andi	r21, 0x0F	; 15
     2ec:	45 27       	eor	r20, r21
     2ee:	ba 01       	movw	r22, r20
     2f0:	66 0f       	add	r22, r22
     2f2:	77 1f       	adc	r23, r23
     2f4:	44 0f       	add	r20, r20
     2f6:	55 1f       	adc	r21, r21
     2f8:	44 0f       	add	r20, r20
     2fa:	55 1f       	adc	r21, r21
     2fc:	44 0f       	add	r20, r20
     2fe:	55 1f       	adc	r21, r21
     300:	64 0f       	add	r22, r20
     302:	75 1f       	adc	r23, r21
     304:	2f 70       	andi	r18, 0x0F	; 15
     306:	33 27       	eor	r19, r19
     308:	c9 01       	movw	r24, r18
     30a:	96 95       	lsr	r25
     30c:	98 2f       	mov	r25, r24
     30e:	88 27       	eor	r24, r24
     310:	97 95       	ror	r25
     312:	87 95       	ror	r24
     314:	32 2f       	mov	r19, r18
     316:	22 27       	eor	r18, r18
     318:	33 0f       	add	r19, r19
     31a:	82 0f       	add	r24, r18
     31c:	93 1f       	adc	r25, r19
     31e:	a1 11       	cpse	r26, r1
     320:	15 c0       	rjmp	.+42     	; 0x34c <DS18X20_raw_to_decicelsius+0xd6>
     322:	ac 01       	movw	r20, r24
     324:	5e 5f       	subi	r21, 0xFE	; 254
     326:	45 2f       	mov	r20, r21
     328:	55 27       	eor	r21, r21
     32a:	46 95       	lsr	r20
     32c:	46 95       	lsr	r20
     32e:	9b 01       	movw	r18, r22
     330:	24 0f       	add	r18, r20
     332:	35 1f       	adc	r19, r21
     334:	c9 01       	movw	r24, r18
     336:	8a 5d       	subi	r24, 0xDA	; 218
     338:	9d 4f       	sbci	r25, 0xFD	; 253
     33a:	89 30       	cpi	r24, 0x09	; 9
     33c:	97 40       	sbci	r25, 0x07	; 7
     33e:	18 f4       	brcc	.+6      	; 0x346 <DS18X20_raw_to_decicelsius+0xd0>
     340:	82 2f       	mov	r24, r18
     342:	93 2f       	mov	r25, r19
     344:	08 95       	ret
     346:	80 ed       	ldi	r24, 0xD0	; 208
     348:	97 e0       	ldi	r25, 0x07	; 7
     34a:	08 95       	ret
     34c:	89 2f       	mov	r24, r25
     34e:	99 27       	eor	r25, r25
     350:	86 95       	lsr	r24
     352:	86 95       	lsr	r24
     354:	9b 01       	movw	r18, r22
     356:	28 0f       	add	r18, r24
     358:	39 1f       	adc	r19, r25
     35a:	31 95       	neg	r19
     35c:	21 95       	neg	r18
     35e:	31 09       	sbc	r19, r1
     360:	e9 cf       	rjmp	.-46     	; 0x334 <DS18X20_raw_to_decicelsius+0xbe>
     362:	f9 01       	movw	r30, r18
     364:	f2 95       	swap	r31
     366:	e2 95       	swap	r30
     368:	ef 70       	andi	r30, 0x0F	; 15
     36a:	ef 27       	eor	r30, r31
     36c:	ff 70       	andi	r31, 0x0F	; 15
     36e:	ef 27       	eor	r30, r31
     370:	bf 01       	movw	r22, r30
     372:	66 0f       	add	r22, r22
     374:	77 1f       	adc	r23, r23
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	6e 0f       	add	r22, r30
     384:	7f 1f       	adc	r23, r31
     386:	a9 01       	movw	r20, r18
     388:	4f 70       	andi	r20, 0x0F	; 15
     38a:	55 27       	eor	r21, r21
     38c:	ca 01       	movw	r24, r20
     38e:	96 95       	lsr	r25
     390:	98 2f       	mov	r25, r24
     392:	88 27       	eor	r24, r24
     394:	97 95       	ror	r25
     396:	87 95       	ror	r24
     398:	54 2f       	mov	r21, r20
     39a:	44 27       	eor	r20, r20
     39c:	55 0f       	add	r21, r21
     39e:	84 0f       	add	r24, r20
     3a0:	95 1f       	adc	r25, r21
     3a2:	bf cf       	rjmp	.-130    	; 0x322 <DS18X20_raw_to_decicelsius+0xac>

000003a4 <read_scratchpad>:
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	7b 01       	movw	r14, r22
     3b2:	04 2f       	mov	r16, r20
     3b4:	bc 01       	movw	r22, r24
     3b6:	8e eb       	ldi	r24, 0xBE	; 190
     3b8:	0e 94 1b 05 	call	0xa36	; 0xa36 <ow_command>
     3bc:	00 23       	and	r16, r16
     3be:	69 f0       	breq	.+26     	; 0x3da <read_scratchpad+0x36>
     3c0:	e7 01       	movw	r28, r14
     3c2:	01 50       	subi	r16, 0x01	; 1
     3c4:	10 e0       	ldi	r17, 0x00	; 0
     3c6:	0f 5f       	subi	r16, 0xFF	; 255
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	0e 0d       	add	r16, r14
     3cc:	1f 1d       	adc	r17, r15
     3ce:	0e 94 bd 04 	call	0x97a	; 0x97a <ow_byte_rd>
     3d2:	89 93       	st	Y+, r24
     3d4:	c0 17       	cp	r28, r16
     3d6:	d1 07       	cpc	r29, r17
     3d8:	d1 f7       	brne	.-12     	; 0x3ce <read_scratchpad+0x2a>
     3da:	69 e0       	ldi	r22, 0x09	; 9
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	c7 01       	movw	r24, r14
     3e0:	0e 94 1e 01 	call	0x23c	; 0x23c <crc8>
     3e4:	81 11       	cpse	r24, r1
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	08 95       	ret

000003f6 <DS18X20_show_id_uart>:
     3f6:	af 92       	push	r10
     3f8:	bf 92       	push	r11
     3fa:	cf 92       	push	r12
     3fc:	df 92       	push	r13
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	5c 01       	movw	r10, r24
     40c:	7b 01       	movw	r14, r22
     40e:	61 15       	cp	r22, r1
     410:	71 05       	cpc	r23, r1
     412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	5b c0       	rjmp	.+182    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     416:	8c 01       	movw	r16, r24
     418:	c0 e0       	ldi	r28, 0x00	; 0
     41a:	d0 e0       	ldi	r29, 0x00	; 0
     41c:	6b 01       	movw	r12, r22
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	c8 1a       	sub	r12, r24
     422:	d1 08       	sbc	r13, r1
     424:	20 97       	sbiw	r28, 0x00	; 0
     426:	69 f4       	brne	.+26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     428:	85 ec       	ldi	r24, 0xC5	; 197
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     430:	f8 01       	movw	r30, r16
     432:	80 81       	ld	r24, Z
     434:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <uart_puthex_byte>
     438:	89 eb       	ldi	r24, 0xB9	; 185
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     440:	23 c0       	rjmp	.+70     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     442:	cc 16       	cp	r12, r28
     444:	dd 06       	cpc	r13, r29
     446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	5b c0       	rjmp	.+182    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     44a:	80 ec       	ldi	r24, 0xC0	; 192
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	cf 16       	cp	r12, r31
     456:	d1 04       	cpc	r13, r1
     458:	69 f4       	brne	.+26     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     45a:	8b eb       	ldi	r24, 0xBB	; 187
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     462:	f8 01       	movw	r30, r16
     464:	80 81       	ld	r24, Z
     466:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <uart_puthex_byte>
     46a:	89 eb       	ldi	r24, 0xB9	; 185
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     472:	25 c0       	rjmp	.+74     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     474:	f8 01       	movw	r30, r16
     476:	80 81       	ld	r24, Z
     478:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <uart_puthex_byte>
     47c:	89 eb       	ldi	r24, 0xB9	; 185
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     484:	20 97       	sbiw	r28, 0x00	; 0
     486:	d9 f4       	brne	.+54     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     488:	f5 01       	movw	r30, r10
     48a:	80 81       	ld	r24, Z
     48c:	80 31       	cpi	r24, 0x10	; 16
     48e:	29 f4       	brne	.+10     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     490:	83 eb       	ldi	r24, 0xB3	; 179
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     498:	12 c0       	rjmp	.+36     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     49a:	88 32       	cpi	r24, 0x28	; 40
     49c:	29 f4       	brne	.+10     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     49e:	8d ea       	ldi	r24, 0xAD	; 173
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     4a6:	0b c0       	rjmp	.+22     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4a8:	82 32       	cpi	r24, 0x22	; 34
     4aa:	29 f4       	brne	.+10     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4ac:	88 ea       	ldi	r24, 0xA8	; 168
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4b6:	82 ea       	ldi	r24, 0xA2	; 162
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     4be:	21 96       	adiw	r28, 0x01	; 1
     4c0:	0f 5f       	subi	r16, 0xFF	; 255
     4c2:	1f 4f       	sbci	r17, 0xFF	; 255
     4c4:	ce 15       	cp	r28, r14
     4c6:	df 05       	cpc	r29, r15
     4c8:	09 f0       	breq	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4ca:	ac cf       	rjmp	.-168    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     4cc:	68 e0       	ldi	r22, 0x08	; 8
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	c5 01       	movw	r24, r10
     4d2:	0e 94 1e 01 	call	0x23c	; 0x23c <crc8>
     4d6:	88 23       	and	r24, r24
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4da:	87 e9       	ldi	r24, 0x97	; 151
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     4e2:	12 c0       	rjmp	.+36     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     4e4:	8c e8       	ldi	r24, 0x8C	; 140
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     4ec:	0d c0       	rjmp	.+26     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     4ee:	f8 01       	movw	r30, r16
     4f0:	80 81       	ld	r24, Z
     4f2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <uart_puthex_byte>
     4f6:	89 eb       	ldi	r24, 0xB9	; 185
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     4fe:	df cf       	rjmp	.-66     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     500:	c1 30       	cpi	r28, 0x01	; 1
     502:	d1 05       	cpc	r29, r1
     504:	a1 f7       	brne	.-24     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     506:	a9 cf       	rjmp	.-174    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	bf 90       	pop	r11
     51a:	af 90       	pop	r10
     51c:	08 95       	ret

0000051e <DS18X20_find_sensor>:
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	8b 01       	movw	r16, r22
     52a:	b8 01       	movw	r22, r16
     52c:	88 81       	ld	r24, Y
     52e:	0e 94 c1 04 	call	0x982	; 0x982 <ow_rom_search>
     532:	88 83       	st	Y, r24
     534:	81 50       	subi	r24, 0x01	; 1
     536:	8d 3f       	cpi	r24, 0xFD	; 253
     538:	50 f4       	brcc	.+20     	; 0x54e <DS18X20_find_sensor+0x30>
     53a:	f8 01       	movw	r30, r16
     53c:	90 81       	ld	r25, Z
     53e:	98 32       	cpi	r25, 0x28	; 40
     540:	41 f0       	breq	.+16     	; 0x552 <DS18X20_find_sensor+0x34>
     542:	90 31       	cpi	r25, 0x10	; 16
     544:	41 f0       	breq	.+16     	; 0x556 <DS18X20_find_sensor+0x38>
     546:	92 32       	cpi	r25, 0x22	; 34
     548:	81 f7       	brne	.-32     	; 0x52a <DS18X20_find_sensor+0xc>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	05 c0       	rjmp	.+10     	; 0x558 <DS18X20_find_sensor+0x3a>
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	03 c0       	rjmp	.+6      	; 0x558 <DS18X20_find_sensor+0x3a>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	01 c0       	rjmp	.+2      	; 0x558 <DS18X20_find_sensor+0x3a>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <DS18X20_get_power_status>:
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
     568:	0e 94 00 04 	call	0x800	; 0x800 <ow_reset>
     56c:	be 01       	movw	r22, r28
     56e:	84 eb       	ldi	r24, 0xB4	; 180
     570:	0e 94 1b 05 	call	0xa36	; 0xa36 <ow_command>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ow_bit_io>
     57a:	c8 2f       	mov	r28, r24
     57c:	0e 94 00 04 	call	0x800	; 0x800 <ow_reset>
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	c1 11       	cpse	r28, r1
     584:	01 c0       	rjmp	.+2      	; 0x588 <DS18X20_get_power_status+0x26>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <DS18X20_start_meas>:
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	18 2f       	mov	r17, r24
     596:	eb 01       	movw	r28, r22
     598:	0e 94 00 04 	call	0x800	; 0x800 <ow_reset>
     59c:	0e 94 9e 03 	call	0x73c	; 0x73c <ow_input_pin_state>
     5a0:	88 23       	and	r24, r24
     5a2:	71 f0       	breq	.+28     	; 0x5c0 <DS18X20_start_meas+0x32>
     5a4:	11 30       	cpi	r17, 0x01	; 1
     5a6:	31 f0       	breq	.+12     	; 0x5b4 <DS18X20_start_meas+0x26>
     5a8:	be 01       	movw	r22, r28
     5aa:	84 e4       	ldi	r24, 0x44	; 68
     5ac:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ow_command_with_parasite_enable>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0b c0       	rjmp	.+22     	; 0x5ca <DS18X20_start_meas+0x3c>
     5b4:	be 01       	movw	r22, r28
     5b6:	84 e4       	ldi	r24, 0x44	; 68
     5b8:	0e 94 1b 05 	call	0xa36	; 0xa36 <ow_command>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <DS18X20_start_meas+0x3c>
     5c0:	88 e6       	ldi	r24, 0x68	; 104
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	08 95       	ret

000005d2 <DS18X20_format_from_decicelsius>:
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	27 97       	sbiw	r28, 0x07	; 7
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	9c 01       	movw	r18, r24
     5f0:	7b 01       	movw	r14, r22
     5f2:	47 30       	cpi	r20, 0x07	; 7
     5f4:	08 f4       	brcc	.+2      	; 0x5f8 <DS18X20_format_from_decicelsius+0x26>
     5f6:	60 c0       	rjmp	.+192    	; 0x6b8 <DS18X20_format_from_decicelsius+0xe6>
     5f8:	89 51       	subi	r24, 0x19	; 25
     5fa:	9c 4f       	sbci	r25, 0xFC	; 252
     5fc:	87 3f       	cpi	r24, 0xF7	; 247
     5fe:	9a 42       	sbci	r25, 0x2A	; 42
     600:	08 f0       	brcs	.+2      	; 0x604 <DS18X20_format_from_decicelsius+0x32>
     602:	5c c0       	rjmp	.+184    	; 0x6bc <DS18X20_format_from_decicelsius+0xea>
     604:	33 23       	and	r19, r19
     606:	2c f4       	brge	.+10     	; 0x612 <DS18X20_format_from_decicelsius+0x40>
     608:	31 95       	neg	r19
     60a:	21 95       	neg	r18
     60c:	31 09       	sbc	r19, r1
     60e:	01 e0       	ldi	r16, 0x01	; 1
     610:	01 c0       	rjmp	.+2      	; 0x614 <DS18X20_format_from_decicelsius+0x42>
     612:	00 e0       	ldi	r16, 0x00	; 0
     614:	10 e0       	ldi	r17, 0x00	; 0
     616:	6a e0       	ldi	r22, 0x0A	; 10
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	c9 01       	movw	r24, r18
     61c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__divmodhi4>
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	91 0f       	add	r25, r17
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ec 0f       	add	r30, r28
     62a:	fd 1f       	adc	r31, r29
     62c:	e1 0f       	add	r30, r17
     62e:	f1 1d       	adc	r31, r1
     630:	17 fd       	sbrc	r17, 7
     632:	fa 95       	dec	r31
     634:	80 5d       	subi	r24, 0xD0	; 208
     636:	80 83       	st	Z, r24
     638:	26 2f       	mov	r18, r22
     63a:	37 2f       	mov	r19, r23
     63c:	19 2f       	mov	r17, r25
     63e:	12 16       	cp	r1, r18
     640:	13 06       	cpc	r1, r19
     642:	4c f3       	brlt	.-46     	; 0x616 <DS18X20_format_from_decicelsius+0x44>
     644:	89 2f       	mov	r24, r25
     646:	00 23       	and	r16, r16
     648:	59 f0       	breq	.+22     	; 0x660 <DS18X20_format_from_decicelsius+0x8e>
     64a:	2d e2       	ldi	r18, 0x2D	; 45
     64c:	fe 01       	movw	r30, r28
     64e:	e9 0f       	add	r30, r25
     650:	f1 1d       	adc	r31, r1
     652:	97 fd       	sbrc	r25, 7
     654:	fa 95       	dec	r31
     656:	21 83       	std	Z+1, r18	; 0x01
     658:	88 23       	and	r24, r24
     65a:	64 f4       	brge	.+24     	; 0x674 <DS18X20_format_from_decicelsius+0xa2>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	26 c0       	rjmp	.+76     	; 0x6ac <DS18X20_format_from_decicelsius+0xda>
     660:	2b e2       	ldi	r18, 0x2B	; 43
     662:	fe 01       	movw	r30, r28
     664:	e9 0f       	add	r30, r25
     666:	f1 1d       	adc	r31, r1
     668:	97 fd       	sbrc	r25, 7
     66a:	fa 95       	dec	r31
     66c:	21 83       	std	Z+1, r18	; 0x01
     66e:	f4 cf       	rjmp	.-24     	; 0x658 <DS18X20_format_from_decicelsius+0x86>
     670:	82 2f       	mov	r24, r18
     672:	02 c0       	rjmp	.+4      	; 0x678 <DS18X20_format_from_decicelsius+0xa6>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	4e e2       	ldi	r20, 0x2E	; 46
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	28 0f       	add	r18, r24
     67c:	39 2f       	mov	r19, r25
     67e:	91 50       	subi	r25, 0x01	; 1
     680:	e1 e0       	ldi	r30, 0x01	; 1
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	ec 0f       	add	r30, r28
     686:	fd 1f       	adc	r31, r29
     688:	e3 0f       	add	r30, r19
     68a:	f1 1d       	adc	r31, r1
     68c:	30 81       	ld	r19, Z
     68e:	f7 01       	movw	r30, r14
     690:	e8 0f       	add	r30, r24
     692:	f1 1d       	adc	r31, r1
     694:	30 83       	st	Z, r19
     696:	91 11       	cpse	r25, r1
     698:	07 c0       	rjmp	.+14     	; 0x6a8 <DS18X20_format_from_decicelsius+0xd6>
     69a:	f7 01       	movw	r30, r14
     69c:	e2 0f       	add	r30, r18
     69e:	f1 1d       	adc	r31, r1
     6a0:	40 83       	st	Z, r20
     6a2:	22 e0       	ldi	r18, 0x02	; 2
     6a4:	28 0f       	add	r18, r24
     6a6:	e4 cf       	rjmp	.-56     	; 0x670 <DS18X20_format_from_decicelsius+0x9e>
     6a8:	99 23       	and	r25, r25
     6aa:	14 f7       	brge	.-60     	; 0x670 <DS18X20_format_from_decicelsius+0x9e>
     6ac:	f7 01       	movw	r30, r14
     6ae:	e2 0f       	add	r30, r18
     6b0:	f1 1d       	adc	r31, r1
     6b2:	10 82       	st	Z, r1
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <DS18X20_format_from_decicelsius+0xec>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <DS18X20_format_from_decicelsius+0xec>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	27 96       	adiw	r28, 0x07	; 7
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	08 95       	ret

000006d8 <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	29 97       	sbiw	r28, 0x09	; 9
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	08 2f       	mov	r16, r24
     6f6:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
     6f8:	49 e0       	ldi	r20, 0x09	; 9
     6fa:	be 01       	movw	r22, r28
     6fc:	6f 5f       	subi	r22, 0xFF	; 255
     6fe:	7f 4f       	sbci	r23, 0xFF	; 255
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <read_scratchpad>
     708:	18 2f       	mov	r17, r24
	if ( ret == DS18X20_OK ) {
     70a:	81 11       	cpse	r24, r1
     70c:	09 c0       	rjmp	.+18     	; 0x720 <DS18X20_read_decicelsius_single+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
     70e:	be 01       	movw	r22, r28
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	80 2f       	mov	r24, r16
     716:	0e 94 3b 01 	call	0x276	; 0x276 <DS18X20_raw_to_decicelsius>
     71a:	f7 01       	movw	r30, r14
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
	}
	return ret;
}
     720:	81 2f       	mov	r24, r17
     722:	29 96       	adiw	r28, 0x09	; 9
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	08 95       	ret

0000073c <ow_input_pin_state>:

void ow_parasite_disable(void)
{
	OW_DIR_IN();
#if (!OW_USE_INTERNAL_PULLUP)
	OW_OUT_LOW();
     73c:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <OW_IN>
     740:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <OW_IN+0x1>
     744:	90 81       	ld	r25, Z
     746:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
     74a:	89 23       	and	r24, r25
     74c:	08 95       	ret

0000074e <ow_parasite_enable>:
     74e:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <OW_OUT>
     752:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <OW_OUT+0x1>
     756:	90 81       	ld	r25, Z
     758:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
     75c:	89 2b       	or	r24, r25
     75e:	80 83       	st	Z, r24
     760:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <OW_DDR>
     764:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <OW_DDR+0x1>
     768:	90 81       	ld	r25, Z
     76a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
     76e:	89 2b       	or	r24, r25
     770:	80 83       	st	Z, r24
     772:	08 95       	ret

00000774 <ow_bit_io_intern>:
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	c8 2f       	mov	r28, r24
     77a:	df b7       	in	r29, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <OW_DDR>
     782:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <OW_DDR+0x1>
     786:	90 81       	ld	r25, Z
     788:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
     78c:	89 2b       	or	r24, r25
     78e:	80 83       	st	Z, r24
     790:	8a e0       	ldi	r24, 0x0A	; 10
     792:	8a 95       	dec	r24
     794:	f1 f7       	brne	.-4      	; 0x792 <ow_bit_io_intern+0x1e>
     796:	00 c0       	rjmp	.+0      	; 0x798 <ow_bit_io_intern+0x24>
     798:	cc 23       	and	r28, r28
     79a:	51 f0       	breq	.+20     	; 0x7b0 <ow_bit_io_intern+0x3c>
     79c:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <OW_DDR>
     7a0:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <OW_DDR+0x1>
     7a4:	20 81       	ld	r18, Z
     7a6:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <OW_PIN_MASK>
     7aa:	90 95       	com	r25
     7ac:	92 23       	and	r25, r18
     7ae:	90 83       	st	Z, r25
     7b0:	85 e4       	ldi	r24, 0x45	; 69
     7b2:	8a 95       	dec	r24
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <ow_bit_io_intern+0x3e>
     7b6:	00 00       	nop
     7b8:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <OW_IN>
     7bc:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <OW_IN+0x1>
     7c0:	20 81       	ld	r18, Z
     7c2:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <OW_PIN_MASK>
     7c6:	92 23       	and	r25, r18
     7c8:	09 f4       	brne	.+2      	; 0x7cc <ow_bit_io_intern+0x58>
     7ca:	c0 e0       	ldi	r28, 0x00	; 0
     7cc:	85 ee       	ldi	r24, 0xE5	; 229
     7ce:	8a 95       	dec	r24
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <ow_bit_io_intern+0x5a>
     7d2:	00 00       	nop
     7d4:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <OW_DDR>
     7d8:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <OW_DDR+0x1>
     7dc:	20 81       	ld	r18, Z
     7de:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <OW_PIN_MASK>
     7e2:	90 95       	com	r25
     7e4:	92 23       	and	r25, r18
     7e6:	90 83       	st	Z, r25
     7e8:	61 11       	cpse	r22, r1
     7ea:	0e 94 a7 03 	call	0x74e	; 0x74e <ow_parasite_enable>
     7ee:	df bf       	out	0x3f, r29	; 63
     7f0:	85 e3       	ldi	r24, 0x35	; 53
     7f2:	8a 95       	dec	r24
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <ow_bit_io_intern+0x7e>
     7f6:	00 00       	nop
     7f8:	8c 2f       	mov	r24, r28
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     800:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <OW_OUT>
     804:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <OW_OUT+0x1>
     808:	90 81       	ld	r25, Z
     80a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
     80e:	80 95       	com	r24
     810:	89 23       	and	r24, r25
     812:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     814:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <OW_DDR>
     818:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <OW_DDR+0x1>
     81c:	90 81       	ld	r25, Z
     81e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
     822:	89 2b       	or	r24, r25
     824:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     826:	8f e7       	ldi	r24, 0x7F	; 127
     828:	97 e0       	ldi	r25, 0x07	; 7
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <ow_reset+0x2a>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <ow_reset+0x30>
     830:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     832:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     834:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     836:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <OW_DDR>
     83a:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <OW_DDR+0x1>
     83e:	90 81       	ld	r25, Z
     840:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
     844:	80 95       	com	r24
     846:	89 23       	and	r24, r25
     848:	80 83       	st	Z, r24
     84a:	ef ef       	ldi	r30, 0xFF	; 255
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <ow_reset+0x4e>
     852:	00 c0       	rjmp	.+0      	; 0x854 <ow_reset+0x54>
     854:	00 00       	nop
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     856:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <OW_IN>
     85a:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <OW_IN+0x1>
     85e:	30 81       	ld	r19, Z
     860:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <OW_PIN_MASK>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     864:	2f bf       	out	0x3f, r18	; 63
     866:	ef e7       	ldi	r30, 0x7F	; 127
     868:	f6 e0       	ldi	r31, 0x06	; 6
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <ow_reset+0x6a>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <ow_reset+0x70>
     870:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     872:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <OW_IN>
     876:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <OW_IN+0x1>
     87a:	20 81       	ld	r18, Z
     87c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <OW_PIN_MASK>
     880:	92 23       	and	r25, r18
     882:	11 f0       	breq	.+4      	; 0x888 <ow_reset+0x88>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     884:	83 23       	and	r24, r19
     886:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     888:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err; //err=0 -sensor got job
}
     88a:	08 95       	ret

0000088c <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
     88c:	50 93 97 01 	sts	0x0197, r21	; 0x800197 <OW_DDR+0x1>
     890:	40 93 96 01 	sts	0x0196, r20	; 0x800196 <OW_DDR>
	OW_OUT=out;
     894:	70 93 92 01 	sts	0x0192, r23	; 0x800192 <OW_OUT+0x1>
     898:	60 93 91 01 	sts	0x0191, r22	; 0x800191 <OW_OUT>
	OW_IN=in;
     89c:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <OW_IN+0x1>
     8a0:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <OW_IN>
	OW_PIN_MASK = (1 << pin);
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <ow_set_bus+0x1e>
     8a8:	88 0f       	add	r24, r24
     8aa:	2a 95       	dec	r18
     8ac:	ea f7       	brpl	.-6      	; 0x8a8 <ow_set_bus+0x1c>
     8ae:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <OW_PIN_MASK>
	ow_reset();
     8b2:	0e 94 00 04 	call	0x800	; 0x800 <ow_reset>
     8b6:	08 95       	ret

000008b8 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	81 70       	andi	r24, 0x01	; 1
     8bc:	0e 94 ba 03 	call	0x774	; 0x774 <ow_bit_io_intern>
}
     8c0:	08 95       	ret

000008c2 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	c8 2f       	mov	r28, r24
     8c8:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     8ca:	8c 2f       	mov	r24, r28
     8cc:	81 70       	andi	r24, 0x01	; 1
     8ce:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ow_bit_io>
		b >>= 1;
     8d2:	c6 95       	lsr	r28
		if( j ) {
     8d4:	81 11       	cpse	r24, r1
			b |= 0x80;
     8d6:	c0 68       	ori	r28, 0x80	; 128
     8d8:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     8da:	b9 f7       	brne	.-18     	; 0x8ca <ow_byte_wr+0x8>
	
	return b;
}
     8dc:	8c 2f       	mov	r24, r28
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     8ea:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
     8ec:	d1 30       	cpi	r29, 0x01	; 1
     8ee:	49 f0       	breq	.+18     	; 0x902 <__stack+0x3>
			j = ow_bit_io_intern( b & 1, 0 );
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	8c 2f       	mov	r24, r28
     8f4:	81 70       	andi	r24, 0x01	; 1
     8f6:	0e 94 ba 03 	call	0x774	; 0x774 <ow_bit_io_intern>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
		}
		b >>= 1;
     8fa:	c6 95       	lsr	r28
		if( j ) {
     8fc:	81 11       	cpse	r24, r1
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <__stack+0x13>
     900:	09 c0       	rjmp	.+18     	; 0x914 <__stack+0x15>
	
	do {
		if ( i != 1 ) {
			j = ow_bit_io_intern( b & 1, 0 );
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	8c 2f       	mov	r24, r28
     906:	81 70       	andi	r24, 0x01	; 1
     908:	0e 94 ba 03 	call	0x774	; 0x774 <ow_bit_io_intern>
		}
		b >>= 1;
     90c:	c6 95       	lsr	r28
		if( j ) {
     90e:	88 23       	and	r24, r24
     910:	19 f0       	breq	.+6      	; 0x918 <__stack+0x19>
			b |= 0x80;
     912:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
     914:	d1 50       	subi	r29, 0x01	; 1
     916:	51 f7       	brne	.-44     	; 0x8ec <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     918:	8c 2f       	mov	r24, r28
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <ow_command_intern>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	e8 2e       	mov	r14, r24
     92e:	eb 01       	movw	r28, r22
     930:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     932:	0e 94 00 04 	call	0x800	; 0x800 <ow_reset>

	if( id ) {
     936:	20 97       	sbiw	r28, 0x00	; 0
     938:	69 f0       	breq	.+26     	; 0x954 <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     93a:	85 e5       	ldi	r24, 0x55	; 85
     93c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ow_byte_wr>
     940:	8e 01       	movw	r16, r28
     942:	08 5f       	subi	r16, 0xF8	; 248
     944:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     946:	89 91       	ld	r24, Y+
     948:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ow_byte_wr>
			id++;
		} while( --i );
     94c:	c0 17       	cp	r28, r16
     94e:	d1 07       	cpc	r29, r17
     950:	d1 f7       	brne	.-12     	; 0x946 <ow_command_intern+0x26>
     952:	03 c0       	rjmp	.+6      	; 0x95a <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     954:	8c ec       	ldi	r24, 0xCC	; 204
     956:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     95a:	ff 20       	and	r15, r15
     95c:	21 f0       	breq	.+8      	; 0x966 <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
     95e:	8e 2d       	mov	r24, r14
     960:	0e 94 72 04 	call	0x8e4	; 0x8e4 <ow_byte_wr_with_parasite_enable>
     964:	03 c0       	rjmp	.+6      	; 0x96c <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
     966:	8e 2d       	mov	r24, r14
     968:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ow_byte_wr>
	}
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ow_byte_wr>
}
     980:	08 95       	ret

00000982 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	d8 2e       	mov	r13, r24
     992:	8b 01       	movw	r16, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     994:	0e 94 00 04 	call	0x800	; 0x800 <ow_reset>
     998:	81 11       	cpse	r24, r1
     99a:	2b c0       	rjmp	.+86     	; 0x9f2 <ow_rom_search+0x70>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     99c:	80 ef       	ldi	r24, 0xF0	; 240
     99e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ow_byte_wr>
	next_diff = OW_LAST_DEVICE;         // unchanged on last device
     9a2:	e1 2c       	mov	r14, r1
	
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
     9a4:	c0 e4       	ldi	r28, 0x40	; 64
     9a6:	0f 2e       	mov	r0, r31
     9a8:	f8 ef       	ldi	r31, 0xF8	; 248
     9aa:	ff 2e       	mov	r15, r31
     9ac:	f0 2d       	mov	r31, r0
     9ae:	fc 0e       	add	r15, r28
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ow_bit_io>
     9b6:	d8 2f       	mov	r29, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ow_bit_io>
     9be:	88 23       	and	r24, r24
     9c0:	19 f0       	breq	.+6      	; 0x9c8 <ow_rom_search+0x46>
				if( b ) {               // 0b11
     9c2:	dd 23       	and	r29, r29
     9c4:	d1 f0       	breq	.+52     	; 0x9fa <ow_rom_search+0x78>
     9c6:	17 c0       	rjmp	.+46     	; 0x9f6 <ow_rom_search+0x74>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     9c8:	d1 11       	cpse	r29, r1
     9ca:	24 c0       	rjmp	.+72     	; 0xa14 <ow_rom_search+0x92>
					if( diff > i || ((*id & 1) && diff != i) ) {
     9cc:	cd 15       	cp	r28, r13
     9ce:	e8 f0       	brcs	.+58     	; 0xa0a <ow_rom_search+0x88>
     9d0:	f8 01       	movw	r30, r16
     9d2:	80 81       	ld	r24, Z
     9d4:	80 ff       	sbrs	r24, 0
     9d6:	11 c0       	rjmp	.+34     	; 0x9fa <ow_rom_search+0x78>
     9d8:	dc 12       	cpse	r13, r28
     9da:	1a c0       	rjmp	.+52     	; 0xa10 <ow_rom_search+0x8e>
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <ow_rom_search+0x78>
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     9de:	c1 50       	subi	r28, 0x01	; 1
			
		} while( --j );
     9e0:	cf 11       	cpse	r28, r15
     9e2:	e6 cf       	rjmp	.-52     	; 0x9b0 <ow_rom_search+0x2e>
		
		id++;                           // next byte
     9e4:	0f 5f       	subi	r16, 0xFF	; 255
     9e6:	1f 4f       	sbci	r17, 0xFF	; 255
			*id >>= 1;
			if( b ) {
				*id |= 0x80;            // store bit
			}
			
			i--;
     9e8:	cf 2d       	mov	r28, r15
			
		} while( --j );
		
		id++;                           // next byte
	
	} while( i );
     9ea:	f1 10       	cpse	r15, r1
     9ec:	dc cf       	rjmp	.-72     	; 0x9a6 <ow_rom_search+0x24>
     9ee:	8e 2d       	mov	r24, r14
     9f0:	1a c0       	rjmp	.+52     	; 0xa26 <ow_rom_search+0xa4>
{
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	18 c0       	rjmp	.+48     	; 0xa26 <ow_rom_search+0xa4>
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
			if( ow_bit_io( 1 ) ) {      // read complement bit
				if( b ) {               // 0b11
					return OW_DATA_ERR; // data error <--- early exit!
     9f6:	8e ef       	ldi	r24, 0xFE	; 254
     9f8:	16 c0       	rjmp	.+44     	; 0xa26 <ow_rom_search+0xa4>
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ow_bit_io>
			*id >>= 1;
     a00:	f8 01       	movw	r30, r16
     a02:	90 81       	ld	r25, Z
     a04:	96 95       	lsr	r25
     a06:	90 83       	st	Z, r25
     a08:	ea cf       	rjmp	.-44     	; 0x9de <ow_rom_search+0x5c>
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
						next_diff = i;  // next pass 0
     a0a:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     a0c:	d1 e0       	ldi	r29, 0x01	; 1
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <ow_rom_search+0x92>
						next_diff = i;  // next pass 0
     a10:	ec 2e       	mov	r14, r28
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
					if( diff > i || ((*id & 1) && diff != i) ) {
						b = 1;          // now 1
     a12:	d1 e0       	ldi	r29, 0x01	; 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     a14:	8d 2f       	mov	r24, r29
     a16:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ow_bit_io>
			*id >>= 1;
     a1a:	f8 01       	movw	r30, r16
     a1c:	90 81       	ld	r25, Z
     a1e:	96 95       	lsr	r25
			if( b ) {
				*id |= 0x80;            // store bit
     a20:	90 68       	ori	r25, 0x80	; 128
     a22:	90 83       	st	Z, r25
     a24:	dc cf       	rjmp	.-72     	; 0x9de <ow_rom_search+0x5c>
		id++;                           // next byte
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	08 95       	ret

00000a36 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	0e 94 90 04 	call	0x920	; 0x920 <ow_command_intern>
     a3c:	08 95       	ret

00000a3e <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     a3e:	41 e0       	ldi	r20, 0x01	; 1
     a40:	0e 94 90 04 	call	0x920	; 0x920 <ow_command_intern>
     a44:	08 95       	ret

00000a46 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART_LastRxError << 8) + data;

}/* uart_getc */
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	2f 93       	push	r18
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	ef 93       	push	r30
     a58:	ff 93       	push	r31
     a5a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a5e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a62:	88 71       	andi	r24, 0x18	; 24
     a64:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <UART_RxHead>
     a68:	ef 5f       	subi	r30, 0xFF	; 255
     a6a:	ef 71       	andi	r30, 0x1F	; 31
     a6c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <UART_RxTail>
     a70:	e9 17       	cp	r30, r25
     a72:	39 f0       	breq	.+14     	; 0xa82 <__vector_18+0x3c>
     a74:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <UART_RxHead>
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	e1 5d       	subi	r30, 0xD1	; 209
     a7c:	fe 4f       	sbci	r31, 0xFE	; 254
     a7e:	20 83       	st	Z, r18
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <__vector_18+0x3e>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	2f 91       	pop	r18
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <__vector_19>:
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
     aae:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <UART_TxHead>
     ab2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <UART_TxTail>
     ab6:	98 17       	cp	r25, r24
     ab8:	69 f0       	breq	.+26     	; 0xad4 <__vector_19+0x38>
     aba:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <UART_TxTail>
     abe:	ef 5f       	subi	r30, 0xFF	; 255
     ac0:	ef 71       	andi	r30, 0x1F	; 31
     ac2:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <UART_TxTail>
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	e1 5b       	subi	r30, 0xB1	; 177
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ad2:	05 c0       	rjmp	.+10     	; 0xade <__vector_19+0x42>
     ad4:	e1 ec       	ldi	r30, 0xC1	; 193
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	8f 7d       	andi	r24, 0xDF	; 223
     adc:	80 83       	st	Z, r24
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	0f 90       	pop	r0
     aec:	1f 90       	pop	r1
     aee:	18 95       	reti

00000af0 <uart_init>:
     af0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <UART_TxHead>
     af4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <UART_TxTail>
     af8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <UART_RxHead>
     afc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <UART_RxTail>
     b00:	99 23       	and	r25, r25
     b02:	24 f4       	brge	.+8      	; 0xb0c <uart_init+0x1c>
     b04:	22 e0       	ldi	r18, 0x02	; 2
     b06:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     b0a:	9f 77       	andi	r25, 0x7F	; 127
     b0c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     b10:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     b14:	88 e9       	ldi	r24, 0x98	; 152
     b16:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b1a:	86 e0       	ldi	r24, 0x06	; 6
     b1c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     b20:	08 95       	ret

00000b22 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     b22:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <UART_TxHead>
     b26:	2f 5f       	subi	r18, 0xFF	; 255
     b28:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ) {
     b2a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UART_TxTail>
     b2e:	29 17       	cp	r18, r25
     b30:	e1 f3       	breq	.-8      	; 0xb2a <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     b32:	e2 2f       	mov	r30, r18
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	e1 5b       	subi	r30, 0xB1	; 177
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     b3c:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     b40:	e1 ec       	ldi	r30, 0xC1	; 193
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	80 62       	ori	r24, 0x20	; 32
     b48:	80 83       	st	Z, r24
     b4a:	08 95       	ret

00000b4c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	ec 01       	movw	r28, r24
    while ( *s ) {
     b52:	88 81       	ld	r24, Y
     b54:	88 23       	and	r24, r24
     b56:	31 f0       	breq	.+12     	; 0xb64 <uart_puts+0x18>
     b58:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
     b5a:	0e 94 91 05 	call	0xb22	; 0xb22 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while ( *s ) {
     b5e:	89 91       	ld	r24, Y+
     b60:	81 11       	cpse	r24, r1
     b62:	fb cf       	rjmp	.-10     	; 0xb5a <uart_puts+0xe>
        uart_putc(*s++);
    }

}/* uart_puts */
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
     b6e:	ec 01       	movw	r28, r24
     b70:	21 96       	adiw	r28, 0x01	; 1
     b72:	fc 01       	movw	r30, r24
     b74:	84 91       	lpm	r24, Z
     b76:	88 23       	and	r24, r24
     b78:	39 f0       	breq	.+14     	; 0xb88 <uart_puts_p+0x1e>
        uart_putc(c);
     b7a:	0e 94 91 05 	call	0xb22	; 0xb22 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( ( c = pgm_read_byte(progmem_s++) ) ) {
     b7e:	fe 01       	movw	r30, r28
     b80:	84 91       	lpm	r24, Z
     b82:	21 96       	adiw	r28, 0x01	; 1
     b84:	81 11       	cpse	r24, r1
     b86:	f9 cf       	rjmp	.-14     	; 0xb7a <uart_puts_p+0x10>
        uart_putc(c);
    }

}/* uart_puts_p */
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <uart_put_int>:
**************************************************************************/
void uart_put_ulongint( const unsigned long int val )
{
	char buffer[15];
	uart_puts( utoa( val, buffer, 10 ) );
} /* uart_puti */
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	2a 97       	sbiw	r28, 0x0a	; 10
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	4a e0       	ldi	r20, 0x0A	; 10
     ba4:	be 01       	movw	r22, r28
     ba6:	6f 5f       	subi	r22, 0xFF	; 255
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	0e 94 23 0a 	call	0x1446	; 0x1446 <__itoa_ncheck>
     bae:	0e 94 a6 05 	call	0xb4c	; 0xb4c <uart_puts>
     bb2:	2a 96       	adiw	r28, 0x0a	; 10
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <uart_puthex_nibble>:
Input:    byte value
Returns:  none
**************************************************************************/
void uart_puthex_nibble(const unsigned char b)
{
	unsigned char  c = b & 0x0f;
     bc4:	8f 70       	andi	r24, 0x0F	; 15
	if ( c > 9 ) { 
     bc6:	8a 30       	cpi	r24, 0x0A	; 10
     bc8:	10 f0       	brcs	.+4      	; 0xbce <uart_puthex_nibble+0xa>
		c += 'A'-10; 
     bca:	89 5c       	subi	r24, 0xC9	; 201
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <uart_puthex_nibble+0xc>
	}
	else {
		c += '0';
     bce:	80 5d       	subi	r24, 0xD0	; 208
	}
	uart_putc(c);
     bd0:	0e 94 91 05 	call	0xb22	; 0xb22 <uart_putc>
     bd4:	08 95       	ret

00000bd6 <uart_puthex_byte>:
Purpose:  transmit upper and lower nibble as ASCII-hex to UART
Input:    byte value
Returns:  none
**************************************************************************/
void uart_puthex_byte( const unsigned char  b )
{
     bd6:	cf 93       	push	r28
     bd8:	c8 2f       	mov	r28, r24
	uart_puthex_nibble( b >> 4 );
     bda:	82 95       	swap	r24
     bdc:	8f 70       	andi	r24, 0x0F	; 15
     bde:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_puthex_nibble>
	uart_puthex_nibble( b );
     be2:	8c 2f       	mov	r24, r28
     be4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_puthex_nibble>
} /* uart_puthex_byte */
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <search_sensors>:
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5)); //input
	PORTC |= (1 << PORTC4) | (1 << PORTC5); //pull up
}

void initGenerator(){
	DDRC |= (1 << PORTC4); //output
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	29 97       	sbiw	r28, 0x09	; 9
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	85 ef       	ldi	r24, 0xF5	; 245
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     c08:	0e 94 00 04 	call	0x800	; 0x800 <ow_reset>
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	89 87       	std	Y+9, r24	; 0x09
     c10:	be 01       	movw	r22, r28
     c12:	6f 5f       	subi	r22, 0xFF	; 255
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	ce 01       	movw	r24, r28
     c18:	09 96       	adiw	r24, 0x09	; 9
     c1a:	0e 94 8f 02 	call	0x51e	; 0x51e <DS18X20_find_sensor>
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	8f 3f       	cpi	r24, 0xFF	; 255
     c22:	31 f4       	brne	.+12     	; 0xc30 <search_sensors+0x44>
     c24:	83 ee       	ldi	r24, 0xE3	; 227
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	15 c0       	rjmp	.+42     	; 0xc5a <search_sensors+0x6e>
     c30:	8e 3f       	cpi	r24, 0xFE	; 254
     c32:	31 f4       	brne	.+12     	; 0xc40 <search_sensors+0x54>
     c34:	87 ed       	ldi	r24, 0xD7	; 215
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0d c0       	rjmp	.+26     	; 0xc5a <search_sensors+0x6e>
     c40:	fe 01       	movw	r30, r28
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	a8 e9       	ldi	r26, 0x98	; 152
     c46:	b1 e0       	ldi	r27, 0x01	; 1
     c48:	9e 01       	movw	r18, r28
     c4a:	27 5f       	subi	r18, 0xF7	; 247
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	81 91       	ld	r24, Z+
     c50:	8d 93       	st	X+, r24
     c52:	e2 17       	cp	r30, r18
     c54:	f3 07       	cpc	r31, r19
     c56:	d9 f7       	brne	.-10     	; 0xc4e <search_sensors+0x62>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	29 96       	adiw	r28, 0x09	; 9
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <uart_put_temp>:
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	2a 97       	sbiw	r28, 0x0a	; 10
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	8c 01       	movw	r16, r24
     c86:	0e 94 c7 05 	call	0xb8e	; 0xb8e <uart_put_int>
     c8a:	8d ec       	ldi	r24, 0xCD	; 205
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     c92:	4a e0       	ldi	r20, 0x0A	; 10
     c94:	be 01       	movw	r22, r28
     c96:	6f 5f       	subi	r22, 0xFF	; 255
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	c8 01       	movw	r24, r16
     c9c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DS18X20_format_from_decicelsius>
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <uart_puts>
     ca8:	89 ec       	ldi	r24, 0xC9	; 201
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
     cb0:	2a 96       	adiw	r28, 0x0a	; 10
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <readTempForOnlyDS18b20>:
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 c7 02 	call	0x58e	; 0x58e <DS18X20_start_meas>
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	8e e9       	ldi	r24, 0x9E	; 158
     cd4:	94 e2       	ldi	r25, 0x24	; 36
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <readTempForOnlyDS18b20+0x10>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <readTempForOnlyDS18b20+0x1a>
     ce0:	00 00       	nop
     ce2:	6a e8       	ldi	r22, 0x8A	; 138
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <gSensorIDs>
     cea:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <DS18X20_read_decicelsius_single>
     cee:	08 95       	ret

00000cf0 <__vector_11>:
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <timer1_millis>
     d06:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <timer1_millis+0x1>
     d0a:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <timer1_millis+0x2>
     d0e:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <timer1_millis+0x3>
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	a1 1d       	adc	r26, r1
     d16:	b1 1d       	adc	r27, r1
     d18:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <timer1_millis>
     d1c:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <timer1_millis+0x1>
     d20:	a0 93 79 01 	sts	0x0179, r26	; 0x800179 <timer1_millis+0x2>
     d24:	b0 93 7a 01 	sts	0x017A, r27	; 0x80017a <timer1_millis+0x3>
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	0f 90       	pop	r0
     d36:	1f 90       	pop	r1
     d38:	18 95       	reti

00000d3a <millis>:
     d3a:	f8 94       	cli
     d3c:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <timer1_millis>
     d40:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <timer1_millis+0x1>
     d44:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timer1_millis+0x2>
     d48:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timer1_millis+0x3>
     d4c:	78 94       	sei
     d4e:	08 95       	ret

00000d50 <initButton>:
     d50:	87 b1       	in	r24, 0x07	; 7
     d52:	8f 7c       	andi	r24, 0xCF	; 207
     d54:	87 b9       	out	0x07, r24	; 7
     d56:	88 b1       	in	r24, 0x08	; 8
     d58:	80 63       	ori	r24, 0x30	; 48
     d5a:	88 b9       	out	0x08, r24	; 8
     d5c:	08 95       	ret

00000d5e <initDisplay>:
}

void initDisplay(){
	DDRB |= 0b00111111;
     d5e:	84 b1       	in	r24, 0x04	; 4
     d60:	8f 63       	ori	r24, 0x3F	; 63
     d62:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b01100000;
     d64:	8a b1       	in	r24, 0x0a	; 10
     d66:	80 66       	ori	r24, 0x60	; 96
     d68:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0b00001111;
     d6a:	87 b1       	in	r24, 0x07	; 7
     d6c:	8f 60       	ori	r24, 0x0F	; 15
     d6e:	87 b9       	out	0x07, r24	; 7
     d70:	08 95       	ret

00000d72 <initTimer1>:
}

void initTimer1(){
	TCNT1 = 0;
     d72:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d76:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1AH = (uint8_t)(CTC_MATCH_OVERFLOW >> 8);
     d7a:	87 e0       	ldi	r24, 0x07	; 7
     d7c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (uint8_t)CTC_MATCH_OVERFLOW;
     d80:	80 ed       	ldi	r24, 0xD0	; 208
     d82:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1A = 0;
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	10 82       	st	Z, r1
	TCCR1A |= (0 << WGM11) | (0 << WGM10); //mode CTC
     d8c:	80 81       	ld	r24, Z
     d8e:	80 83       	st	Z, r24
	TCCR1B |= (0 << WGM13) | (1 << WGM12) |(0 << CS12) | (1 << CS11) | (0 << CS10); //mode CTC, clk/8
     d90:	e1 e8       	ldi	r30, 0x81	; 129
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8a 60       	ori	r24, 0x0A	; 10
     d98:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
     d9a:	ef e6       	ldi	r30, 0x6F	; 111
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	80 83       	st	Z, r24
     da4:	08 95       	ret

00000da6 <initTimer0>:
}

void initTimer0(){
	TCNT0 = 0;
     da6:	16 bc       	out	0x26, r1	; 38
	OCR0A = 250; //4ms
     da8:	8a ef       	ldi	r24, 0xFA	; 250
     daa:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0;
     dac:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01) | (0 << WGM00); //mode CTC
     dae:	84 b5       	in	r24, 0x24	; 36
     db0:	82 60       	ori	r24, 0x02	; 2
     db2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0 << WGM02) |(1 << CS02) | (0 << CS01) | (0 << CS00); //mode CTC, clk/256
     db4:	85 b5       	in	r24, 0x25	; 37
     db6:	84 60       	ori	r24, 0x04	; 4
     db8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A); //Output Compare A Match Interrupt Enable
     dba:	ee e6       	ldi	r30, 0x6E	; 110
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	80 83       	st	Z, r24
     dc4:	08 95       	ret

00000dc6 <getButtonState>:
}

void getButtonState(uint8_t but){
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
	uint8_t state = PINC & buttonMask[but];
     dd4:	16 b1       	in	r17, 0x06	; 6
     dd6:	c8 2f       	mov	r28, r24
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
     dda:	fe 01       	movw	r30, r28
     ddc:	e0 50       	subi	r30, 0x00	; 0
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	18 23       	and	r17, r24
	if (state ^ buttonDebounceState[but]){
     de4:	fe 01       	movw	r30, r28
     de6:	e9 57       	subi	r30, 0x79	; 121
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	80 81       	ld	r24, Z
     dec:	81 17       	cp	r24, r17
     dee:	89 f0       	breq	.+34     	; 0xe12 <getButtonState+0x4c>
		buttonDebounceState[but] = state;
     df0:	fe 01       	movw	r30, r28
     df2:	e9 57       	subi	r30, 0x79	; 121
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	10 83       	st	Z, r17
		lastDebounceTime[but] = millis();
     df8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <millis>
     dfc:	fe 01       	movw	r30, r28
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	e1 58       	subi	r30, 0x81	; 129
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	60 83       	st	Z, r22
     e0c:	71 83       	std	Z+1, r23	; 0x01
     e0e:	82 83       	std	Z+2, r24	; 0x02
     e10:	93 83       	std	Z+3, r25	; 0x03
	}
	if ((millis() - lastDebounceTime[but] > 39)){
     e12:	0e 94 9d 06 	call	0xd3a	; 0xd3a <millis>
     e16:	fe 01       	movw	r30, r28
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	e1 58       	subi	r30, 0x81	; 129
     e22:	fe 4f       	sbci	r31, 0xFE	; 254
     e24:	c0 80       	ld	r12, Z
     e26:	d1 80       	ldd	r13, Z+1	; 0x01
     e28:	e2 80       	ldd	r14, Z+2	; 0x02
     e2a:	f3 80       	ldd	r15, Z+3	; 0x03
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	8c 19       	sub	r24, r12
     e32:	9d 09       	sbc	r25, r13
     e34:	ae 09       	sbc	r26, r14
     e36:	bf 09       	sbc	r27, r15
     e38:	88 97       	sbiw	r24, 0x28	; 40
     e3a:	a1 05       	cpc	r26, r1
     e3c:	b1 05       	cpc	r27, r1
     e3e:	c8 f0       	brcs	.+50     	; 0xe72 <getButtonState+0xac>
		if (state ^ buttonPrefState[but]){
     e40:	fe 01       	movw	r30, r28
     e42:	ee 5f       	subi	r30, 0xFE	; 254
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	81 17       	cp	r24, r17
     e4a:	99 f0       	breq	.+38     	; 0xe72 <getButtonState+0xac>
			buttonPrefState[but] = state;
     e4c:	fe 01       	movw	r30, r28
     e4e:	ee 5f       	subi	r30, 0xFE	; 254
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	10 83       	st	Z, r17
			buttonStateON[but] = (~state) & buttonMask[but];
     e54:	10 95       	com	r17
     e56:	fe 01       	movw	r30, r28
     e58:	e0 50       	subi	r30, 0x00	; 0
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	80 81       	ld	r24, Z
     e5e:	fe 01       	movw	r30, r28
     e60:	e3 58       	subi	r30, 0x83	; 131
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	91 2f       	mov	r25, r17
     e66:	98 23       	and	r25, r24
     e68:	90 83       	st	Z, r25
			buttonStateOFF[but] = (~state) ^ buttonMask[but];
     e6a:	c5 58       	subi	r28, 0x85	; 133
     e6c:	de 4f       	sbci	r29, 0xFE	; 254
     e6e:	18 27       	eor	r17, r24
     e70:	18 83       	st	Y, r17
		}
	}
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	08 95       	ret

00000e82 <setNumber>:

void setNumber(uint8_t num, uint8_t dig){
	if (num > MAXNUMBER-1 || dig>3) return;
     e82:	81 31       	cpi	r24, 0x11	; 17
     e84:	58 f5       	brcc	.+86     	; 0xedc <setNumber+0x5a>
     e86:	64 30       	cpi	r22, 0x04	; 4
     e88:	48 f5       	brcc	.+82     	; 0xedc <setNumber+0x5a>
	uint8_t pb, pd;
	pb = number[num][0];
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	fc 01       	movw	r30, r24
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	e8 5f       	subi	r30, 0xF8	; 248
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	20 81       	ld	r18, Z
	if (dig == 2) pb |= 0b00000001;
     e98:	62 30       	cpi	r22, 0x02	; 2
     e9a:	09 f4       	brne	.+2      	; 0xe9e <setNumber+0x1c>
     e9c:	21 60       	ori	r18, 0x01	; 1
	PORTB |= pb;
     e9e:	35 b1       	in	r19, 0x05	; 5
     ea0:	32 2b       	or	r19, r18
     ea2:	35 b9       	out	0x05, r19	; 5
	PORTB &= pb | 0b11000000;
     ea4:	35 b1       	in	r19, 0x05	; 5
     ea6:	20 6c       	ori	r18, 0xC0	; 192
     ea8:	23 23       	and	r18, r19
     eaa:	25 b9       	out	0x05, r18	; 5
	pd = number[num][1];
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	fc 01       	movw	r30, r24
     eb2:	e8 5f       	subi	r30, 0xF8	; 248
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
	PORTD |= pd;
     eb8:	9b b1       	in	r25, 0x0b	; 11
     eba:	98 2b       	or	r25, r24
     ebc:	9b b9       	out	0x0b, r25	; 11
	PORTD &= pd | 0b10011111;
     ebe:	9b b1       	in	r25, 0x0b	; 11
     ec0:	8f 69       	ori	r24, 0x9F	; 159
     ec2:	89 23       	and	r24, r25
     ec4:	8b b9       	out	0x0b, r24	; 11
	PORTC &= 0b11110000;
     ec6:	88 b1       	in	r24, 0x08	; 8
     ec8:	80 7f       	andi	r24, 0xF0	; 240
     eca:	88 b9       	out	0x08, r24	; 8
	PORTC |= digit[dig];
     ecc:	98 b1       	in	r25, 0x08	; 8
     ece:	e6 2f       	mov	r30, r22
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	ec 5f       	subi	r30, 0xFC	; 252
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	80 81       	ld	r24, Z
     ed8:	89 2b       	or	r24, r25
     eda:	88 b9       	out	0x08, r24	; 8
     edc:	08 95       	ret

00000ede <__vector_14>:

ISR (TIMER1_COMPA_vect){
	timer1_millis++;
}

ISR(TIMER0_COMPA_vect){
     ede:	1f 92       	push	r1
     ee0:	0f 92       	push	r0
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	0f 92       	push	r0
     ee6:	11 24       	eor	r1, r1
     ee8:	2f 93       	push	r18
     eea:	3f 93       	push	r19
     eec:	4f 93       	push	r20
     eee:	5f 93       	push	r21
     ef0:	6f 93       	push	r22
     ef2:	7f 93       	push	r23
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	ef 93       	push	r30
     efe:	ff 93       	push	r31
	counterDigit &= 0b00000011;
     f00:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <counterDigit>
     f04:	83 70       	andi	r24, 0x03	; 3
     f06:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <counterDigit>
	setNumber(temperature[counterDigit], counterDigit);
     f0a:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <counterDigit>
     f0e:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <counterDigit>
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	e3 57       	subi	r30, 0x73	; 115
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	80 81       	ld	r24, Z
     f1a:	0e 94 41 07 	call	0xe82	; 0xe82 <setNumber>
	counterDigit += 1;
     f1e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <counterDigit>
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <counterDigit>
}
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <convertTempToDigit>:
	PORTD &= pd | 0b10011111;
	PORTC &= 0b11110000;
	PORTC |= digit[dig];
}

void convertTempToDigit(uint16_t t){
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
	uint16_t temp, d1, d2, d3, d4;
	temp = t;
	d4 = temp/1000;
     f50:	9c 01       	movw	r18, r24
     f52:	36 95       	lsr	r19
     f54:	27 95       	ror	r18
     f56:	36 95       	lsr	r19
     f58:	27 95       	ror	r18
     f5a:	36 95       	lsr	r19
     f5c:	27 95       	ror	r18
     f5e:	a5 ec       	ldi	r26, 0xC5	; 197
     f60:	b0 e2       	ldi	r27, 0x20	; 32
     f62:	0e 94 00 0a 	call	0x1400	; 0x1400 <__umulhisi3>
     f66:	fc 01       	movw	r30, r24
     f68:	f2 95       	swap	r31
     f6a:	e2 95       	swap	r30
     f6c:	ef 70       	andi	r30, 0x0F	; 15
     f6e:	ef 27       	eor	r30, r31
     f70:	ff 70       	andi	r31, 0x0F	; 15
     f72:	ef 27       	eor	r30, r31
	temp = temp - d4*1000;
     f74:	28 ee       	ldi	r18, 0xE8	; 232
     f76:	33 e0       	ldi	r19, 0x03	; 3
     f78:	e2 9f       	mul	r30, r18
     f7a:	c0 01       	movw	r24, r0
     f7c:	e3 9f       	mul	r30, r19
     f7e:	90 0d       	add	r25, r0
     f80:	f2 9f       	mul	r31, r18
     f82:	90 0d       	add	r25, r0
     f84:	11 24       	eor	r1, r1
     f86:	ae 01       	movw	r20, r28
     f88:	48 1b       	sub	r20, r24
     f8a:	59 0b       	sbc	r21, r25
	if (t & 0x8000) d4 = 11;
     f8c:	dd 23       	and	r29, r29
     f8e:	0c f4       	brge	.+2      	; 0xf92 <convertTempToDigit+0x48>
     f90:	4a c0       	rjmp	.+148    	; 0x1026 <convertTempToDigit+0xdc>
	d3 = temp/100;
     f92:	9a 01       	movw	r18, r20
     f94:	36 95       	lsr	r19
     f96:	27 95       	ror	r18
     f98:	36 95       	lsr	r19
     f9a:	27 95       	ror	r18
     f9c:	ab e7       	ldi	r26, 0x7B	; 123
     f9e:	b4 e1       	ldi	r27, 0x14	; 20
     fa0:	0e 94 00 0a 	call	0x1400	; 0x1400 <__umulhisi3>
     fa4:	ec 01       	movw	r28, r24
     fa6:	d6 95       	lsr	r29
     fa8:	c7 95       	ror	r28
	temp = temp - d3*100;
     faa:	24 e6       	ldi	r18, 0x64	; 100
     fac:	2c 9f       	mul	r18, r28
     fae:	c0 01       	movw	r24, r0
     fb0:	2d 9f       	mul	r18, r29
     fb2:	90 0d       	add	r25, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	48 1b       	sub	r20, r24
     fb8:	59 0b       	sbc	r21, r25
	d2 = temp/10;
     fba:	9a 01       	movw	r18, r20
     fbc:	ad ec       	ldi	r26, 0xCD	; 205
     fbe:	bc ec       	ldi	r27, 0xCC	; 204
     fc0:	0e 94 00 0a 	call	0x1400	; 0x1400 <__umulhisi3>
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	96 95       	lsr	r25
     fce:	87 95       	ror	r24
	d1 = temp - d2*10;
     fd0:	bc 01       	movw	r22, r24
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	9c 01       	movw	r18, r24
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	26 0f       	add	r18, r22
     fe6:	37 1f       	adc	r19, r23
     fe8:	42 1b       	sub	r20, r18
     fea:	53 0b       	sbc	r21, r19
	if (d3 == 0 && d4 == 0) d3 = CLEAR; 
     fec:	20 97       	sbiw	r28, 0x00	; 0
     fee:	19 f4       	brne	.+6      	; 0xff6 <convertTempToDigit+0xac>
     ff0:	30 97       	sbiw	r30, 0x00	; 0
     ff2:	31 f0       	breq	.+12     	; 0x1000 <convertTempToDigit+0xb6>
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <convertTempToDigit+0xbe>
	if (d4 == 0) d4 = CLEAR;
     ff6:	30 97       	sbiw	r30, 0x00	; 0
     ff8:	39 f4       	brne	.+14     	; 0x1008 <convertTempToDigit+0xbe>
     ffa:	ea e0       	ldi	r30, 0x0A	; 10
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <convertTempToDigit+0xbe>
	if (t & 0x8000) d4 = 11;
	d3 = temp/100;
	temp = temp - d3*100;
	d2 = temp/10;
	d1 = temp - d2*10;
	if (d3 == 0 && d4 == 0) d3 = CLEAR; 
    1000:	ca e0       	ldi	r28, 0x0A	; 10
    1002:	d0 e0       	ldi	r29, 0x00	; 0
	if (d4 == 0) d4 = CLEAR;
    1004:	ea e0       	ldi	r30, 0x0A	; 10
    1006:	f0 e0       	ldi	r31, 0x00	; 0
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1008:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    100a:	f8 94       	cli
		temperature[0] = (uint8_t)d4;
    100c:	ad e8       	ldi	r26, 0x8D	; 141
    100e:	b1 e0       	ldi	r27, 0x01	; 1
    1010:	ec 93       	st	X, r30
		temperature[1] = (uint8_t)d3;
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	cc 93       	st	X, r28
    1016:	11 97       	sbiw	r26, 0x01	; 1
		temperature[2] = (uint8_t)d2;
    1018:	12 96       	adiw	r26, 0x02	; 2
    101a:	8c 93       	st	X, r24
    101c:	12 97       	sbiw	r26, 0x02	; 2
		temperature[3] = (uint8_t)d1;
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	4c 93       	st	X, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1022:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1024:	30 c0       	rjmp	.+96     	; 0x1086 <convertTempToDigit+0x13c>
	uint16_t temp, d1, d2, d3, d4;
	temp = t;
	d4 = temp/1000;
	temp = temp - d4*1000;
	if (t & 0x8000) d4 = 11;
	d3 = temp/100;
    1026:	9a 01       	movw	r18, r20
    1028:	36 95       	lsr	r19
    102a:	27 95       	ror	r18
    102c:	36 95       	lsr	r19
    102e:	27 95       	ror	r18
    1030:	ab e7       	ldi	r26, 0x7B	; 123
    1032:	b4 e1       	ldi	r27, 0x14	; 20
    1034:	0e 94 00 0a 	call	0x1400	; 0x1400 <__umulhisi3>
    1038:	ec 01       	movw	r28, r24
    103a:	d6 95       	lsr	r29
    103c:	c7 95       	ror	r28
	temp = temp - d3*100;
    103e:	24 e6       	ldi	r18, 0x64	; 100
    1040:	2c 9f       	mul	r18, r28
    1042:	c0 01       	movw	r24, r0
    1044:	2d 9f       	mul	r18, r29
    1046:	90 0d       	add	r25, r0
    1048:	11 24       	eor	r1, r1
    104a:	48 1b       	sub	r20, r24
    104c:	59 0b       	sbc	r21, r25
	d2 = temp/10;
    104e:	9a 01       	movw	r18, r20
    1050:	ad ec       	ldi	r26, 0xCD	; 205
    1052:	bc ec       	ldi	r27, 0xCC	; 204
    1054:	0e 94 00 0a 	call	0x1400	; 0x1400 <__umulhisi3>
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	96 95       	lsr	r25
    105e:	87 95       	ror	r24
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
	d1 = temp - d2*10;
    1064:	bc 01       	movw	r22, r24
    1066:	66 0f       	add	r22, r22
    1068:	77 1f       	adc	r23, r23
    106a:	9c 01       	movw	r18, r24
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	26 0f       	add	r18, r22
    107a:	37 1f       	adc	r19, r23
    107c:	42 1b       	sub	r20, r18
    107e:	53 0b       	sbc	r21, r19
void convertTempToDigit(uint16_t t){
	uint16_t temp, d1, d2, d3, d4;
	temp = t;
	d4 = temp/1000;
	temp = temp - d4*1000;
	if (t & 0x8000) d4 = 11;
    1080:	eb e0       	ldi	r30, 0x0B	; 11
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	c1 cf       	rjmp	.-126    	; 0x1008 <convertTempToDigit+0xbe>
		temperature[0] = (uint8_t)d4;
		temperature[1] = (uint8_t)d3;
		temperature[2] = (uint8_t)d2;
		temperature[3] = (uint8_t)d1;
	}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <main>:
int main(void)
{
	uint8_t nSensors, i;
	uint8_t err = 0;
		
	uart_init((UART_BAUD_SELECT((BAUD),F_CPU)));
    108c:	87 e6       	ldi	r24, 0x67	; 103
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 78 05 	call	0xaf0	; 0xaf0 <uart_init>
		
	#ifndef OW_ONE_BUS
		ow_set_bus(&PIND,&PORTD,&DDRD,PORTD7);
    1094:	27 e0       	ldi	r18, 0x07	; 7
    1096:	4a e2       	ldi	r20, 0x2A	; 42
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	6b e2       	ldi	r22, 0x2B	; 43
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	89 e2       	ldi	r24, 0x29	; 41
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 46 04 	call	0x88c	; 0x88c <ow_set_bus>
	#endif
		
	sei();
    10a6:	78 94       	sei
		
	uart_puts_P( NEWLINESTR "DS18X20 1-Wire-Reader Demo by Martin Thomas" NEWLINESTR );
    10a8:	8e ec       	ldi	r24, 0xCE	; 206
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
	uart_puts_P(            "-------------------------------------------" );
    10b0:	82 ea       	ldi	r24, 0xA2	; 162
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
		
	nSensors = search_sensors();
    10b8:	0e 94 f6 05 	call	0xbec	; 0xbec <search_sensors>
    10bc:	f8 2e       	mov	r15, r24
	if (nSensors == 0){
		err = 1;
	}
	uart_put_int( (int)nSensors );
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <uart_put_int>
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
    10c4:	82 e8       	ldi	r24, 0x82	; 130
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
    10cc:	ff 20       	and	r15, r15
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <main+0x46>
    10d0:	3b c1       	rjmp	.+630    	; 0x1348 <main+0x2bc>
    10d2:	c8 e9       	ldi	r28, 0x98	; 152
    10d4:	d1 e0       	ldi	r29, 0x01	; 1
    10d6:	0f ef       	ldi	r16, 0xFF	; 255
    10d8:	0f 0d       	add	r16, r15
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	0e 5f       	subi	r16, 0xFE	; 254
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	5e 01       	movw	r10, r28
    10e2:	cc 24       	eor	r12, r12
    10e4:	c3 94       	inc	r12
    10e6:	d1 2c       	mov	r13, r1
			uart_puts_P("# in Bus :");
    10e8:	87 e7       	ldi	r24, 0x77	; 119
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
			uart_put_int( (int)i + 1);
    10f0:	c6 01       	movw	r24, r12
    10f2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <uart_put_int>
			uart_puts_P(" : ");
    10f6:	83 e7       	ldi	r24, 0x73	; 115
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
    10fe:	68 e0       	ldi	r22, 0x08	; 8
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	c5 01       	movw	r24, r10
    1104:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DS18X20_show_id_uart>
			uart_puts_P( NEWLINESTR );
    1108:	80 e7       	ldi	r24, 0x70	; 112
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
    1110:	2f ef       	ldi	r18, 0xFF	; 255
    1112:	c2 1a       	sub	r12, r18
    1114:	d2 0a       	sbc	r13, r18
    1116:	38 e0       	ldi	r19, 0x08	; 8
    1118:	a3 0e       	add	r10, r19
    111a:	b1 1c       	adc	r11, r1
	}
	uart_put_int( (int)nSensors );
	uart_puts_P( " DS18X20 Sensor(s) available:" NEWLINESTR );
		
	#if DS18X20_VERBOSE
		for (i = 0; i < nSensors; i++ ) {
    111c:	c0 16       	cp	r12, r16
    111e:	d1 06       	cpc	r13, r17
    1120:	19 f7       	brne	.-58     	; 0x10e8 <main+0x5c>
    1122:	01 e0       	ldi	r16, 0x01	; 1
    1124:	10 e0       	ldi	r17, 0x00	; 0
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
		uart_puts_P( "Sensor# " );
    1126:	87 e6       	ldi	r24, 0x67	; 103
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
		uart_put_int( (int)i+1 );
    112e:	c8 01       	movw	r24, r16
    1130:	0e 94 c7 05 	call	0xb8e	; 0xb8e <uart_put_int>
		uart_puts_P( " is a " );
    1134:	80 e6       	ldi	r24, 0x60	; 96
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
    113c:	dc 2e       	mov	r13, r28
    113e:	ed 2e       	mov	r14, r29
		if ( gSensorIDs[i][0] == DS18S20_FAMILY_CODE ) {
    1140:	28 81       	ld	r18, Y
    1142:	20 31       	cpi	r18, 0x10	; 16
    1144:	29 f4       	brne	.+10     	; 0x1150 <main+0xc4>
			uart_puts_P( "DS18S20/DS1820" );
    1146:	81 e5       	ldi	r24, 0x51	; 81
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <main+0xda>
		} else if ( gSensorIDs[i][0] == DS1822_FAMILY_CODE ) {
    1150:	22 32       	cpi	r18, 0x22	; 34
    1152:	29 f4       	brne	.+10     	; 0x115e <main+0xd2>
			uart_puts_P( "DS1822" );
    1154:	8a e4       	ldi	r24, 0x4A	; 74
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <main+0xda>
		}
		else {
			uart_puts_P( "DS18B20" );
    115e:	82 e4       	ldi	r24, 0x42	; 66
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
		}
		uart_puts_P( " which is " );
    1166:	87 e3       	ldi	r24, 0x37	; 55
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
		if ( DS18X20_get_power_status( &gSensorIDs[i][0] ) == DS18X20_POWER_PARASITE ) {
    116e:	8d 2d       	mov	r24, r13
    1170:	9e 2d       	mov	r25, r14
    1172:	0e 94 b1 02 	call	0x562	; 0x562 <DS18X20_get_power_status>
    1176:	81 11       	cpse	r24, r1
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <main+0xf8>
			uart_puts_P( "parasite" );
    117a:	8e e2       	ldi	r24, 0x2E	; 46
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
    1182:	04 c0       	rjmp	.+8      	; 0x118c <main+0x100>
			} else {
			uart_puts_P( "externally" );
    1184:	83 e2       	ldi	r24, 0x23	; 35
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
		}
		uart_puts_P( " powered" NEWLINESTR );
    118c:	88 e1       	ldi	r24, 0x18	; 24
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
    1194:	0f 5f       	subi	r16, 0xFF	; 255
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	28 96       	adiw	r28, 0x08	; 8
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	80 0f       	add	r24, r16
			DS18X20_show_id_uart( &gSensorIDs[i][0], OW_ROMCODE_SIZE );
			uart_puts_P( NEWLINESTR );
		}
	#endif
		
	for ( i = 0; i < nSensors; i++ ) {
    119e:	8f 15       	cp	r24, r15
    11a0:	10 f2       	brcs	.-124    	; 0x1126 <main+0x9a>
    11a2:	ec c0       	rjmp	.+472    	; 0x137c <main+0x2f0>
	uint8_t temp = 0;
	mode = NORMAL;
	_delay_ms(1000);
	
	while(err){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    11a4:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11a6:	f8 94       	cli
			temperature[0] = E;
    11a8:	20 83       	st	Z, r18
			temperature[1] = r;
    11aa:	81 83       	std	Z+1, r24	; 0x01
			temperature[2] = r;
    11ac:	82 83       	std	Z+2, r24	; 0x02
			temperature[3] = 1;
    11ae:	93 83       	std	Z+3, r25	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11b0:	3f bf       	out	0x3f, r19	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11b2:	4f ef       	ldi	r20, 0xFF	; 255
    11b4:	53 ed       	ldi	r21, 0xD3	; 211
    11b6:	30 e3       	ldi	r19, 0x30	; 48
    11b8:	41 50       	subi	r20, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	30 40       	sbci	r19, 0x00	; 0
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <main+0x12c>
    11c0:	00 c0       	rjmp	.+0      	; 0x11c2 <main+0x136>
    11c2:	00 00       	nop
    11c4:	ef cf       	rjmp	.-34     	; 0x11a4 <main+0x118>
		}
		_delay_ms(1000);
	}
		
    while (1) {
		if (mode == NORMAL){
    11c6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <mode>
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <main+0x144>
    11ce:	86 c0       	rjmp	.+268    	; 0x12dc <main+0x250>
			if (millis() - milliseconds_since > 999){
    11d0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <millis>
    11d4:	40 90 73 01 	lds	r4, 0x0173	; 0x800173 <milliseconds_since>
    11d8:	50 90 74 01 	lds	r5, 0x0174	; 0x800174 <milliseconds_since+0x1>
    11dc:	60 90 75 01 	lds	r6, 0x0175	; 0x800175 <milliseconds_since+0x2>
    11e0:	70 90 76 01 	lds	r7, 0x0176	; 0x800176 <milliseconds_since+0x3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	84 19       	sub	r24, r4
    11ea:	95 09       	sbc	r25, r5
    11ec:	a6 09       	sbc	r26, r6
    11ee:	b7 09       	sbc	r27, r7
    11f0:	88 3e       	cpi	r24, 0xE8	; 232
    11f2:	93 40       	sbci	r25, 0x03	; 3
    11f4:	a1 05       	cpc	r26, r1
    11f6:	b1 05       	cpc	r27, r1
    11f8:	00 f1       	brcs	.+64     	; 0x123a <main+0x1ae>
				milliseconds_since = millis();
    11fa:	0e 94 9d 06 	call	0xd3a	; 0xd3a <millis>
    11fe:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <milliseconds_since>
    1202:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <milliseconds_since+0x1>
    1206:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <milliseconds_since+0x2>
    120a:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <milliseconds_since+0x3>
				readTempForOnlyDS18b20();
    120e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <readTempForOnlyDS18b20>
				convertTempToDigit(decicelsius);
    1212:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <decicelsius>
    1216:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <decicelsius+0x1>
    121a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <convertTempToDigit>
				uart_puts_P( NEWLINESTR );
    121e:	85 e1       	ldi	r24, 0x15	; 21
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
				uart_put_temp( decicelsius );
    1226:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <decicelsius>
    122a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <decicelsius+0x1>
    122e:	0e 94 36 06 	call	0xc6c	; 0xc6c <uart_put_temp>
				uart_puts_P( NEWLINESTR );		
    1232:	82 e1       	ldi	r24, 0x12	; 18
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 b5 05 	call	0xb6a	; 0xb6a <uart_puts_p>
			}
			while(decicelsius > 270){
    123a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <decicelsius>
    123e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <decicelsius+0x1>
    1242:	8f 30       	cpi	r24, 0x0F	; 15
    1244:	51 e0       	ldi	r21, 0x01	; 1
    1246:	95 07       	cpc	r25, r21
    1248:	d4 f0       	brlt	.+52     	; 0x127e <main+0x1f2>
				err = 2;
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    124a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    124c:	f8 94       	cli
					temperature[0] = E;
    124e:	f8 82       	st	Y, r15
					temperature[1] = r;
    1250:	19 83       	std	Y+1, r17	; 0x01
					temperature[2] = r;
    1252:	1a 83       	std	Y+2, r17	; 0x02
					temperature[3] = 3;
    1254:	0b 83       	std	Y+3, r16	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1256:	8f bf       	out	0x3f, r24	; 63
				}
				readTempForOnlyDS18b20();
    1258:	0e 94 63 06 	call	0xcc6	; 0xcc6 <readTempForOnlyDS18b20>
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	99 e6       	ldi	r25, 0x69	; 105
    1260:	e8 e1       	ldi	r30, 0x18	; 24
    1262:	81 50       	subi	r24, 0x01	; 1
    1264:	90 40       	sbci	r25, 0x00	; 0
    1266:	e0 40       	sbci	r30, 0x00	; 0
    1268:	e1 f7       	brne	.-8      	; 0x1262 <main+0x1d6>
    126a:	00 c0       	rjmp	.+0      	; 0x126c <main+0x1e0>
    126c:	00 00       	nop
				convertTempToDigit(decicelsius);
				uart_puts_P( NEWLINESTR );
				uart_put_temp( decicelsius );
				uart_puts_P( NEWLINESTR );		
			}
			while(decicelsius > 270){
    126e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <decicelsius>
    1272:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <decicelsius+0x1>
    1276:	8f 30       	cpi	r24, 0x0F	; 15
    1278:	f1 e0       	ldi	r31, 0x01	; 1
    127a:	9f 07       	cpc	r25, r31
    127c:	34 f7       	brge	.-52     	; 0x124a <main+0x1be>
					temperature[3] = 3;
				}
				readTempForOnlyDS18b20();
				_delay_ms(500);
			}
			if (decicelsius < limitLow){ //heat on
    127e:	8b 3e       	cpi	r24, 0xEB	; 235
    1280:	91 05       	cpc	r25, r1
    1282:	1c f5       	brge	.+70     	; 0x12ca <main+0x23e>
				if (millis() - milliseconds_since1 > 249){
    1284:	0e 94 9d 06 	call	0xd3a	; 0xd3a <millis>
    1288:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <milliseconds_since1>
    128c:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <milliseconds_since1+0x1>
    1290:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <milliseconds_since1+0x2>
    1294:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <milliseconds_since1+0x3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	82 1b       	sub	r24, r18
    129e:	93 0b       	sbc	r25, r19
    12a0:	a4 0b       	sbc	r26, r20
    12a2:	b5 0b       	sbc	r27, r21
    12a4:	8a 3f       	cpi	r24, 0xFA	; 250
    12a6:	91 05       	cpc	r25, r1
    12a8:	a1 05       	cpc	r26, r1
    12aa:	b1 05       	cpc	r27, r1
    12ac:	70 f0       	brcs	.+28     	; 0x12ca <main+0x23e>
					milliseconds_since1 = millis();
    12ae:	0e 94 9d 06 	call	0xd3a	; 0xd3a <millis>
    12b2:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <milliseconds_since1>
    12b6:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <milliseconds_since1+0x1>
    12ba:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <milliseconds_since1+0x2>
    12be:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <milliseconds_since1+0x3>
					temp ^= 1;
    12c2:	eb 24       	eor	r14, r11
					temperature[0] = temp + 10;
    12c4:	8a e0       	ldi	r24, 0x0A	; 10
    12c6:	8e 0d       	add	r24, r14
    12c8:	88 83       	st	Y, r24
				}
			}
			if (decicelsius > limitHigh){ //cool on
    12ca:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <decicelsius>
    12ce:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <decicelsius+0x1>
    12d2:	8b 3f       	cpi	r24, 0xFB	; 251
    12d4:	91 05       	cpc	r25, r1
    12d6:	14 f0       	brlt	.+4      	; 0x12dc <main+0x250>
				temperature[0] = 10;
    12d8:	2a e0       	ldi	r18, 0x0A	; 10
    12da:	28 83       	st	Y, r18
			if (decicelsius > limitLow && decicelsius < limitHigh){ //cool on
				
			}
		}
		
		getButtonState(BUTTON1);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <getButtonState>

		if (buttonStateON[BUTTON1]){
    12e2:	f6 01       	movw	r30, r12
    12e4:	80 81       	ld	r24, Z
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <main+0x260>
    12ea:	6d cf       	rjmp	.-294    	; 0x11c6 <main+0x13a>
			if (mode == NORMAL){
    12ec:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <mode>
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	71 f4       	brne	.+28     	; 0x1310 <main+0x284>
				buttonStateON[BUTTON1] = 0;
    12f4:	10 82       	st	Z, r1
				mode = HIGH;
    12f6:	90 92 89 01 	sts	0x0189, r9	; 0x800189 <mode>
				convertTempToDigit(limitHigh);
    12fa:	8a ef       	ldi	r24, 0xFA	; 250
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <convertTempToDigit>
				temperature[0] = DEFIS_UP;
    1302:	8d e0       	ldi	r24, 0x0D	; 13
    1304:	88 83       	st	Y, r24
			}
		}
		if (buttonStateON[BUTTON1]){
    1306:	f6 01       	movw	r30, r12
    1308:	80 81       	ld	r24, Z
    130a:	88 23       	and	r24, r24
    130c:	09 f4       	brne	.+2      	; 0x1310 <main+0x284>
    130e:	5b cf       	rjmp	.-330    	; 0x11c6 <main+0x13a>
			if (mode == HIGH){
    1310:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <mode>
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	71 f4       	brne	.+28     	; 0x1334 <main+0x2a8>
				buttonStateON[BUTTON1] = 0;
    1318:	f6 01       	movw	r30, r12
    131a:	10 82       	st	Z, r1
				mode = LOW;
    131c:	a0 92 89 01 	sts	0x0189, r10	; 0x800189 <mode>
				convertTempToDigit(limitLow);
    1320:	8b ee       	ldi	r24, 0xEB	; 235
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 a5 07 	call	0xf4a	; 0xf4a <convertTempToDigit>
				temperature[0] = DEFIS_DOWN;
    1328:	88 82       	st	Y, r8
			}
		}
		if (buttonStateON[BUTTON1]){
    132a:	f6 01       	movw	r30, r12
    132c:	80 81       	ld	r24, Z
    132e:	88 23       	and	r24, r24
    1330:	09 f4       	brne	.+2      	; 0x1334 <main+0x2a8>
    1332:	49 cf       	rjmp	.-366    	; 0x11c6 <main+0x13a>
			if (mode == LOW){
    1334:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <mode>
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	09 f0       	breq	.+2      	; 0x133e <main+0x2b2>
    133c:	44 cf       	rjmp	.-376    	; 0x11c6 <main+0x13a>
				buttonStateON[BUTTON1] = 0;
    133e:	f6 01       	movw	r30, r12
    1340:	10 82       	st	Z, r1
				mode = NORMAL;
    1342:	b0 92 89 01 	sts	0x0189, r11	; 0x800189 <mode>
    1346:	3f cf       	rjmp	.-386    	; 0x11c6 <main+0x13a>
// 		if ( nSensors > 0 ) {
// 			eeprom_test();
// 		}
// 	#endif	
				
	initDisplay();
    1348:	0e 94 af 06 	call	0xd5e	; 0xd5e <initDisplay>
	initTimer0();
    134c:	0e 94 d3 06 	call	0xda6	; 0xda6 <initTimer0>
	initTimer1();
    1350:	0e 94 b9 06 	call	0xd72	; 0xd72 <initTimer1>
	initButton();
    1354:	0e 94 a8 06 	call	0xd50	; 0xd50 <initButton>
	uint8_t temp = 0;
	mode = NORMAL;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <mode>
    135e:	ff ef       	ldi	r31, 0xFF	; 255
    1360:	23 ed       	ldi	r18, 0xD3	; 211
    1362:	30 e3       	ldi	r19, 0x30	; 48
    1364:	f1 50       	subi	r31, 0x01	; 1
    1366:	20 40       	sbci	r18, 0x00	; 0
    1368:	30 40       	sbci	r19, 0x00	; 0
    136a:	e1 f7       	brne	.-8      	; 0x1364 <main+0x2d8>
    136c:	00 c0       	rjmp	.+0      	; 0x136e <main+0x2e2>
    136e:	00 00       	nop
	_delay_ms(1000);
	
	while(err){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			temperature[0] = E;
    1370:	ed e8       	ldi	r30, 0x8D	; 141
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	2f e0       	ldi	r18, 0x0F	; 15
			temperature[1] = r;
    1376:	80 e1       	ldi	r24, 0x10	; 16
			temperature[2] = r;
			temperature[3] = 1;
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	14 cf       	rjmp	.-472    	; 0x11a4 <main+0x118>
// 		if ( nSensors > 0 ) {
// 			eeprom_test();
// 		}
// 	#endif	
				
	initDisplay();
    137c:	0e 94 af 06 	call	0xd5e	; 0xd5e <initDisplay>
	initTimer0();
    1380:	0e 94 d3 06 	call	0xda6	; 0xda6 <initTimer0>
	initTimer1();
    1384:	0e 94 b9 06 	call	0xd72	; 0xd72 <initTimer1>
	initButton();
    1388:	0e 94 a8 06 	call	0xd50	; 0xd50 <initButton>
	uint8_t temp = 0;
	mode = NORMAL;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <mode>
    1392:	4f ef       	ldi	r20, 0xFF	; 255
    1394:	53 ed       	ldi	r21, 0xD3	; 211
    1396:	80 e3       	ldi	r24, 0x30	; 48
    1398:	41 50       	subi	r20, 0x01	; 1
    139a:	50 40       	sbci	r21, 0x00	; 0
    139c:	80 40       	sbci	r24, 0x00	; 0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <main+0x30c>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <main+0x316>
    13a2:	00 00       	nop
    13a4:	e1 2c       	mov	r14, r1
				uart_puts_P( NEWLINESTR );		
			}
			while(decicelsius > 270){
				err = 2;
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
					temperature[0] = E;
    13a6:	cd e8       	ldi	r28, 0x8D	; 141
    13a8:	d1 e0       	ldi	r29, 0x01	; 1
    13aa:	0f 2e       	mov	r0, r31
    13ac:	ff e0       	ldi	r31, 0x0F	; 15
    13ae:	ff 2e       	mov	r15, r31
    13b0:	f0 2d       	mov	r31, r0
					temperature[1] = r;
    13b2:	10 e1       	ldi	r17, 0x10	; 16
					temperature[2] = r;
					temperature[3] = 3;
    13b4:	03 e0       	ldi	r16, 0x03	; 3
    13b6:	a0 2e       	mov	r10, r16
				_delay_ms(500);
			}
			if (decicelsius < limitLow){ //heat on
				if (millis() - milliseconds_since1 > 249){
					milliseconds_since1 = millis();
					temp ^= 1;
    13b8:	bb 24       	eor	r11, r11
    13ba:	b3 94       	inc	r11
			}
		}
		
		getButtonState(BUTTON1);

		if (buttonStateON[BUTTON1]){
    13bc:	0f 2e       	mov	r0, r31
    13be:	fd e7       	ldi	r31, 0x7D	; 125
    13c0:	cf 2e       	mov	r12, r31
    13c2:	f1 e0       	ldi	r31, 0x01	; 1
    13c4:	df 2e       	mov	r13, r31
    13c6:	f0 2d       	mov	r31, r0
		if (buttonStateON[BUTTON1]){
			if (mode == HIGH){
				buttonStateON[BUTTON1] = 0;
				mode = LOW;
				convertTempToDigit(limitLow);
				temperature[0] = DEFIS_DOWN;
    13c8:	0f 2e       	mov	r0, r31
    13ca:	fe e0       	ldi	r31, 0x0E	; 14
    13cc:	8f 2e       	mov	r8, r31
    13ce:	f0 2d       	mov	r31, r0
		getButtonState(BUTTON1);

		if (buttonStateON[BUTTON1]){
			if (mode == NORMAL){
				buttonStateON[BUTTON1] = 0;
				mode = HIGH;
    13d0:	68 94       	set
    13d2:	99 24       	eor	r9, r9
    13d4:	91 f8       	bld	r9, 1
    13d6:	f7 ce       	rjmp	.-530    	; 0x11c6 <main+0x13a>

000013d8 <__divmodhi4>:
    13d8:	97 fb       	bst	r25, 7
    13da:	07 2e       	mov	r0, r23
    13dc:	16 f4       	brtc	.+4      	; 0x13e2 <__divmodhi4+0xa>
    13de:	00 94       	com	r0
    13e0:	07 d0       	rcall	.+14     	; 0x13f0 <__divmodhi4_neg1>
    13e2:	77 fd       	sbrc	r23, 7
    13e4:	09 d0       	rcall	.+18     	; 0x13f8 <__divmodhi4_neg2>
    13e6:	0e 94 0f 0a 	call	0x141e	; 0x141e <__udivmodhi4>
    13ea:	07 fc       	sbrc	r0, 7
    13ec:	05 d0       	rcall	.+10     	; 0x13f8 <__divmodhi4_neg2>
    13ee:	3e f4       	brtc	.+14     	; 0x13fe <__divmodhi4_exit>

000013f0 <__divmodhi4_neg1>:
    13f0:	90 95       	com	r25
    13f2:	81 95       	neg	r24
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	08 95       	ret

000013f8 <__divmodhi4_neg2>:
    13f8:	70 95       	com	r23
    13fa:	61 95       	neg	r22
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255

000013fe <__divmodhi4_exit>:
    13fe:	08 95       	ret

00001400 <__umulhisi3>:
    1400:	a2 9f       	mul	r26, r18
    1402:	b0 01       	movw	r22, r0
    1404:	b3 9f       	mul	r27, r19
    1406:	c0 01       	movw	r24, r0
    1408:	a3 9f       	mul	r26, r19
    140a:	70 0d       	add	r23, r0
    140c:	81 1d       	adc	r24, r1
    140e:	11 24       	eor	r1, r1
    1410:	91 1d       	adc	r25, r1
    1412:	b2 9f       	mul	r27, r18
    1414:	70 0d       	add	r23, r0
    1416:	81 1d       	adc	r24, r1
    1418:	11 24       	eor	r1, r1
    141a:	91 1d       	adc	r25, r1
    141c:	08 95       	ret

0000141e <__udivmodhi4>:
    141e:	aa 1b       	sub	r26, r26
    1420:	bb 1b       	sub	r27, r27
    1422:	51 e1       	ldi	r21, 0x11	; 17
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <__udivmodhi4_ep>

00001426 <__udivmodhi4_loop>:
    1426:	aa 1f       	adc	r26, r26
    1428:	bb 1f       	adc	r27, r27
    142a:	a6 17       	cp	r26, r22
    142c:	b7 07       	cpc	r27, r23
    142e:	10 f0       	brcs	.+4      	; 0x1434 <__udivmodhi4_ep>
    1430:	a6 1b       	sub	r26, r22
    1432:	b7 0b       	sbc	r27, r23

00001434 <__udivmodhi4_ep>:
    1434:	88 1f       	adc	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	5a 95       	dec	r21
    143a:	a9 f7       	brne	.-22     	; 0x1426 <__udivmodhi4_loop>
    143c:	80 95       	com	r24
    143e:	90 95       	com	r25
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	08 95       	ret

00001446 <__itoa_ncheck>:
    1446:	bb 27       	eor	r27, r27
    1448:	4a 30       	cpi	r20, 0x0A	; 10
    144a:	31 f4       	brne	.+12     	; 0x1458 <__itoa_ncheck+0x12>
    144c:	99 23       	and	r25, r25
    144e:	22 f4       	brpl	.+8      	; 0x1458 <__itoa_ncheck+0x12>
    1450:	bd e2       	ldi	r27, 0x2D	; 45
    1452:	90 95       	com	r25
    1454:	81 95       	neg	r24
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__utoa_common>

0000145c <__utoa_ncheck>:
    145c:	bb 27       	eor	r27, r27

0000145e <__utoa_common>:
    145e:	fb 01       	movw	r30, r22
    1460:	55 27       	eor	r21, r21
    1462:	aa 27       	eor	r26, r26
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	aa 1f       	adc	r26, r26
    146a:	a4 17       	cp	r26, r20
    146c:	10 f0       	brcs	.+4      	; 0x1472 <__utoa_common+0x14>
    146e:	a4 1b       	sub	r26, r20
    1470:	83 95       	inc	r24
    1472:	50 51       	subi	r21, 0x10	; 16
    1474:	b9 f7       	brne	.-18     	; 0x1464 <__utoa_common+0x6>
    1476:	a0 5d       	subi	r26, 0xD0	; 208
    1478:	aa 33       	cpi	r26, 0x3A	; 58
    147a:	08 f0       	brcs	.+2      	; 0x147e <__utoa_common+0x20>
    147c:	a9 5d       	subi	r26, 0xD9	; 217
    147e:	a1 93       	st	Z+, r26
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	79 f7       	brne	.-34     	; 0x1462 <__utoa_common+0x4>
    1484:	b1 11       	cpse	r27, r1
    1486:	b1 93       	st	Z+, r27
    1488:	11 92       	st	Z+, r1
    148a:	cb 01       	movw	r24, r22
    148c:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <strrev>

00001490 <strrev>:
    1490:	dc 01       	movw	r26, r24
    1492:	fc 01       	movw	r30, r24
    1494:	67 2f       	mov	r22, r23
    1496:	71 91       	ld	r23, Z+
    1498:	77 23       	and	r23, r23
    149a:	e1 f7       	brne	.-8      	; 0x1494 <strrev+0x4>
    149c:	32 97       	sbiw	r30, 0x02	; 2
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <strrev+0x18>
    14a0:	7c 91       	ld	r23, X
    14a2:	6d 93       	st	X+, r22
    14a4:	70 83       	st	Z, r23
    14a6:	62 91       	ld	r22, -Z
    14a8:	ae 17       	cp	r26, r30
    14aa:	bf 07       	cpc	r27, r31
    14ac:	c8 f3       	brcs	.-14     	; 0x14a0 <strrev+0x10>
    14ae:	08 95       	ret

000014b0 <_exit>:
    14b0:	f8 94       	cli

000014b2 <__stop_program>:
    14b2:	ff cf       	rjmp	.-2      	; 0x14b2 <__stop_program>
